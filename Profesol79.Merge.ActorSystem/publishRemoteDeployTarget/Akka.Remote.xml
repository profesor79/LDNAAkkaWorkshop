<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.Remote</name>
    </assembly>
    <members>
        <member name="T:Akka.Remote.SeqNo">
            <summary>
            Implements a 64-bit sequence number with proper overflow ordering
            </summary>
        </member>
        <member name="M:Akka.Remote.SeqNo.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="rawValue">TBD</param>
        </member>
        <member name="P:Akka.Remote.SeqNo.RawValue">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.SeqNo.IsSuccessor(Akka.Remote.SeqNo)">
            <summary>
            Checks if this sequence number is an immediate successor of the provided one.
            </summary>
            <param name="that">The second sequence number that has to be exactly one less</param>
            <returns>true if this sequence number is the successor of the provided one</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.Inc">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.CompareTo(Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_LessThan(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            Compares two specified sequence numbers to see if the first one is less than the other one.
            </summary>
            <param name="left">The first sequence number used for comparison</param>
            <param name="right">The second sequence number used for comparison</param>
            <returns><c>true</c> if the first sequence number is less than the other one; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_LessThanOrEqual(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            Compares two specified sequence numbers to see if the first one is less than or equal to the other one.
            </summary>
            <param name="left">The first sequence number used for comparison</param>
            <param name="right">The second sequence number used for comparison</param>
            <returns><c>true</c> if the first sequence number is less than or equal to the other one; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.Equals(Akka.Remote.SeqNo)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Remote.SeqNo"/>, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Remote.SeqNo" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Remote.SeqNo" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_Equality(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            Compares two specified sequence numbers for equality.
            </summary>
            <param name="left">The first sequence number used for comparison</param>
            <param name="right">The second sequence number used for comparison</param>
            <returns><c>true</c> if both sequence numbers are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_Inequality(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            Compares two specified sequence numbers for inequality.
            </summary>
            <param name="left">The first sequence number used for comparison</param>
            <param name="right">The second sequence number used for comparison</param>
            <returns><c>true</c> if both sequence numbers are not equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_GreaterThan(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            Compares two specified sequence numbers to see if the first one is greater than the other one.
            </summary>
            <param name="left">The first sequence number used for comparison</param>
            <param name="right">The second sequence number used for comparison</param>
            <returns><c>true</c> if the first sequence number is greater than the other one; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_GreaterThanOrEqual(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            Compares two specified sequence numbers to see if the first one is greater than or equal to the other one.
            </summary>
            <param name="left">The first sequence number used for comparison</param>
            <param name="right">The second sequence number used for comparison</param>
            <returns><c>true</c> if the first sequence number is greater than or equal to the other one; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_Implicit(System.Int64)~Akka.Remote.SeqNo">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Akka.Remote.SeqNo"/>.
            </summary>
            <param name="x">The value to convert</param>
            <returns>The result of the conversion</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.op_Implicit(Akka.Remote.SeqNo)~System.Int64">
            <summary>
            Performs an implicit conversion from <see cref="T:Akka.Remote.SeqNo"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="seqNo">The sequence number to convert</param>
            <returns>The result of the conversion</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Remote.SeqNo.HasSeqNoComparer`1">
            <summary>
            Implements wrap-around comparison, in the event of a 64-bit overflow
            </summary>
            <typeparam name="T">TBD</typeparam>
        </member>
        <member name="M:Akka.Remote.SeqNo.HasSeqNoComparer`1.Compare(`0,`0)">
            <summary>
            TBD
            </summary>
            <param name="x">TBD</param>
            <param name="y">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.SeqNo.SeqNoComparer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.SeqNo.SeqNoComparer.Compare(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="x">TBD</param>
            <param name="y">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.SeqNoComparer.Equals(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="x">TBD</param>
            <param name="y">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.SeqNoComparer.GetHashCode(Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="F:Akka.Remote.SeqNo.Comparer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.SeqNo.CompareSeq(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="x">TBD</param>
            <param name="y">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.SeqNo.Max(Akka.Remote.SeqNo,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="x">TBD</param>
            <param name="y">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.IHasSequenceNumber">
            <summary>
            Messages that are to be buffered in an <see cref="T:Akka.Remote.AckedSendBuffer`1"/> or <see cref="T:Akka.Remote.AckedReceiveBuffer`1"/> has
            to implement this interface to provide the sequence needed by the buffers
            </summary>
        </member>
        <member name="P:Akka.Remote.IHasSequenceNumber.Seq">
            <summary>
            Sequence number of the message
            </summary>
        </member>
        <member name="T:Akka.Remote.Ack">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Ack.#ctor(Akka.Remote.SeqNo,System.Collections.Generic.IEnumerable{Akka.Remote.SeqNo})">
            <summary>
            Class representing an acknowledgement with select negative acknowledgements.
            </summary>
            <param name="cumulativeAck">Represents the highest sequence number received</param>
            <param name="nacks">Set of sequence numbers between the last delivered one and <paramref name="cumulativeAck"/> that has not been received.</param>
        </member>
        <member name="M:Akka.Remote.Ack.#ctor(Akka.Remote.SeqNo)">
            <summary>
            Class representing an acknowledgement with select negative acknowledgements.
            </summary>
            <param name="cumulativeAck">Represents the highest sequence number received</param>
        </member>
        <member name="P:Akka.Remote.Ack.CumulativeAck">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Ack.Nacks">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Ack.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Remote.ResendBufferCapacityReachedException">
            <summary>
            This exception is thrown when the Resent buffer is filled beyond its capacity.
            </summary>
        </member>
        <member name="M:Akka.Remote.ResendBufferCapacityReachedException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.ResendBufferCapacityReachedException"/> class.
            </summary>
            <param name="c">The capacity of the buffer</param>
        </member>
        <member name="M:Akka.Remote.ResendBufferCapacityReachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.ResendBufferCapacityReachedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.ResendUnfulfillableException">
            <summary>
            This exception is thrown when the system is unable to fulfill a resend request since negatively acknowledged payload is no longer in buffer.
            </summary>
        </member>
        <member name="M:Akka.Remote.ResendUnfulfillableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.ResendUnfulfillableException"/> class.
            </summary>
        </member>
        <member name="T:Akka.Remote.AckedSendBuffer`1">
            <summary>
            Implements an immutable resend buffer that buffers messages until they have been acknowledged. Properly removes messages
            when an <see cref="T:Akka.Remote.Ack"/> is received. This buffer works together with <see cref="T:Akka.Remote.AckedReceiveBuffer`1"/> on the receiving end.
            </summary>
            <typeparam name="T">The type of message being stored - has to implement <see cref="T:Akka.Remote.IHasSequenceNumber"/></typeparam>
        </member>
        <member name="M:Akka.Remote.AckedSendBuffer`1.#ctor(System.Int32,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="capacity">TBD</param>
            <param name="maxSeq">TBD</param>
        </member>
        <member name="M:Akka.Remote.AckedSendBuffer`1.#ctor(System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="capacity">TBD</param>
        </member>
        <member name="P:Akka.Remote.AckedSendBuffer`1.Capacity">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckedSendBuffer`1.NonAcked">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckedSendBuffer`1.Nacked">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckedSendBuffer`1.MaxSeq">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AckedSendBuffer`1.Acknowledge(Akka.Remote.Ack)">
            <summary>
            Processes an incoming acknowledgement and returns a new buffer with only unacknowledged elements remaining.
            </summary>
            <param name="ack">The received acknowledgement</param>
            <exception cref="T:Akka.Remote.ResendUnfulfillableException">Thrown if we couldn't fit all of the nacks stored inside <see cref="T:Akka.Remote.Ack"/> onto the buffer.</exception>
            <returns>An updated buffer containing the remaining unacknowledged messages</returns>
        </member>
        <member name="M:Akka.Remote.AckedSendBuffer`1.Buffer(`0)">
            <summary>
            Puts a new message in the buffer. 
            </summary>
            <param name="msg">The message to be stored for possible future transmission.</param>
            <exception cref="T:System.ArgumentException">Thrown if an out-of-sequence message is attempted to be stored.</exception>
            <exception cref="T:Akka.Remote.ResendBufferCapacityReachedException">Thrown if the resend buffer is beyond its capacity.</exception>
            <returns>The updated buffer.</returns>
        </member>
        <member name="M:Akka.Remote.AckedSendBuffer`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Akka.Remote.AckedSendBuffer`1.Copy(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="nonAcked">TBD</param>
            <param name="nacked">TBD</param>
            <param name="maxSeq">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.AckReceiveDeliverable`1">
            <summary>
            Helper class that makes it easier to work with <see cref="T:Akka.Remote.AckedReceiveBuffer`1"/> deliverables.
            </summary>
            <typeparam name="T">TBD</typeparam>
        </member>
        <member name="M:Akka.Remote.AckReceiveDeliverable`1.#ctor(Akka.Remote.AckedReceiveBuffer{`0},System.Collections.Generic.List{`0},Akka.Remote.Ack)">
            <summary>
            TBD
            </summary>
            <param name="buffer">TBD</param>
            <param name="deliverables">TBD</param>
            <param name="ack">TBD</param>
        </member>
        <member name="P:Akka.Remote.AckReceiveDeliverable`1.Buffer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckReceiveDeliverable`1.Deliverables">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckReceiveDeliverable`1.Ack">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.AckedReceiveBuffer`1">
            <summary>
            Implements an immutable receive buffer that buffers incoming messages until they can be safely delivered. This
            buffer works together with an <see cref="T:Akka.Remote.AckedSendBuffer`1"/> on the sender() side.
            </summary>
            <typeparam name="T">The type of messages being buffered; must implement <see cref="T:Akka.Remote.IHasSequenceNumber"/>.</typeparam>
        </member>
        <member name="F:Akka.Remote.AckedReceiveBuffer`1.Comparer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AckedReceiveBuffer`1.#ctor(Akka.Remote.SeqNo,Akka.Remote.SeqNo,System.Collections.Generic.SortedSet{`0})">
            <summary>
            Constructor
            </summary>
            <param name="lastDelivered">Sequence number of the last message that has been delivered.</param>
            <param name="cumulativeAck">The highest sequence number received so far</param>
            <param name="buffer">Buffer of messages that are waiting for delivery.</param>
        </member>
        <member name="M:Akka.Remote.AckedReceiveBuffer`1.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckedReceiveBuffer`1.LastDelivered">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckedReceiveBuffer`1.CumulativeAck">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AckedReceiveBuffer`1.Buf">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AckedReceiveBuffer`1.Receive(`0)">
            <summary>
            Puts a sequenced message in the receive buffer returning a new buffer.
            </summary>
            <param name="arrivedMsg">Message to be put into the buffer</param>
            <returns>The updated buffer containing the message</returns>
        </member>
        <member name="P:Akka.Remote.AckedReceiveBuffer`1.ExtractDeliverable">
            <summary>
            Extract all messages that could be safely delivered, an updated ack to be sent to the sender(), and
            an updated buffer that has the messages removed that can be delivered.
            </summary>
            <returns>Triplet of the updated buffer, messages that can be delivered, and the updated acknowledgement.</returns>
        </member>
        <member name="M:Akka.Remote.AckedReceiveBuffer`1.MergeFrom(Akka.Remote.AckedReceiveBuffer{`0})">
            <summary>
            Merges two receive buffers. Merging preserves sequencing of messages, and drops all messages that has been
            safely acknowledged by any of the participating buffers. Also updates the expected sequence numbers.
            </summary>
            <param name="other">The receive buffer to merge with</param>
            <returns>The merged receive buffer</returns>
        </member>
        <member name="M:Akka.Remote.AckedReceiveBuffer`1.Copy(Akka.Remote.SeqNo,Akka.Remote.SeqNo,System.Collections.Generic.SortedSet{`0})">
            <summary>
            TBD
            </summary>
            <param name="lastDelivered">TBD</param>
            <param name="cumulativeAck">TBD</param>
            <param name="buffer">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.AddressUidExtension">
            <summary>
            <see cref="T:Akka.Actor.IExtension"/> provider for <see cref="T:Akka.Remote.AddressUid"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.AddressUidExtension.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.AddressUidExtension.Uid(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.AddressUid">
            <summary>
            Extension that holds a UID that is assigned as a random 'Int'.
            
            The UID is intended to be used together with an <see cref="T:Akka.Actor.Address"/> to be
            able to distinguish restarted actor system using the same host and port.
            </summary>
        </member>
        <member name="F:Akka.Remote.AddressUid.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.AkkaProtocolSettings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AkkaProtocolSettings.TransportFailureDetectorConfig">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AkkaProtocolSettings.TransportFailureDetectorImplementationClass">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AkkaProtocolSettings.TransportHeartBeatInterval">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AkkaProtocolSettings.#ctor(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
        </member>
        <member name="T:Akka.Remote.Configuration.RemoteConfigFactory">
             <summary>
             This class contains methods used to retrieve remote configuration options from this assembly's resources.
            
             <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
             </summary>
        </member>
        <member name="M:Akka.Remote.Configuration.RemoteConfigFactory.Default">
            <summary>
            Retrieves the default remote options that Akka.NET uses when no configuration has been defined.
            </summary>
            <returns>The configuration that contains default values for all remote options.</returns>
        </member>
        <member name="M:Akka.Remote.Configuration.RemoteConfigFactory.FromResource(System.String)">
            <summary>
            Retrieves a configuration defined in a resource of the current executing assembly.
            </summary>
            <param name="resourceName">The name of the resource that contains the configuration.</param>
            <returns>The configuration defined in the current executing assembly.</returns>
        </member>
        <member name="T:Akka.Remote.Deadline">
            <summary>
            This class represents the latest date or time by which an operation should be completed.
            </summary>
        </member>
        <member name="M:Akka.Remote.Deadline.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Deadline"/> class.
            </summary>
            <param name="when">The <see cref="T:System.DateTime"/> that the deadline is due.</param>
        </member>
        <member name="P:Akka.Remote.Deadline.IsOverdue">
            <summary>
            Determines whether the deadline has past.
            </summary>
        </member>
        <member name="P:Akka.Remote.Deadline.HasTimeLeft">
            <summary>
            Determines whether there is still time left until the deadline.
            </summary>
        </member>
        <member name="P:Akka.Remote.Deadline.When">
            <summary>
            The <see cref="T:System.DateTime"/> that the deadline is due.
            </summary>
        </member>
        <member name="P:Akka.Remote.Deadline.TimeLeft">
            <summary>
            <para>
            The amount of time left until the deadline is reached.
            </para>
            <note>
            Warning: creates a new <see cref="T:System.TimeSpan"/> instance each time it's used
            </note>
            </summary>
        </member>
        <member name="M:Akka.Remote.Deadline.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.Deadline.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Akka.Remote.Deadline.Now">
            <summary>
            A deadline that is due <see cref="P:System.DateTime.UtcNow"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.Deadline.op_Addition(Akka.Remote.Deadline,System.TimeSpan)">
            <summary>
            Adds a given <see cref="T:System.TimeSpan"/> to the due time of this <see cref="T:Akka.Remote.Deadline"/>
            </summary>
            <param name="deadline">The deadline whose time is being extended</param>
            <param name="duration">The amount of time being added to the deadline</param>
            <returns>A new deadline with the specified duration added to the due time</returns>
        </member>
        <member name="M:Akka.Remote.Deadline.op_Addition(Akka.Remote.Deadline,System.Nullable{System.TimeSpan})">
            <summary>
            Adds a given <see cref="T:System.Nullable`1"/> to the due time of this <see cref="T:Akka.Remote.Deadline"/>
            </summary>
            <param name="deadline">The deadline whose time is being extended</param>
            <param name="duration">The amount of time being added to the deadline</param>
            <returns>A new deadline with the specified duration added to the due time</returns>
        </member>
        <member name="T:Akka.Remote.DeadlineFailureDetector">
            <summary>
            This class represents a <see cref="T:Akka.Remote.FailureDetector"/> that uses an absolute timeout
            of missing heartbeats to trigger unavailability.
            </summary>
        </member>
        <member name="M:Akka.Remote.DeadlineFailureDetector.#ctor(System.TimeSpan,Akka.Remote.Clock)">
            <summary>
            Obsolete. Use <see cref="M:Akka.Remote.DeadlineFailureDetector.#ctor(System.TimeSpan,System.TimeSpan,Akka.Remote.Clock)"/> instead.
            </summary>
            <param name="acceptableHeartbeatPause">N/A</param>
            <param name="clock">N/A</param>
        </member>
        <member name="M:Akka.Remote.DeadlineFailureDetector.#ctor(System.TimeSpan,System.TimeSpan,Akka.Remote.Clock)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.DeadlineFailureDetector"/> class.
            </summary>
            <param name="acceptableHeartbeatPause">Duration corresponding to number of potentially lost/delayed
            heartbeats that will be accepted before considering it to be an anomaly.
            This margin is important to be able to survive sudden, occasional, pauses in heartbeat
            arrivals, due to for example garbage collect or network drop.</param>
            <param name="heartbeatInterval">The amount of time between heartbeats</param>
            <param name="clock">The clock, returning current time in milliseconds, but can be faked for testing purposes. It is only used for measuring intervals (duration).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown for the following reasons:
            <ul>
            <li>The specified <paramref name="acceptableHeartbeatPause"/> is less than zero.</li>
            <li>The specified <paramref name="heartbeatInterval"/> is less than zero</li>
            </ul>
            </exception>
        </member>
        <member name="M:Akka.Remote.DeadlineFailureDetector.#ctor(Akka.Configuration.Config,Akka.Event.EventStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.DeadlineFailureDetector"/> class.
            </summary>
            <param name="config">
            The configuration used to configure this failure detector.
            <note>The configuration must define the 'akka.cluster.failure-detector.acceptable-heartbeat-pause' key.</note>
            </param>
            <param name="eventStream">N/A. This parameter is not used.</param>
        </member>
        <member name="P:Akka.Remote.DeadlineFailureDetector.IsAvailable">
            <summary>
            Determines whether the resource is considered to be up and healthy.
            </summary>
        </member>
        <member name="P:Akka.Remote.DeadlineFailureDetector.IsMonitoring">
            <summary>
            Determines whether the failure detector has received any heartbeats or has started monitoring the resource.
            </summary>
        </member>
        <member name="M:Akka.Remote.DeadlineFailureDetector.HeartBeat">
            <summary>
            Notifies the failure detector that a heartbeat arrived from the monitored resource.
            </summary>
        </member>
        <member name="T:Akka.Remote.DefaultFailureDetectorRegistry`1">
            <summary>
            A lock-less, thread-safe implementation of <see cref="T:Akka.Remote.IFailureDetectorRegistry`1"/>.
            </summary>
            <typeparam name="T">TBD</typeparam>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.#ctor(System.Func{Akka.Remote.FailureDetector})">
            <summary>
            Instantiates the DefaultFailureDetectorRegistry an uses a factory method for creating new instances
            </summary>
            <param name="factory">TBD</param>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.IsAvailable(`0)">
            <summary>
            TBD
            </summary>
            <param name="resource">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.IsMonitoring(`0)">
            <summary>
            TBD
            </summary>
            <param name="resource">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.Heartbeat(`0)">
            <summary>
            TBD
            </summary>
            <param name="resource">TBD</param>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.Remove(`0)">
            <summary>
            TBD
            </summary>
            <param name="resource">TBD</param>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.Reset">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.DefaultFailureDetectorRegistry`1.GetFailureDetector(`0)">
            <summary>
            Get the underlying <see cref="T:Akka.Remote.FailureDetector"/> for a resource.
            </summary>
            <param name="resource">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.IInboundMessageDispatcher">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.IInboundMessageDispatcher.Dispatch(Akka.Actor.IInternalActorRef,Akka.Actor.Address,Akka.Remote.Proto.SerializedMessage,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="recipient">TBD</param>
            <param name="recipientAddress">TBD</param>
            <param name="message">TBD</param>
            <param name="senderOption">TBD</param>
        </member>
        <member name="T:Akka.Remote.DefaultMessageDispatcher">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.DefaultMessageDispatcher.#ctor(Akka.Actor.ActorSystem,Akka.Remote.RemoteActorRefProvider,Akka.Event.ILoggingAdapter)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="provider">TBD</param>
            <param name="log">TBD</param>
        </member>
        <member name="M:Akka.Remote.DefaultMessageDispatcher.Dispatch(Akka.Actor.IInternalActorRef,Akka.Actor.Address,Akka.Remote.Proto.SerializedMessage,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="recipient">TBD</param>
            <param name="recipientAddress">TBD</param>
            <param name="message">TBD</param>
            <param name="senderOption">TBD</param>
        </member>
        <member name="T:Akka.Remote.EndpointException">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.EndpointException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Remote.EndpointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.EndpointException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.IAssociationProblem">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.ShutDownAssociation">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.ShutDownAssociation.#ctor(System.String,Akka.Actor.Address,Akka.Actor.Address,System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="cause">TBD</param>
        </member>
        <member name="P:Akka.Remote.ShutDownAssociation.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.ShutDownAssociation.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.InvalidAssociation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.InvalidAssociation.#ctor(System.String,Akka.Actor.Address,Akka.Actor.Address,System.Exception,System.Nullable{Akka.Remote.Transport.DisassociateInfo})">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TbD</param>
            <param name="cause">TBD</param>
            <param name="disassociateInfo">TBD</param>
        </member>
        <member name="P:Akka.Remote.InvalidAssociation.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.InvalidAssociation.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.InvalidAssociation.DisassociationInfo">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.HopelessAssociation">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.HopelessAssociation.#ctor(Akka.Actor.Address,Akka.Actor.Address,System.Nullable{System.Int32},System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="uid">TBD</param>
            <param name="cause">TBD</param>
        </member>
        <member name="P:Akka.Remote.HopelessAssociation.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.HopelessAssociation.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.HopelessAssociation.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointDisassociatedException">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointDisassociatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.EndpointDisassociatedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Akka.Remote.EndpointAssociationException">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointAssociationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.EndpointAssociationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Akka.Remote.EndpointAssociationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.EndpointAssociationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Akka.Remote.OversizedPayloadException">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.OversizedPayloadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.OversizedPayloadException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor.IsIdle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.ReliableDeliverySupervisor.IsIdle.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor.Idle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.ReliableDeliverySupervisor.Idle.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor.TooLongIdle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.ReliableDeliverySupervisor.TooLongIdle.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.#ctor(Akka.Remote.Transport.AkkaProtocolHandle,Akka.Actor.Address,Akka.Actor.Address,System.Nullable{System.Int32},Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings,Akka.Remote.Transport.AkkaPduCodec,System.Collections.Concurrent.ConcurrentDictionary{Akka.Remote.EndpointManager.Link,Akka.Remote.EndpointManager.ResendState})">
            <summary>
            TBD
            </summary>
            <param name="handleOrActive">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="refuseUid">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="receiveBuffers">TBD</param>
        </member>
        <member name="P:Akka.Remote.ReliableDeliverySupervisor.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.ReliableDeliverySupervisor.UidConfirmed">
            <summary>
            Processing of <see cref="T:Akka.Remote.Ack"/>s has to be delayed until the UID is discovered after a reconnect. Depending whether the
            UID matches the expected one, pending Acks can be processed or must be dropped. It is guaranteed that for any inbound
            connections (calling <see cref="M:Akka.Remote.ReliableDeliverySupervisor.CreateWriter"/>) the first message from that connection is <see cref="T:Akka.Remote.ReliableDeliverySupervisor.GotUid"/>, therefore it serves
            a separator.
            
            If we already have an inbound handle then UID is initially confirmed.
            (This actor is never restarted.)
            </summary>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.SupervisorStrategy">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.PostRestart(System.Exception)">
            <summary>
            N/A
            </summary>
            <param name="reason">N/A</param>
            <exception cref="T:Akka.Actor.IllegalActorStateException">
            This exception is thrown automatically since <see cref="T:Akka.Remote.ReliableDeliverySupervisor"/> must not be restarted.
            </exception>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.Receiving">
            <summary>
            TBD
            </summary>
            <exception cref="T:Akka.Remote.HopelessAssociation">TBD</exception>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.Gated(System.Boolean,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="writerTerminated">TBD</param>
            <param name="earlyUngateRequested">TBD</param>
            <exception cref="T:Akka.Remote.HopelessAssociation">TBD</exception>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.IdleBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.FlushWait">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor.AttemptSysMsgRedelivery">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor.Ungate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.ReliableDeliverySupervisor.GotUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.GotUid.#ctor(System.Int32,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="uid">TBD</param>
            <param name="remoteAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.ReliableDeliverySupervisor.GotUid.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.ReliableDeliverySupervisor.GotUid.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ReliableDeliverySupervisor.ReliableDeliverySupervisorProps(Akka.Remote.Transport.AkkaProtocolHandle,Akka.Actor.Address,Akka.Actor.Address,System.Nullable{System.Int32},Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings,Akka.Remote.Transport.AkkaPduCodec,System.Collections.Concurrent.ConcurrentDictionary{Akka.Remote.EndpointManager.Link,Akka.Remote.EndpointManager.ResendState},System.String)">
            <summary>
            TBD
            </summary>
            <param name="handleOrActive">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="refuseUid">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="receiveBuffers">TBD</param>
            <param name="dispatcher">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.EndpointActor">
            <summary>
            Abstract base class for <see cref="T:Akka.Remote.EndpointReader"/> classes
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointActor.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointActor.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointActor.Settings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointActor.Transport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointActor.EventPublisher">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointActor.Inbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointActor.#ctor(Akka.Actor.Address,Akka.Actor.Address,Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointActor.PublishError(System.Exception,Akka.Event.LogLevel)">
            <summary>
            TBD
            </summary>
            <param name="ex">TBD</param>
            <param name="level">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointActor.PublishDisassociated">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.#ctor(Akka.Remote.Transport.AkkaProtocolHandle,Akka.Actor.Address,Akka.Actor.Address,System.Nullable{System.Int32},Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings,Akka.Remote.Transport.AkkaPduCodec,System.Collections.Concurrent.ConcurrentDictionary{Akka.Remote.EndpointManager.Link,Akka.Remote.EndpointManager.ResendState},Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="handleOrActive">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="refuseUid">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="receiveBuffers">TBD</param>
            <param name="reliableDeliverySupervisor">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.SupervisorStrategy">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.PostRestart(System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
            <exception cref="T:Akka.Actor.IllegalActorStateException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.PreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.Unhandled(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.SerializeMessage(System.Object)">
            <summary>
            Serializes the outbound message going onto the wire.
            </summary>
            <param name="msg">The C# object we intend to serialize.</param>
            <returns>The Akka.NET envelope containing the serialized message and addressing information.</returns>
            <remarks>Differs from JVM implementation due to Scala implicits.</remarks>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.EndpointWriterProps(Akka.Remote.Transport.AkkaProtocolHandle,Akka.Actor.Address,Akka.Actor.Address,System.Nullable{System.Int32},Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings,Akka.Remote.Transport.AkkaPduCodec,System.Collections.Concurrent.ConcurrentDictionary{Akka.Remote.EndpointManager.Link,Akka.Remote.EndpointManager.ResendState},Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="handleOrActive">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="refuseUid">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="receiveBuffers">TBD</param>
            <param name="reliableDeliverySupervisor">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.TakeOver">
            <summary>
            This message signals that the current association maintained by the local <see cref="T:Akka.Remote.EndpointWriter"/> and
            <see cref="T:Akka.Remote.EndpointReader"/> is to be overridden by a new inbound association. This is needed to avoid parallel inbound
            associations from the same remote endpoint: when a parallel inbound association is detected, the old one is removed and the new
            one is used instead.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.TakeOver.#ctor(Akka.Remote.Transport.AkkaProtocolHandle,Akka.Actor.IActorRef)">
            <summary>
            Create a new TakeOver command
            </summary>
            <param name="protocolHandle">The handle of the new association</param>
            <param name="replyTo">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.TakeOver.ProtocolHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.TakeOver.ReplyTo">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.TookOver">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.TookOver.#ctor(Akka.Actor.IActorRef,Akka.Remote.Transport.AkkaProtocolHandle)">
            <summary>
            TBD
            </summary>
            <param name="writer">TBD</param>
            <param name="protocolHandle">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.TookOver.Writer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.TookOver.ProtocolHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.BackoffTimer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.BackoffTimer.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.FlushAndStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.FlushAndStop.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.AckIdleCheckTimer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.AckIdleCheckTimer.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.Handle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.Handle.#ctor(Akka.Remote.Transport.AkkaProtocolHandle)">
            <summary>
            TBD
            </summary>
            <param name="protocolHandle">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.Handle.ProtocolHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.StopReading">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.StopReading.#ctor(Akka.Actor.IActorRef,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="writer">TBD</param>
            <param name="replyTo">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.StopReading.Writer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.StopReading.ReplyTo">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.StoppedReading">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.StoppedReading.#ctor(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="writer">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.StoppedReading.Writer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointWriter.OutboundAck">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointWriter.OutboundAck.#ctor(Akka.Remote.Ack)">
            <summary>
            TBD
            </summary>
            <param name="ack">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointWriter.OutboundAck.Ack">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointReader">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointReader.#ctor(Akka.Actor.Address,Akka.Actor.Address,Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.IInboundMessageDispatcher,System.Boolean,System.Int32,System.Collections.Concurrent.ConcurrentDictionary{Akka.Remote.EndpointManager.Link,Akka.Remote.EndpointManager.ResendState},Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="msgDispatch">TBD</param>
            <param name="inbound">TBD</param>
            <param name="uid">TBD</param>
            <param name="receiveBuffers">TBD</param>
            <param name="reliableDeliverySupervisor">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointReader.PreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointReader.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointReader.ReaderProps(Akka.Actor.Address,Akka.Actor.Address,Akka.Remote.Transport.AkkaProtocolTransport,Akka.Remote.RemoteSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.IInboundMessageDispatcher,System.Boolean,System.Int32,System.Collections.Concurrent.ConcurrentDictionary{Akka.Remote.EndpointManager.Link,Akka.Remote.EndpointManager.ResendState},Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="dispatcher">TBD</param>
            <param name="inbound">TBD</param>
            <param name="uid">TBD</param>
            <param name="receiveBuffers">TBD</param>
            <param name="reliableDeliverySupervisor">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.EndpointManager">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.EndpointPolicy">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointManager.EndpointPolicy.IsTombstone">
            <summary>
            Indicates that the policy does not contain an active endpoint, but it is a tombstone of a previous failure
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.EndpointPolicy.#ctor(System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="isTombstone">TBD</param>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Pass">
            <summary>
            We will always accept a connection from this remote node.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Pass.#ctor(Akka.Actor.IActorRef,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="endpoint">TBD</param>
            <param name="uid">TBD</param>
            <param name="refuseUid">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Pass.Endpoint">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Pass.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Pass.RefuseUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Gated">
            <summary>
            A Gated node can't be connected to from this process for <see cref="P:Akka.Remote.EndpointManager.Gated.TimeOfRelease"/>,
            but we may accept an inbound connection from it if the remote node recovers on its own.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Gated.#ctor(Akka.Remote.Deadline,System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="deadline">TBD</param>
            <param name="refuseUid">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Gated.TimeOfRelease">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Gated.RefuseUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.WasGated">
            <summary>
            Used to indicated that a node was <see cref="T:Akka.Remote.EndpointManager.Gated"/> previously.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.WasGated.#ctor(System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="refuseUid">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.WasGated.RefuseUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Quarantined">
            <summary>
            We do not accept connection attempts for a quarantined node until it restarts and resets its UID.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Quarantined.#ctor(System.Int32,Akka.Remote.Deadline)">
            <summary>
            TBD
            </summary>
            <param name="uid">TBD</param>
            <param name="deadline">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Quarantined.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Quarantined.Deadline">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.RemotingCommand">
            <summary>
            Messages sent between <see cref="T:Akka.Remote.Remoting"/> and <see cref="T:Akka.Remote.EndpointManager"/>
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Listen">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Listen.#ctor(System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IList{Akka.Remote.Transport.ProtocolTransportAddressPair}})">
            <summary>
            TBD
            </summary>
            <param name="addressesPromise">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Listen.AddressesPromise">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.StartupFinished">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.ShutdownAndFlush">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Send">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Send.#ctor(System.Object,Akka.Remote.RemoteActorRef,Akka.Actor.IActorRef,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <param name="recipient">TBD</param>
            <param name="senderOption">TBD</param>
            <param name="seqOpt">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Send.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Send.SenderOption">
            <summary>
            Can be null!
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Send.Recipient">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Send.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Send.Seq">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Send.Copy(Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="opt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Quarantine">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Quarantine.#ctor(Akka.Actor.Address,System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="uid">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Quarantine.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Quarantine.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.ManagementCommand">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.ManagementCommand.#ctor(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="cmd">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ManagementCommand.Cmd">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.ManagementCommandAck">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.ManagementCommandAck.#ctor(System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="status">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ManagementCommandAck.Status">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Prune">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.ListensResult">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.ListensResult.#ctor(System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IList{Akka.Remote.Transport.ProtocolTransportAddressPair}},System.Collections.Generic.List{System.Tuple{Akka.Remote.Transport.ProtocolTransportAddressPair,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.IAssociationEventListener}}})">
            <summary>
            TBD
            </summary>
            <param name="addressesPromise">TBD</param>
            <param name="results">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ListensResult.AddressesPromise">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ListensResult.Results">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.ListensFailure">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.ListensFailure.#ctor(System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IList{Akka.Remote.Transport.ProtocolTransportAddressPair}},System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="addressesPromise">TBD</param>
            <param name="cause">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ListensFailure.AddressesPromise">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ListensFailure.Cause">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointManager.Link">
            <summary>
            Helper class to store address pairs
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Link.#ctor(Akka.Actor.Address,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Link.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.Link.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Link.GetHashCode">
            <summary>
            Overrode this to make sure that the <see cref="T:Akka.Remote.ReliableDeliverySupervisor"/> can correctly store
            <see cref="T:Akka.Remote.AckedReceiveBuffer`1"/> data for each <see cref="T:Akka.Remote.EndpointManager.Link"/> individually, since the HashCode
            is what Dictionary types use internally for equality checking by default.
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.EndpointManager.ResendState">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.ResendState.#ctor(System.Int32,Akka.Remote.AckedReceiveBuffer{Akka.Remote.Transport.Message})">
            <summary>
            TBD
            </summary>
            <param name="uid">TBD</param>
            <param name="buffer">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ResendState.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.ResendState.Buffer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.#ctor(Akka.Configuration.Config,Akka.Event.ILoggingAdapter)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
            <param name="log">TBD</param>
        </member>
        <member name="F:Akka.Remote.EndpointManager._endpoints">
            <summary>
            Mapping between addresses and endpoint actors. If passive connections are turned off, incoming connections
            will not be part of this map!
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointManager._normalShutdown">
            <summary>
            Used to indicate when an abrupt shutdown occurs
            </summary>
        </member>
        <member name="F:Akka.Remote.EndpointManager._transportMapping">
            <summary>
            Mapping between transports and the local addresses they listen to
            </summary>
        </member>
        <member name="P:Akka.Remote.EndpointManager.PruneTimerCancelleable">
            <summary>
            Cancelable for terminating <see cref="T:Akka.Remote.EndpointManager.Prune"/> operations.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.SupervisorStrategy">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointManager.PreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Accepting">
            <summary>
            Message-processing behavior when the <see cref="T:Akka.Remote.EndpointManager"/> is able to accept
            inbound association requests.
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointManager.Flushing">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.EndpointRegistry">
            <summary>
            Not threadsafe - only to be used in HeadActor
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.RegisterWritableEndpoint(Akka.Actor.Address,Akka.Actor.IActorRef,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="endpoint">TBD</param>
            <param name="uid">TBD</param>
            <param name="refuseUid">TBD</param>
            <exception cref="T:System.ArgumentException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.RegisterWritableEndpointUid(Akka.Actor.Address,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="uid">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.RegisterWritableEndpointRefuseUid(Akka.Actor.Address,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="refuseUid">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.RegisterReadOnlyEndpoint(Akka.Actor.Address,Akka.Actor.IActorRef,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="endpoint">TBD</param>
            <param name="uid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.UnregisterEndpoint(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="endpoint">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.AddressForWriter(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="writer">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.ReadOnlyEndpointFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.IsWritable(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="endpoint">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.IsReadOnly(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="endpoint">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.IsQuarantined(Akka.Actor.Address,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="uid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.RefuseUid(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.WritableEndpointWithPolicyFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.HasWriteableEndpointFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.MarkAsFailed(Akka.Actor.IActorRef,Akka.Remote.Deadline)">
            <summary>
            Marking an endpoint as failed means that we will not try to connect to the remote system within
            the gated period but it is ok for the remote system to try to connect with us (inbound-only.)
            </summary>
            <param name="endpoint">TBD</param>
            <param name="timeOfRelease">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.MarkAsQuarantined(Akka.Actor.Address,System.Int32,Akka.Remote.Deadline)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="uid">TBD</param>
            <param name="timeOfRelease">TBD</param>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.RemovePolicy(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
        </member>
        <member name="P:Akka.Remote.EndpointRegistry.AllEndpoints">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.Prune">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EndpointRegistry.PruneFilterFunction(Akka.Remote.EndpointManager.EndpointPolicy)">
            <summary>
            Internal function used for filtering endpoints that need to be pruned due to non-recovery past their deadlines
            </summary>
        </member>
        <member name="T:Akka.Remote.FailureDetector">
            <summary>
            A failure detector must be a thread-safe, mutable construct that registers heartbeat events of a resource and
            is able to decide the availability of that monitored resource
            </summary>
        </member>
        <member name="P:Akka.Remote.FailureDetector.IsAvailable">
            <summary>
            Returns true if the resource is considered to be up and healthy; false otherwise
            </summary>
        </member>
        <member name="P:Akka.Remote.FailureDetector.IsMonitoring">
            <summary>
            Returns true if the failure detector has received any heartbeats and started monitoring
            the resource
            </summary>
        </member>
        <member name="M:Akka.Remote.FailureDetector.HeartBeat">
            <summary>
            Notifies the <see cref="T:Akka.Remote.FailureDetector"/> that a heartbeat arrived from the monitored resource.
            This causes the <see cref="T:Akka.Remote.FailureDetector"/> to update its state.
            </summary>
        </member>
        <member name="F:Akka.Remote.FailureDetector.DefaultClock">
            <summary>
            The default clock implementation used by the <see cref="T:Akka.Remote.PhiAccrualFailureDetector"/>
            </summary>
            <returns>A clock instance.</returns>
        </member>
        <member name="T:Akka.Remote.Clock">
            <summary>
            Abstraction of a clock that returns time in milliseconds. Can only be used to measure the elapsed time
            and is not related to any other notion of system or wall-clock time.
            </summary>
        </member>
        <member name="T:Akka.Remote.IFailureDetectorRegistry`1">
            <summary>
            Interface for a registry of Akka <see cref="T:Akka.Remote.FailureDetector"/>s. New resources are implicitly registered when heartbeat is first
            called with the resource given as parameter.
            </summary>
            <typeparam name="T">TBD</typeparam>
        </member>
        <member name="M:Akka.Remote.IFailureDetectorRegistry`1.IsAvailable(`0)">
            <summary>
            Returns true if the resource is considered to be up and healthy, false otherwise.
            For unregistered resources it returns true.
            </summary>
            <param name="resource">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.IFailureDetectorRegistry`1.IsMonitoring(`0)">
            <summary>
            Returns true if the failure detector has received any heartbeats and started monitoring
            the resource.
            </summary>
            <param name="resource">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.IFailureDetectorRegistry`1.Heartbeat(`0)">
            <summary>
            Records a heartbeat for a resource. If the resource is not yet registered (i.e. this is the first heartbeat) then
            is it automatically registered.
            </summary>
            <param name="resource">TBD</param>
        </member>
        <member name="M:Akka.Remote.IFailureDetectorRegistry`1.Remove(`0)">
            <summary>
            Remove the heartbeat management for a resource
            </summary>
            <param name="resource">TBD</param>
        </member>
        <member name="M:Akka.Remote.IFailureDetectorRegistry`1.Reset">
            <summary>
            Removes all resources and any associated failure detector state.
            </summary>
        </member>
        <member name="T:Akka.Remote.FailureDetectorLoader">
            <summary>
            INTERNAL API
            
            Utility class to create <see cref="T:Akka.Remote.FailureDetector"/> instances via reflection.
            </summary>
        </member>
        <member name="M:Akka.Remote.FailureDetectorLoader.Load(System.String,Akka.Configuration.Config,Akka.Actor.ActorSystem)">
            <summary>
            Loads an instantiates a given <see cref="T:Akka.Remote.FailureDetector"/> implementation. The class to be loaded must have a constructor
            that accepts a <see cref="T:Akka.Configuration.Config"/> and an <see cref="T:Akka.Event.EventStream"/> parameter. Will throw <see cref="T:Akka.Configuration.ConfigurationException"/>
            if the implementation cannot be loaded.
            </summary>
            <param name="fqcn">The fully-qualified .NET assembly name of the FailureDetector implementation class to be loaded.</param>
            <param name="config">Configuration that will be passed to the implementation.</param>
            <param name="system">ActorSystem to be used for loading the implementation.</param>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when the given <paramref name="fqcn"/> could not be resolved.
            </exception>
            <returns>A configured instance of the given <see cref="T:Akka.Remote.FailureDetector"/> implementation.</returns>
        </member>
        <member name="M:Akka.Remote.FailureDetectorLoader.LoadFailureDetector(Akka.Actor.IActorContext,System.String,Akka.Configuration.Config)">
            <summary>
            Loads an instantiates a given <see cref="T:Akka.Remote.FailureDetector"/> implementation. The class to be loaded must have a constructor
            that accepts a <see cref="T:Akka.Configuration.Config"/> and an <see cref="T:Akka.Event.EventStream"/> parameter. Will throw <see cref="T:Akka.Configuration.ConfigurationException"/>
            if the implementation cannot be loaded.
            </summary>
            <param name="context">The ActorContext used to resolve an <see cref="T:Akka.Actor.ActorSystem"/> for this <see cref="T:Akka.Remote.FailureDetector"/> instance.</param>
            <param name="fqcn">The fully-qualified .NET assembly name of the FailureDetector implementation class to be loaded.</param>
            <param name="config">Configuration that will be passed to the implementation.</param>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when the given <paramref name="fqcn"/> could not be resolved.
            </exception>
            <returns>A configured instance of the given <see cref="T:Akka.Remote.FailureDetector"/> implementation.</returns>
        </member>
        <member name="T:Akka.Remote.MessageSerializer">
            <summary>
            Class MessageSerializer.
            </summary>
        </member>
        <member name="M:Akka.Remote.MessageSerializer.Deserialize(Akka.Actor.ActorSystem,Akka.Remote.Proto.SerializedMessage)">
            <summary>
            Deserializes the specified message.
            </summary>
            <param name="system">The system.</param>
            <param name="messageProtocol">The message protocol.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Akka.Remote.MessageSerializer.Serialize(Akka.Actor.ActorSystem,Akka.Actor.Address,System.Object)">
            <summary>
            Serializes the specified message.
            </summary>
            <param name="system">The system.</param>
            <param name="address">TBD</param>
            <param name="message">The message.</param>
            <returns>SerializedMessage.</returns>
        </member>
        <member name="T:Akka.Remote.PhiAccrualFailureDetector">
             <summary>
             Implementation of 'The Phi Accrual Failure Detector' by Hayashibara et al. as defined in their paper:
             [http://ddg.jaist.ac.jp/pub/HDY+04.pdf]
            
             The suspicion level of failure is given by a value called φ (phi).
             The basic idea of the φ failure detector is to express the value of φ on a scale that
             is dynamically adjusted to reflect current network conditions. A configurable
             threshold is used to decide if φ is considered to be a failure.
            
             The value of φ is calculated as:
            
             <code>
             φ = -log10(1 - F(timeSinceLastHeartbeat)
             </code>
             
             where F is the cumulative distribution function of a normal distribution with mean
             and standard deviation estimated from historical heartbeat inter-arrival times.
             </summary>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.#ctor(System.Double,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,Akka.Remote.Clock)">
            <summary>
            Procedural constructor for PhiAccrualDetector
            </summary>
            <param name="threshold">A low threshold is prone to generate many wrong suspicions but ensures a quick detection in the event
            of a real crash. Conversely, a high threshold generates fewer mistakes but needs more time to detect actual crashes</param>
            <param name="maxSampleSize">Number of samples to use for calculation of mean and standard deviation of inter-arrival times.</param>
            <param name="minStdDeviation">Minimum standard deviation to use for the normal distribution used when calculating phi.
            Too low standard deviation might result in too much sensitivity for sudden, but normal, deviations 
            in heartbeat inter arrival times.</param>
            <param name="acceptableHeartbeatPause">Duration corresponding to number of potentially lost/delayed
            heartbeats that will be accepted before considering it to be an anomaly.
            This margin is important to be able to survive sudden, occasional, pauses in heartbeat
            arrivals, due to for example garbage collect or network drop.</param>
            <param name="firstHeartbeatEstimate">Bootstrap the stats with heartbeats that corresponds to
            to this duration, with a with rather high standard deviation (since environment is unknown
            in the beginning)</param>
            <param name="clock">The clock, returning current time in milliseconds, but can be faked for testing
            purposes. It is only used for measuring intervals (duration).</param>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.#ctor(Akka.Configuration.Config,Akka.Event.EventStream)">
            <summary>
            Constructor that reads parameters from config.
            Expecting config properties named 'threshold', 'max-sample-size',
            'min-std-deviation', 'acceptable-heartbeat-pause', and 'heartbeat-interval'.
            </summary>
            <param name="config">The HOCON configuration for the failure detector.</param>
            <param name="ev">The <see cref="T:Akka.Event.EventStream"/> for this <see cref="T:Akka.Actor.ActorSystem"/>.</param>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.#ctor(Akka.Remote.Clock)">
            <summary>
            TBD
            </summary>
            <param name="clock">TBD</param>
        </member>
        <member name="P:Akka.Remote.PhiAccrualFailureDetector.FirstHeartBeat">
            <summary>
            Guess statistics for first heartbeat,
            important so that connections with only one heartbeat becomes unavailable
            </summary>
        </member>
        <member name="T:Akka.Remote.PhiAccrualFailureDetector.State">
            <summary>
            Uses volatile memory and immutability for lockless concurrency.
            </summary>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.State.#ctor(Akka.Remote.HeartbeatHistory,System.Nullable{System.Int64})">
            <summary>
            TBD
            </summary>
            <param name="history">TBD</param>
            <param name="timeStamp">TBD</param>
        </member>
        <member name="P:Akka.Remote.PhiAccrualFailureDetector.State.History">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.PhiAccrualFailureDetector.State.TimeStamp">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.PhiAccrualFailureDetector.IsAvailable">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.PhiAccrualFailureDetector.IsMonitoring">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.HeartBeat">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.PhiAccrualFailureDetector.CurrentPhi">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.Phi(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="timestamp">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.PhiAccrualFailureDetector.Phi(System.Int64,System.Double,System.Double)">
            <summary>
             Calculation of phi, derived from the Cumulative distribution function for
            N(mean, stdDeviation) normal distribution, given by
            1.0 / (1.0 + math.exp(-y * (1.5976 + 0.070566 * y * y)))
            where y = (x - mean) / standard_deviation
            This is an approximation defined in β Mathematics Handbook (Logistic approximation).
             Error is 0.00014 at +- 3.16
            The calculated value is equivalent to -log10(1 - CDF(y))
            </summary>
            <param name="timeDiff">TBD</param>
            <param name="mean">TBD</param>
            <param name="stdDeviation">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.HeartbeatHistory">
            <summary>
            Holds the heartbeat statistics for a specific node <see cref="T:Akka.Actor.Address"/>.
            It is capped by the number of samples specified in 'maxSampleSize.'
            
            The stats (mean, variance, stdDeviation) are not defined for empty
            <see cref="T:Akka.Remote.HeartbeatHistory"/>, i.e. throws Exception
            </summary>
        </member>
        <member name="M:Akka.Remote.HeartbeatHistory.#ctor(System.Int32,System.Collections.Generic.List{System.Int64},System.Int64,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="maxSampleSize">TBD</param>
            <param name="intervals">TBD</param>
            <param name="intervalSum">TBD</param>
            <param name="squaredIntervalSum">TBD</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This exception is thrown for the following reasons:
            <ul>
            <li>The specified <paramref name="maxSampleSize"/> is less than one.</li>
            <li>The specified <paramref name="intervalSum"/> is less than zero.</li>
            <li>The specified <paramref name="squaredIntervalSum"/> is less than zero.</li>
            </ul>
            </exception>
        </member>
        <member name="P:Akka.Remote.HeartbeatHistory.Mean">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.HeartbeatHistory.Variance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.HeartbeatHistory.StdDeviation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.HeartbeatHistory.op_Addition(Akka.Remote.HeartbeatHistory,System.Int64)">
            <summary>
            Increments the <see cref="T:Akka.Remote.HeartbeatHistory"/>.
            </summary>
            <param name="history">The current history.</param>
            <param name="interval">The new interval which will be added.</param>
            <returns>A new heartbeat history instance with the added interval.</returns>
        </member>
        <member name="M:Akka.Remote.HeartbeatHistory.Apply(System.Int32)">
            <summary>
            Create an empty <see cref="T:Akka.Remote.HeartbeatHistory"/> without any history.
            Can only be used as starting point for appending intervals.
            The stats (mean, variance, stdDeviation) are not defined for empty
            HeartbeatHistory and will throw DivideByZero exceptions
            </summary>
            <param name="maxSampleSize">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.IRemoteRef">
            <summary>
            Marker interface for Actors that are deployed in a remote scope
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteActorRef">
            <summary>
            Class RemoteActorRef.
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRef._deploy">
            <summary>
            The deploy
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRef._parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRef._props">
            <summary>
            The props
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.#ctor(Akka.Remote.RemoteTransport,Akka.Actor.Address,Akka.Actor.ActorPath,Akka.Actor.IInternalActorRef,Akka.Actor.Props,Akka.Actor.Deploy)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.RemoteActorRef"/> class.
            </summary>
            <param name="remote">The remote.</param>
            <param name="localAddressToUse">The local address to use.</param>
            <param name="path">The path.</param>
            <param name="parent">The parent.</param>
            <param name="props">The props.</param>
            <param name="deploy">The deploy.</param>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.LocalAddressToUse">
            <summary>
            Gets the local address to use.
            </summary>
            <value>The local address to use.</value>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.Remote">
            <summary>
            Gets the remote.
            </summary>
            <value>The remote.</value>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.IsTerminated">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.GetChild(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the child.
            </summary>
            <param name="name">The name.</param>
            <returns>ActorRef.</returns>
            <exception cref="T:System.NotImplementedException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.Resume(System.Exception)">
            <summary>
            Resumes the specified caused by failure.
            </summary>
            <param name="causedByFailure">The caused by failure.</param>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.Restart(System.Exception)">
            <summary>
            Restarts the specified cause.
            </summary>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.Suspend">
            <summary>
            Suspends this instance.
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.IsLocal">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRef.Path">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.SendSystemMessage(Akka.Dispatch.SysMsg.ISystemMessage)">
            <summary>
            Sends the system message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.TellInternal(System.Object,Akka.Actor.IActorRef)">
            <summary>
            Tells the internal.
            </summary>
            <param name="message">The message.</param>
            <param name="sender">The sender.</param>
            <exception cref="T:Akka.Actor.InvalidMessageException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.IsWatchIntercepted(Akka.Actor.IActorRef,Akka.Actor.IActorRef)">
            <summary>
            Determine if a <see cref="T:Akka.Dispatch.SysMsg.Watch"/>/<see cref="T:Akka.Dispatch.SysMsg.Unwatch"/> message must be handled by the <see cref="T:Akka.Remote.RemoteWatcher"/>
            actor, or sent to this <see cref="T:Akka.Remote.RemoteActorRef"/>.
            </summary>
            <param name="watchee">The actor being watched.</param>
            <param name="watcher">The actor watching.</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRef.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteDeploymentWatcher">
            <summary>
            Responsible for cleaning up child references of remote deployed actors when remote node
            goes down (crash, network failure), i.e. triggered by Akka.Actor.Terminated.AddressTerminated
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteDeploymentWatcher.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteDeploymentWatcher.WatchRemote">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteDeploymentWatcher.WatchRemote.#ctor(Akka.Actor.IActorRef,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="actor">TBD</param>
            <param name="supervisor">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteDeploymentWatcher.WatchRemote.Actor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteDeploymentWatcher.WatchRemote.Supervisor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteMetricsExtension">
            <summary>
                INTERNAL API
                Extension that keeps track of remote metrics, such
                as max size of different message types.
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteMetricsExtension.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteMetricsExtension.Create(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RemoteMetricsOn">
            <summary>
                INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteMetricsOn.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteMetricsOn.LogPayloadBytes(System.Object,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="msg">TBD</param>
            <param name="payloadBytes">TBD</param>
        </member>
        <member name="T:Akka.Remote.RemoteMetricsOff">
            <summary>
                INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteMetricsOff.LogPayloadBytes(System.Object,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="msg">TBD</param>
            <param name="payloadBytes">TBD</param>
        </member>
        <member name="T:Akka.Remote.IRemoteMetrics">
            <summary>
                INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.IRemoteMetrics.LogPayloadBytes(System.Object,System.Int64)">
            <summary>
                Logging of the size of different message types.
                Maximum detected size per message type is logged once, with
                and increase threshold of 10%.
            </summary>
            <param name="msg">TBD</param>
            <param name="payloadBytes">TBD</param>
        </member>
        <member name="T:Akka.Remote.IDaemonMsg">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.DaemonMsgCreate">
            <summary>
             INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.DaemonMsgCreate.#ctor(Akka.Actor.Props,Akka.Actor.Deploy,System.String,Akka.Actor.IActorRef)">
            <summary>
                Initializes a new instance of the <see cref="T:Akka.Remote.DaemonMsgCreate" /> class.
            </summary>
            <param name="props">The props.</param>
            <param name="deploy">The deploy.</param>
            <param name="path">The path.</param>
            <param name="supervisor">The supervisor.</param>
        </member>
        <member name="P:Akka.Remote.DaemonMsgCreate.Props">
            <summary>
                Gets the props.
            </summary>
            <value>The props.</value>
        </member>
        <member name="P:Akka.Remote.DaemonMsgCreate.Deploy">
            <summary>
                Gets the deploy.
            </summary>
            <value>The deploy.</value>
        </member>
        <member name="P:Akka.Remote.DaemonMsgCreate.Path">
            <summary>
                Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Akka.Remote.DaemonMsgCreate.Supervisor">
            <summary>
                Gets the supervisor.
            </summary>
            <value>The supervisor.</value>
        </member>
        <member name="T:Akka.Remote.RemoteSystemDaemon">
            <summary>
             INTERNAL API
            
            Internal system "daemon" actor for remote internal communication.
            
            It acts as the brain of the remote that responds to system remote messages and executes actions accordingly.
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteSystemDaemon.#ctor(Akka.Actor.Internal.ActorSystemImpl,Akka.Actor.ActorPath,Akka.Actor.IInternalActorRef,Akka.Actor.IActorRef,Akka.Event.ILoggingAdapter)">
            <summary>
                Initializes a new instance of the <see cref="T:Akka.Remote.RemoteSystemDaemon" /> class.
            </summary>
            <param name="system">The system.</param>
            <param name="path">The path.</param>
            <param name="parent">The parent.</param>
            <param name="terminator">TBD</param>
            <param name="log">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteSystemDaemon.TellInternal(System.Object,Akka.Actor.IActorRef)">
            <summary>
                Tells the internal.
            </summary>
            <param name="message">The message.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Akka.Remote.RemoteSystemDaemon.SendSystemMessage(Akka.Dispatch.SysMsg.ISystemMessage)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteSystemDaemon.HandleDaemonMsgCreate(Akka.Remote.DaemonMsgCreate)">
            <summary>
                Handles the daemon MSG create.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Akka.Remote.RemoteSystemDaemon.GetChild(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Find the longest matching path which we know about and return that <see cref="T:Akka.Actor.IActorRef"/>
                (or ask that <see cref="T:Akka.Actor.IActorRef"/> to continue searching if elements are left).
            </summary>
            <param name="name">The name.</param>
            <returns>ActorRef.</returns>
        </member>
        <member name="T:Akka.Remote.RemoteDeployer">
            <summary>
            INTERNAL API
            
            Used for deployment of actors on remote systems
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteDeployer.#ctor(Akka.Actor.Settings)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.RemoteDeployer"/> class.
            </summary>
            <param name="settings">The settings used to configure the deployer.</param>
        </member>
        <member name="M:Akka.Remote.RemoteDeployer.ParseConfig(System.String,Akka.Configuration.Config)">
            <summary>
            Creates an actor deployment to the supplied path, <paramref name="key" />, using the supplied configuration, <paramref name="config" />.
            </summary>
            <param name="key">The path used to deploy the actor.</param>
            <param name="config">The configuration used to configure the deployed actor.</param>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when a remote node name in the specified <paramref name="config"/> is unparseable.
            </exception>
            <returns>A configured actor deployment to the given path.</returns>
        </member>
        <member name="T:Akka.Remote.RemoteSettings">
            <summary>
            This class represents configuration information used when setting up remoting.
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteSettings.#ctor(Akka.Configuration.Config)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.RemoteSettings"/> class.
            </summary>
            <param name="config">The configuration to use when setting up remoting.</param>
        </member>
        <member name="F:Akka.Remote.RemoteSettings.AkkaScheme">
            <summary>
            Used for augmenting outbound messages with the Akka scheme
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.Config">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.TrustedSelectionPaths">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.UntrustedMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.LogSend">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.LogReceive">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.LogBufferSizeExceeding">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.RemoteLifecycleEventsLogLevel">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.Dispatcher">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.ShutdownTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.FlushWait">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.TransportNames">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.Adapters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.Transports">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.BackoffPeriod">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.RetryGateClosedFor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.UsePassiveConnections">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.SysMsgBufferSize">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.SysResendLimit">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.SysResendTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.InitialSysMsgDeliveryTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.QuarantineSilentSystemTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.SysMsgAckTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.QuarantineDuration">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.StartupTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.CommandAckTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.WatchFailureDetectorConfig">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.WatchFailureDetectorImplementationClass">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.WatchHeartBeatInterval">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.WatchUnreachableReaperInterval">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.WatchHeartbeatExpectedResponseAfter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteSettings.ConfigureDispatcher(Akka.Actor.Props)">
            <summary>
            TBD
            </summary>
            <param name="props">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RemoteSettings.TransportSettings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteSettings.TransportSettings.#ctor(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.TransportSettings.Config">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.TransportSettings.Adapters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteSettings.TransportSettings.TransportClass">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteTransport">
            <summary>
            INTERNAL API.
            
            The remote transport is responsible for sending and receiving messages.
            Each transport has an address, which it should provide in Serialization.CurrentTransportInformation (thread-local)
            while serializing ActorReferences (which might also be part of messages). This address must
            be available (i.e. fully initialized) by the time the first message is received or when the Start() method
            returns, whichever happens first.
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.#ctor(Akka.Actor.ExtendedActorSystem,Akka.Remote.RemoteActorRefProvider)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="provider">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.System">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.Provider">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.Addresses">
            <summary>
            Addresses to be used in <see cref="T:Akka.Actor.RootActorPath"/> of refs generated for this transport.
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.DefaultAddress">
            <summary>
            The default transport address of the <see cref="T:Akka.Actor.ActorSystem"/>. 
            This is the listen address of the default transport.
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.UseUntrustedMode">
            <summary>
            When true, some functionality will be turned off for security purposes
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.logRemoteLifeCycleEvents">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteTransport.Log">
            <summary>
            A logger that can be used to log issues that may occur
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.Start">
            <summary>
            Start up the transport, i.e. enable incoming connections
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.Shutdown">
            <summary>
            Shuts down the remoting
            </summary>
            <returns>A Task that can be waited on until shutdown is complete</returns>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.Send(System.Object,Akka.Actor.IActorRef,Akka.Remote.RemoteActorRef)">
            <summary>
            Sends the given message to the recipient, supplying <paramref name="sender"/> if any.
            </summary>
            <param name="message">TBD</param>
            <param name="sender">TBD</param>
            <param name="recipient">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.ManagementCommand(System.Object)">
            <summary>
            Sends a management command to the underlying transport stack. The call returns with a Task that
            indicates if the command was handled successfully or dropped.
            </summary>
            <param name="cmd">a Command message to send to the transport</param>
            <returns>A task that indicates when the message was successfully handled or dropped</returns>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.LocalAddressForRemote(Akka.Actor.Address)">
            <summary>
            Resolves the correct local address to be used for contacting the given remote address
            </summary>
            <param name="remote">The remote address</param>
            <returns>the local address to be used for the given remote address</returns>
        </member>
        <member name="M:Akka.Remote.RemoteTransport.Quarantine(Akka.Actor.Address,System.Nullable{System.Int32})">
            <summary>
            Marks a remote system as out of sync and prevents reconnects until the quarantine timeout elapses.
            </summary>
            <param name="address">Address of the remote system to be quarantined</param>
            <param name="uid">UID of the remote system; if the uid is not defined it will not be a strong quarantine but the current
            endpoint writer will be stopped (dropping system messages) and the address will be gated.</param>
        </member>
        <member name="T:Akka.Remote.RemoteTransportException">
            <summary>
            This exception is thrown when a general failure within a <see cref="T:Akka.Remote.RemoteTransport"/> occurs, such as
            the inability to start, wrong configuration, etc...
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteTransportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.RemoteTransportException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Remote.RemoteTransportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.RemoteTransportException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher">
             <summary>
             INTERNAL API
             
             Remote nodes with actors that are watched are monitored by this actor to be able
             to detect network failures and process crashes. <see cref="T:Akka.Remote.RemoteActorRefProvider"/>
             intercepts Watch and Unwatch system messages and sends corresponding
             <see cref="T:Akka.Remote.RemoteWatcher.WatchRemote"/> and <see cref="T:Akka.Remote.RemoteWatcher.UnwatchRemote"/> to this actor.
            
             For a new node to be watched this actor periodically sends <see cref="T:Akka.Remote.RemoteWatcher.Heartbeat"/>
             to the peer actor on the other node, which replies with <see cref="T:Akka.Remote.RemoteWatcher.HeartbeatRsp"/>
             message back. The failure detector on the watching side monitors these heartbeat messages.
             If arrival of heartbeat messages stops it will be detected and this actor will publish
             <see cref="T:Akka.Actor.AddressTerminated"/> to the <see cref="T:Akka.Event.AddressTerminatedTopic"/>.
            
             When all actors on a node have been unwatched it will stop sending heartbeat messages.
            
             For bi-directional watch between two nodes the same thing will be established in
             both directions, but independent of each other.
             </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Props(Akka.Remote.IFailureDetectorRegistry{Akka.Actor.Address},System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="failureDetector">TBD</param>
            <param name="heartbeatInterval">TBD</param>
            <param name="unreachableReaperInterval">TBD</param>
            <param name="heartbeatExpectedResponseAfter">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.WatchCommand">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.WatchCommand.#ctor(Akka.Actor.IInternalActorRef,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
            <param name="watcher">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.WatchCommand.Watchee">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.WatchCommand.Watcher">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.WatchRemote">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.WatchRemote.#ctor(Akka.Actor.IInternalActorRef,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
            <param name="watcher">TBD</param>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.UnwatchRemote">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.UnwatchRemote.#ctor(Akka.Actor.IInternalActorRef,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
            <param name="watcher">TBD</param>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.Heartbeat">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.Heartbeat.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.HeartbeatRsp">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.HeartbeatRsp.#ctor(System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="addressUid">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.HeartbeatRsp.AddressUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.HeartbeatTick">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.HeartbeatTick.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.ReapUnreachableTick">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.ReapUnreachableTick.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.ExpectedFirstHeartbeat">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.ExpectedFirstHeartbeat.#ctor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="from">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.ExpectedFirstHeartbeat.From">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteWatcher.Stats">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.GetHashCode">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="F:Akka.Remote.RemoteWatcher.Stats.Empty">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.Counts(System.Int32,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="watching">TBD</param>
            <param name="watchingNodes">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.#ctor(System.Int32,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="watching">TBD</param>
            <param name="watchingNodes">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.#ctor(System.Int32,System.Int32,System.Collections.Immutable.ImmutableHashSet{System.Tuple{Akka.Actor.IActorRef,Akka.Actor.IActorRef}},System.Collections.Immutable.ImmutableHashSet{Akka.Actor.Address})">
            <summary>
            TBD
            </summary>
            <param name="watching">TBD</param>
            <param name="watchingNodes">TBD</param>
            <param name="watchingRefs">TBD</param>
            <param name="watchingAddresses">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.Stats.Watching">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.Stats.WatchingNodes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.Stats.WatchingRefs">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.Stats.WatchingAddresses">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Stats.Copy(System.Int32,System.Int32,System.Collections.Immutable.ImmutableHashSet{System.Tuple{Akka.Actor.IActorRef,Akka.Actor.IActorRef}},System.Collections.Immutable.ImmutableHashSet{Akka.Actor.Address})">
            <summary>
            TBD
            </summary>
            <param name="watching">TBD</param>
            <param name="watchingNodes">TBD</param>
            <param name="watchingRefs">TBD</param>
            <param name="watchingAddresses">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.#ctor(Akka.Remote.IFailureDetectorRegistry{Akka.Actor.Address},System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="failureDetector">TBD</param>
            <param name="heartbeatInterval">TBD</param>
            <param name="unreachableReaperInterval">TBD</param>
            <param name="heartbeatExpectedResponseAfter">TBD</param>
            <exception cref="T:Akka.Configuration.ConfigurationException">TBD</exception>
        </member>
        <member name="F:Akka.Remote.RemoteWatcher.Watching">
            <summary>
             Actors that this node is watching, map of watchee --> Set(watchers)
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteWatcher.WatcheeByNodes">
            <summary>
            Nodes that this node is watching, i.e. expecting heartbeats from these nodes. Map of address --> Set(watchee) on this address.
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.WatchingNodes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteWatcher.Unreachable">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.OnReceive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.PublishAddressTerminated(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.Quarantine(Akka.Actor.Address,System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="addressUid">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.AddWatching(Akka.Actor.IInternalActorRef,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
            <param name="watcher">TBD</param>
            <exception cref="T:System.InvalidOperationException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.WatchNode(Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.RemoveWatch(Akka.Actor.IInternalActorRef,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
            <param name="watcher">TBD</param>
            <exception cref="T:System.InvalidOperationException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.RemoveWatchee(Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="watchee">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.UnwatchNode(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="watcheeAddress">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteWatcher.ReWatch(Akka.Actor.Address)">
            <summary>
            To ensure that we receive heartbeat messages from the right actor system
            incarnation we send Watch again for the first HeartbeatRsp (containing
            the system UID) and if HeartbeatRsp contains a new system UID.
            Terminated will be triggered if the watchee (including correct Actor UID)
            does not exist.
            </summary>
            <param name="address"></param>
        </member>
        <member name="F:Akka.Remote.RemoteWatcher.Log">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.AddressUrlEncoder">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.AddressUrlEncoder.Encode(Akka.Actor.Address)">
            <summary>
            URL-encodes an actor <see cref="T:Akka.Actor.Address"/>. Used when generating the names
            of some system remote actors.
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RARP">
            <summary>
            INTERNAL API
            
            (used for forcing all /system level remoting actors onto a dedicated dispatcher)
            </summary>
        </member>
        <member name="M:Akka.Remote.RARP.#ctor">
            <summary>
            Used as part of the <see cref="T:Akka.Actor.ExtensionIdProvider`1"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.RARP.ConfigureDispatcher(Akka.Actor.Props)">
            <summary>
            TBD
            </summary>
            <param name="props">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RARP.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Remote.RARP.Provider">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RARP.For(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.IPriorityMessage">
            <summary>
            INTERNAL API
            Messages marked with this interface will be sent before other messages when buffering is active.
            This means that these messages don't obey normal message ordering.
            It is used for failure detector heartbeat messages.
            </summary>
        </member>
        <member name="T:Akka.Remote.Remoting">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.Remoting.#ctor(Akka.Actor.ExtendedActorSystem,Akka.Remote.RemoteActorRefProvider)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="provider">TBD</param>
        </member>
        <member name="P:Akka.Remote.Remoting.Addresses">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Remoting.DefaultAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Remoting.Start">
            <summary>
            Start assumes that it cannot be followed by another Start() without having a Shutdown() first
            </summary>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when no transports are enabled under the "akka.remote.enabled-transports" configuration setting.
            </exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">
            This exception is thrown when startup is canceled due to a timeout.
            </exception>
            <exception cref="T:System.TimeoutException">
            This exception is thrown when startup times out.
            </exception>
            <exception cref="T:System.Exception">
            This exception is thrown when a general error occurs during startup.
            </exception>
        </member>
        <member name="M:Akka.Remote.Remoting.Shutdown">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Remoting.Send(System.Object,Akka.Actor.IActorRef,Akka.Remote.RemoteActorRef)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <param name="sender">TBD</param>
            <param name="recipient">TBD</param>
            <exception cref="T:Akka.Remote.RemoteTransportException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.Remoting.ManagementCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="cmd">TBD</param>
            <exception cref="T:Akka.Remote.RemoteTransportException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Remoting.LocalAddressForRemote(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="remote">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Remoting.Quarantine(Akka.Actor.Address,System.Nullable{System.Int32})">
            <summary>
            Marks a remote system as out of sync and prevents reconnects until the quarantine timeout elapses.
            </summary>
            <param name="address">The address of the remote system to be quarantined</param>
            <param name="uid">The UID of the remote system; if the uid is not defined it will not be a strong quarantine but the current
            endpoint writer will be stopped (dropping system messages) and the address will be gated.</param>
            <exception cref="T:Akka.Remote.RemoteTransportException">
            This exception is thrown when trying to quarantine a system but remoting is not running.
            </exception>
        </member>
        <member name="F:Akka.Remote.Remoting.EndpointManagerName">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Remoting.LocalAddressForRemote(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.HashSet{Akka.Remote.Transport.ProtocolTransportAddressPair}},Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="transportMapping">TBD</param>
            <param name="remote">TBD</param>
            <exception cref="T:Akka.Remote.RemoteTransportException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RegisterTransportActor">
            <summary>
            Message type used to provide both <see cref="P:Akka.Remote.RegisterTransportActor.Props"/> and a name for a new transport actor
            </summary>
        </member>
        <member name="M:Akka.Remote.RegisterTransportActor.#ctor(Akka.Actor.Props,System.String)">
            <summary>
            TBD
            </summary>
            <param name="props">TBD</param>
            <param name="name">TBD</param>
        </member>
        <member name="P:Akka.Remote.RegisterTransportActor.Props">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RegisterTransportActor.Name">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.TransportSupervisor">
            <summary>
            Actor responsible for supervising the creation of all transport actors
            </summary>
        </member>
        <member name="M:Akka.Remote.TransportSupervisor.SupervisorStrategy">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.TransportSupervisor.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemotingLifecycleEvent">
            <summary>
            Remote lifecycle events that are published to the <see cref="T:Akka.Event.EventStream"/> when
            initialization / connect / disconnect events that occur during network operations
            </summary>
        </member>
        <member name="M:Akka.Remote.RemotingLifecycleEvent.LogLevel">
            <summary>
                Logs the level.
            </summary>
            <returns>LogLevel.</returns>
        </member>
        <member name="T:Akka.Remote.AssociationEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociationEvent.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociationEvent.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociationEvent.IsInbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.AssociationEvent.EventName">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AssociationEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.AssociatedEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AssociatedEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Remote.AssociatedEvent.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociatedEvent.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociatedEvent.IsInbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AssociatedEvent.#ctor(Akka.Actor.Address,Akka.Actor.Address,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="inbound">TBD</param>
        </member>
        <member name="T:Akka.Remote.DisassociatedEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.DisassociatedEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Remote.DisassociatedEvent.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.DisassociatedEvent.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.DisassociatedEvent.IsInbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.DisassociatedEvent.#ctor(Akka.Actor.Address,Akka.Actor.Address,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="inbound">TBD</param>
        </member>
        <member name="T:Akka.Remote.AssociationErrorEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AssociationErrorEvent.#ctor(System.Exception,Akka.Actor.Address,Akka.Actor.Address,System.Boolean,Akka.Event.LogLevel)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="inbound">TBD</param>
            <param name="level">TBD</param>
        </member>
        <member name="P:Akka.Remote.AssociationErrorEvent.Cause">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AssociationErrorEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Remote.AssociationErrorEvent.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociationErrorEvent.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.AssociationErrorEvent.IsInbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.AssociationErrorEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RemotingListenEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemotingListenEvent.#ctor(System.Collections.Generic.IList{Akka.Actor.Address})">
            <summary>
            TBD
            </summary>
            <param name="listenAddresses">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemotingListenEvent.ListenAddresses">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemotingListenEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemotingListenEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RemotingShutdownEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemotingShutdownEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemotingShutdownEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.RemotingErrorEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemotingErrorEvent.#ctor(System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemotingErrorEvent.Cause">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemotingErrorEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemotingErrorEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.QuarantinedEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.QuarantinedEvent.#ctor(Akka.Actor.Address,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="uid">TBD</param>
        </member>
        <member name="P:Akka.Remote.QuarantinedEvent.Address">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.QuarantinedEvent.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.QuarantinedEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.QuarantinedEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.ThisActorSystemQuarantinedEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ThisActorSystemQuarantinedEvent.#ctor(Akka.Actor.Address,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.ThisActorSystemQuarantinedEvent.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.ThisActorSystemQuarantinedEvent.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.ThisActorSystemQuarantinedEvent.LogLevel">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.ThisActorSystemQuarantinedEvent.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.EventPublisher">
            <summary>
            INTERNAL API.
            
            Used for publishing remote lifecycle events to the <see cref="T:Akka.Event.EventStream"/> of the provided <see cref="T:Akka.Actor.ActorSystem"/>.
            </summary>
        </member>
        <member name="P:Akka.Remote.EventPublisher.System">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.EventPublisher.Log">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.EventPublisher.LogLevel">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.EventPublisher.#ctor(Akka.Actor.ActorSystem,Akka.Event.ILoggingAdapter,Akka.Event.LogLevel)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="log">TBD</param>
            <param name="logLevel">TBD</param>
        </member>
        <member name="M:Akka.Remote.EventPublisher.NotifyListeners(Akka.Remote.RemotingLifecycleEvent)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Remote.Routing.RemoteRouterConfig">
            <summary>
            <see cref="T:Akka.Routing.RouterConfig"/> implementation for remote deployment of 
            routees on defined target nodes. Delegates other duties to the local <see cref="T:Akka.Routing.Pool"/>,
            which makes it possible to mix this with built-in routers such as <see cref="T:Akka.Routing.RoundRobinGroup"/> or custom routers.
            </summary>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.#ctor(Akka.Routing.Pool,System.Collections.Generic.IEnumerable{Akka.Actor.Address})">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Routing.RemoteRouterConfig"/> class.
            </summary>
            <param name="local">TBD</param>
            <param name="nodes">TBD</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the enumeration of specified nodes is empty.
            </exception>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.Local">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.Nodes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.CreateRouter(Akka.Actor.ActorSystem)">
            <summary>
            Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
            </summary>
            <param name="system">The ActorSystem this router belongs to.</param>
            <returns>The newly created router tied to the given system.</returns>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.GetNrOfInstances(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.NewRoutee(Akka.Actor.Props,Akka.Actor.IActorContext)">
            <summary>
            TBD
            </summary>
            <param name="routeeProps">TBD</param>
            <param name="context">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.CreateRouterActor">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.SupervisorStrategy">
            <summary>
            Retrieve the strategy to use when supervising the pool.
            </summary>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.RouterDispatcher">
            <summary>
            Dispatcher ID to use for running the “head” actor, which handles supervision, death watch and router management messages.
            </summary>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.Resizer">
            <summary>
            Retrieve the resizer to use when dynamically allocating routees to the pool.
            </summary>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.WithFallback(Akka.Routing.RouterConfig)">
            <summary>
            Configures the current router with an auxiliary router for routes that it does not know how to handle.
            </summary>
            <param name="routerConfig">The router to use as an auxiliary source.</param>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when the specified router is another <see cref="T:Akka.Remote.Routing.RemoteRouterConfig"/>.
            This configuration is not allowed.
            </exception>
            <returns>The router configured with the auxiliary information.</returns>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.Equals(Akka.Routing.RouterConfig)">
            <summary>
            Determines whether the specified router, is equal to this instance.
            </summary>
            <param name="other">The group to compare.</param>
            <returns><c>true</c> if the specified router is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.ToSurrogate(Akka.Actor.ActorSystem)">
            <summary>
            Creates a surrogate representation of the current router.
            </summary>
            <param name="system">The actor system that owns this router.</param>
            <returns>The surrogate representation of the current router.</returns>
        </member>
        <member name="T:Akka.Remote.Routing.RemoteRouterConfig.RemoteRouterConfigSurrogate">
            <summary>
            This class represents a surrogate of a <see cref="T:Akka.Remote.Routing.RemoteRouterConfig"/> router.
            Its main use is to help during the serialization process.
            </summary>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.RemoteRouterConfigSurrogate.Local">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Routing.RemoteRouterConfig.RemoteRouterConfigSurrogate.Nodes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Routing.RemoteRouterConfig.RemoteRouterConfigSurrogate.FromSurrogate(Akka.Actor.ActorSystem)">
            <summary>
            Creates a <see cref="T:Akka.Remote.Routing.RemoteRouterConfig"/> encapsulated by this surrogate.
            </summary>
            <param name="system">The actor system that owns this router.</param>
            <returns>The <see cref="T:Akka.Remote.Routing.RemoteRouterConfig"/> encapsulated by this surrogate.</returns>
        </member>
        <member name="T:Akka.Remote.Serialization.DaemonMsgCreateSerializer">
            <summary>
            This is a special <see cref="T:Akka.Serialization.Serializer"/> that serializes and deserializes <see cref="T:Akka.Remote.DaemonMsgCreate"/> only.
            Serialization of contained <see cref="T:Akka.Routing.RouterConfig"/>, <see cref="T:Akka.Configuration.Config"/>, and <see cref="T:Akka.Actor.Scope"/> is done with the
            configured serializer for those classes.
            </summary>
        </member>
        <member name="M:Akka.Remote.Serialization.DaemonMsgCreateSerializer.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Serialization.DaemonMsgCreateSerializer"/> class.
            </summary>
            <param name="system">The actor system to associate with this serializer. </param>
        </member>
        <member name="P:Akka.Remote.Serialization.DaemonMsgCreateSerializer.Identifier">
            <summary>
            Completely unique value to identify this implementation of Serializer, used to optimize network traffic
            Values from 0 to 16 is reserved for Akka internal usage
            </summary>
        </member>
        <member name="P:Akka.Remote.Serialization.DaemonMsgCreateSerializer.IncludeManifest">
            <summary>
            Returns whether this serializer needs a manifest in the fromBinary method
            </summary>
        </member>
        <member name="M:Akka.Remote.Serialization.DaemonMsgCreateSerializer.ToBinary(System.Object)">
            <summary>
            Serializes the given object into a byte array
            </summary>
            <param name="obj">The object to serialize </param>
            <returns>A byte array containing the serialized object</returns>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the specified <paramref name="obj" /> is not of type <see cref="T:Akka.Remote.DaemonMsgCreate"/>.
            </exception>
        </member>
        <member name="M:Akka.Remote.Serialization.DaemonMsgCreateSerializer.FromBinary(System.Byte[],System.Type)">
            <summary>
            Deserializes a byte array into an object of type <paramref name="type"/>.
            </summary>
            <param name="bytes">The array containing the serialized object</param>
            <param name="type">The type of object contained in the array</param>
            <returns>The object contained in the array</returns>
            <exception cref="T:System.TypeLoadException">
            This exception is thrown when the type could not be found on the remote system.
            </exception>
        </member>
        <member name="T:Akka.Remote.Serialization.MessageContainerSerializer">
            <summary>
            This is a special <see cref="T:Akka.Serialization.Serializer"/> that serializes and deserializes <see cref="T:Akka.Actor.ActorSelectionMessage"/> only.
            </summary>
        </member>
        <member name="M:Akka.Remote.Serialization.MessageContainerSerializer.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Serialization.MessageContainerSerializer"/> class.
            </summary>
            <param name="system">The actor system to associate with this serializer. </param>
        </member>
        <member name="P:Akka.Remote.Serialization.MessageContainerSerializer.Identifier">
            <summary>
            Completely unique value to identify this implementation of Serializer, used to optimize network traffic
            Values from 0 to 16 is reserved for Akka internal usage
            </summary>
        </member>
        <member name="P:Akka.Remote.Serialization.MessageContainerSerializer.IncludeManifest">
            <summary>
            Returns whether this serializer needs a manifest in the fromBinary method
            </summary>
        </member>
        <member name="M:Akka.Remote.Serialization.MessageContainerSerializer.ToBinary(System.Object)">
            <summary>
            Serializes the given object into a byte array
            </summary>
            <param name="obj">The object to serialize </param>
            <returns>A byte array containing the serialized object</returns>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the specified <paramref name="obj"/> is not of type <see cref="T:Akka.Actor.ActorSelectionMessage"/>.
            </exception>
        </member>
        <member name="M:Akka.Remote.Serialization.MessageContainerSerializer.FromBinary(System.Byte[],System.Type)">
            <summary>
            Deserializes a byte array into an object of type <paramref name="type"/>.
            </summary>
            <param name="bytes">The array containing the serialized object</param>
            <param name="type">The type of object contained in the array</param>
            <returns>The object contained in the array</returns>
            <exception cref="T:System.NotSupportedException">
            This exception is thrown if the <see cref="T:Akka.Remote.Proto.SelectionEnvelope"/>, contained within the specified byte array
            <paramref name="bytes"/>, contains an unknown <see cref="T:Akka.Remote.Proto.PatternType"/>.
            </exception>
        </member>
        <member name="T:Akka.Remote.Serialization.ProtobufSerializer">
            <summary>
            This is a special <see cref="T:Akka.Serialization.Serializer"/> that serializes and deserializes Google protobuf messages only.
            </summary>
        </member>
        <member name="M:Akka.Remote.Serialization.ProtobufSerializer.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Serialization.ProtobufSerializer"/> class.
            </summary>
            <param name="system">The actor system to associate with this serializer. </param>
        </member>
        <member name="P:Akka.Remote.Serialization.ProtobufSerializer.Identifier">
            <summary>
            Completely unique value to identify this implementation of Serializer, used to optimize network traffic
            Values from 0 to 16 is reserved for Akka internal usage
            </summary>
        </member>
        <member name="P:Akka.Remote.Serialization.ProtobufSerializer.IncludeManifest">
            <summary>
            Returns whether this serializer needs a manifest in the fromBinary method
            </summary>
        </member>
        <member name="M:Akka.Remote.Serialization.ProtobufSerializer.ToBinary(System.Object)">
            <summary>
            N/A
            </summary>
            <param name="obj">N/A</param>
            <exception cref="T:System.NotImplementedException">
            This exception is automatically thrown since <see cref="T:Akka.Remote.Serialization.ProtobufSerializer"/> does not implement this function.
            </exception>
            <returns>N/A</returns>
        </member>
        <member name="M:Akka.Remote.Serialization.ProtobufSerializer.FromBinary(System.Byte[],System.Type)">
            <summary>
            N/A
            </summary>
            <param name="bytes">N/A</param>
            <param name="type">N/A</param>
            <exception cref="T:System.NotImplementedException">
            This exception is automatically thrown since <see cref="T:Akka.Remote.Serialization.ProtobufSerializer"/> does not implement this function.
            </exception>
            <returns>N/A</returns>
        </member>
        <member name="T:Akka.Remote.RemoteActorRefProvider">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.#ctor(System.String,Akka.Actor.Settings,Akka.Event.EventStream)">
            <summary>
            TBD
            </summary>
            <param name="systemName">TBD</param>
            <param name="settings">TBD</param>
            <param name="eventStream">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.RemoteDaemon">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Transport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.RemoteSettings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.RootPath">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.RootGuardian">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Guardian">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.SystemGuardian">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.TempContainer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.DeadLetters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Deployer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.DefaultAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Settings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.TerminationTask">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.TempPath">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.RegisterTempActor(Akka.Actor.IInternalActorRef,Akka.Actor.ActorPath)">
            <summary>
            TBD
            </summary>
            <param name="actorRef">TBD</param>
            <param name="path">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.UnregisterTempActor(Akka.Actor.ActorPath)">
            <summary>
            TBD
            </summary>
            <param name="path">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.RemoteWatcher">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.Init(Akka.Actor.Internal.ActorSystemImpl)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.CreateRemoteWatcher(Akka.Actor.Internal.ActorSystemImpl)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.CreateRemoteDeploymentWatcher(Akka.Actor.Internal.ActorSystemImpl)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.CreateRemoteWatcherFailureDetector(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.ActorOf(Akka.Actor.Internal.ActorSystemImpl,Akka.Actor.Props,Akka.Actor.IInternalActorRef,Akka.Actor.ActorPath,System.Boolean,Akka.Actor.Deploy,System.Boolean,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="props">TBD</param>
            <param name="supervisor">TBD</param>
            <param name="path">TBD</param>
            <param name="systemService">TBD</param>
            <param name="deploy">TBD</param>
            <param name="lookupDeploy">TBD</param>
            <param name="async">TBD</param>
            <exception cref="T:Akka.Actor.ActorInitializationException">
            This exception is thrown when the remote deployment to the specified <paramref name="path"/> fails.
            </exception>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when either the scope of the deployment is local
            or the specified <paramref name="props"/> is invalid for deployment to the specified <paramref name="path"/>.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.LookUpRemotes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Looks up local overrides for remote deployments
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.RootGuardianAt(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.ResolveActorRefWithLocalAddress(System.String,Akka.Actor.Address)">
            <summary>
            INTERNAL API.
            
            Called in deserialization of incoming remote messages where the correct local address is known.
            </summary>
            <param name="path">TBD</param>
            <param name="localAddress">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.ResolveActorRef(System.String)">
            <summary>
            TBD
            </summary>
            <param name="path">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.ResolveActorRef(Akka.Actor.ActorPath)">
            <summary>
            TBD
            </summary>
            <param name="actorPath">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.GetExternalAddressFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.UseActorOnNode(Akka.Remote.RemoteActorRef,Akka.Actor.Props,Akka.Actor.Deploy,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="actor">TBD</param>
            <param name="props">TBD</param>
            <param name="deploy">TBD</param>
            <param name="supervisor">TBD</param>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.Quarantine(Akka.Actor.Address,System.Nullable{System.Int32})">
            <summary>
            Marks a remote system as out of sync and prevents reconnects until the quarantine timeout elapses.
            </summary>
            <param name="address">Address of the remote system to be quarantined</param>
            <param name="uid">UID of the remote system, if the uid is not defined it will not be a strong quarantine but
            the current endpoint writer will be stopped (dropping system messages) and the address will be gated
            </param>
        </member>
        <member name="T:Akka.Remote.RemoteActorRefProvider.Internals">
            <summary>
            All of the private internals used by <see cref="T:Akka.Remote.RemoteActorRefProvider"/>, namely its transport
            registry, remote serializers, and the <see cref="P:Akka.Remote.RemoteActorRefProvider.Internals.RemoteDaemon"/> instance.
            </summary>
        </member>
        <member name="M:Akka.Remote.RemoteActorRefProvider.Internals.#ctor(Akka.Remote.RemoteTransport,Akka.Serialization.Serialization,Akka.Actor.IInternalActorRef)">
            <summary>
            TBD
            </summary>
            <param name="transport">TBD</param>
            <param name="serialization">TBD</param>
            <param name="remoteDaemon">TBD</param>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Internals.Transport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Internals.Serialization">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.RemoteActorRefProvider.Internals.RemoteDaemon">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteActorRefProvider.TerminatorState">
            <summary>
            Describes the FSM states of the <see cref="T:Akka.Remote.RemoteActorRefProvider.RemotingTerminator"/>
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRefProvider.TerminatorState.Uninitialized">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRefProvider.TerminatorState.Idle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRefProvider.TerminatorState.WaitDaemonShutdown">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRefProvider.TerminatorState.WaitTransportShutdown">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.RemoteActorRefProvider.TerminatorState.Finished">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.RemoteActorRefProvider.RemotingTerminator">
            <summary>
            Responsible for shutting down the <see cref="P:Akka.Remote.RemoteActorRefProvider.RemoteDaemon"/> and all transports
            when the <see cref="T:Akka.Actor.ActorSystem"/> is being shutdown.
            </summary>
        </member>
        <member name="T:Akka.Remote.IpExtensions">
            <summary>
            Used primarily for Mono support for IP type mapping
            
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.IpExtensions.GetInstanceField(System.Type,System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="type">TBD</param>
            <param name="instance">TBD</param>
            <param name="fieldName">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.IpExtensions.MapToIPv4(System.Net.IPAddress)">
            <summary>
            TBD
            </summary>
            <param name="ipa">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.IpExtensions.MapToIPv6(System.Net.IPAddress)">
            <summary>
            TBD
            </summary>
            <param name="ipa">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.PduCodecException">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.PduCodecException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.PduCodecException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Remote.Transport.PduCodecException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.PduCodecException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.Transport.IAkkaPdu">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.Associate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Associate.#ctor(Akka.Remote.Transport.HandshakeInfo)">
            <summary>
            TBD
            </summary>
            <param name="info">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.Associate.Info">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.Disassociate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Disassociate.#ctor(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.Disassociate.Reason">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.Heartbeat">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Payload.#ctor(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="bytes">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.Payload.Bytes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Message.#ctor(Akka.Actor.IInternalActorRef,Akka.Actor.Address,Akka.Remote.Proto.SerializedMessage,Akka.Actor.IActorRef,Akka.Remote.SeqNo)">
            <summary>
            TBD
            </summary>
            <param name="recipient">TBD</param>
            <param name="recipientAddress">TBD</param>
            <param name="serializedMessage">TBD</param>
            <param name="senderOptional">TBD</param>
            <param name="seq">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.Message.Recipient">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Message.RecipientAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Message.SerializedMessage">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Message.SenderOptional">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Message.ReliableDeliveryEnabled">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Message.Seq">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AckAndMessage">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AckAndMessage.#ctor(Akka.Remote.Ack,Akka.Remote.Transport.Message)">
            <summary>
            TBD
            </summary>
            <param name="ackOption">TBD</param>
            <param name="messageOption">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AckAndMessage.AckOption">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AckAndMessage.MessageOption">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AkkaPduCodec">
            <summary>
            INTERNAL API
            
            A codec that is able to convert Akka PDUs from and to <see cref="T:Google.ProtocolBuffers.ByteString"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.DecodePdu(Google.ProtocolBuffers.ByteString)">
            <summary>
            Return an <see cref="T:Akka.Remote.Transport.IAkkaPdu"/> instance that represents a PDU contained in the raw
            <see cref="T:Google.ProtocolBuffers.ByteString"/>.
            </summary>
            <param name="raw">Encoded raw byte representation of an Akka PDU</param>
            <returns>Class representation of a PDU that can be used in a <see cref="T:Akka.PatternMatch"/>.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.EncodePdu(Akka.Remote.Transport.IAkkaPdu)">
            <summary>
            Takes an <see cref="T:Akka.Remote.Transport.IAkkaPdu"/> representation of an Akka PDU and returns its encoded form
            as a <see cref="T:Google.ProtocolBuffers.ByteString"/>.
            </summary>
            <param name="pdu">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.ConstructPayload(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.ConstructAssociate(Akka.Remote.Transport.HandshakeInfo)">
            <summary>
            TBD
            </summary>
            <param name="info">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.ConstructDisassociate(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.ConstructHeartbeat">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.DecodeMessage(Google.ProtocolBuffers.ByteString,Akka.Remote.RemoteActorRefProvider,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="raw">TBD</param>
            <param name="provider">TBD</param>
            <param name="localAddress">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.ConstructMessage(Akka.Actor.Address,Akka.Actor.IActorRef,Akka.Remote.Proto.SerializedMessage,Akka.Actor.IActorRef,Akka.Remote.SeqNo,Akka.Remote.Ack)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="recipient">TBD</param>
            <param name="serializedMessage">TBD</param>
            <param name="senderOption">TBD</param>
            <param name="seqOption">TBD</param>
            <param name="ackOption">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduCodec.ConstructPureAck(Akka.Remote.Ack)">
            <summary>
            TBD
            </summary>
            <param name="ack">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.AkkaPduProtobuffCodec">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.DecodePdu(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="raw">TBD</param>
            <exception cref="T:Akka.Remote.Transport.PduCodecException">
            This exception is thrown when the Akka PDU in the specified byte string,
            <paramref name="raw" />, mets one of the following conditions:
            <ul>
            <li>The PDU is neither a message or a control message.</li>
            <li>The PDU is a control message with an invalid format. </li>
            </ul>
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.ConstructPayload(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.ConstructAssociate(Akka.Remote.Transport.HandshakeInfo)">
            <summary>
            TBD
            </summary>
            <param name="info">TBD</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the specified <paramref name="info"/> contains an invalid address.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.ConstructDisassociate(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.ConstructHeartbeat">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.DecodeMessage(Google.ProtocolBuffers.ByteString,Akka.Remote.RemoteActorRefProvider,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="raw">TBD</param>
            <param name="provider">TBD</param>
            <param name="localAddress">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.ConstructMessage(Akka.Actor.Address,Akka.Actor.IActorRef,Akka.Remote.Proto.SerializedMessage,Akka.Actor.IActorRef,Akka.Remote.SeqNo,Akka.Remote.Ack)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="recipient">TBD</param>
            <param name="serializedMessage">TBD</param>
            <param name="senderOption">TBD</param>
            <param name="seqOption">TBD</param>
            <param name="ackOption">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaPduProtobuffCodec.ConstructPureAck(Akka.Remote.Ack)">
            <summary>
            TBD
            </summary>
            <param name="ack">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.TransportMode">
            <summary>
            Transport mode used by underlying socket channel. 
            Currently only TCP is supported.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.EnableSsl">
            <summary>
            If set to true, a Secure Socket Layer will be established
            between remote endpoints. They need to share a X509 certificate
            which path is specified in `akka.remote.dot-netty.tcp.ssl.certificate.path`
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.ConnectTimeout">
            <summary>
            Sets a connection timeout for all outbound connections 
            i.e. how long a connect may take until it is timed out.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.Hostname">
            <summary>
            The hostname or IP to bind the remoting to.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.PublicHostname">
            <summary>
            If this value is set, this becomes the public address for the actor system on this
            transport, which might be different than the physical ip address (hostname)
            this is designed to make it easy to support private / public addressing schemes
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.Port">
            <summary>
            The default remote server port clients should connect to.
            Default is 2552 (AKKA), use 0 if you want a random available port
            This port needs to be unique for each actor system on the same machine.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.DnsUseIpv6">
            <summary>
            If set to true, we will use IPv6 addresses upon DNS resolution for 
            host names. Otherwise IPv4 will be used.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.TcpReuseAddr">
            <summary>
            Enables SO_REUSEADDR, which determines when an ActorSystem can open
            the specified listen port (the meaning differs between *nix and Windows).
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.TcpKeepAlive">
            <summary>
            Enables TCP Keepalive, subject to the O/S kernel's configuration.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.TcpNoDelay">
            <summary>
            Enables the TCP_NODELAY flag, i.e. disables Nagle's algorithm
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.EnforceIpFamily">
            <summary>
            If set to true, we will enforce usage of IPv4 or IPv6 addresses upon DNS 
            resolution for host names. If true, we will use IPv6 enforcement. Otherwise, 
            we will use IPv4.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.Backlog">
            <summary>
            Sets the size of the connection backlog.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.ReceiveBufferSize">
            <summary>
            Sets the default receive buffer size of the Sockets.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.SendBufferSize">
            <summary>
            Sets the default send buffer size of the Sockets.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.BackwardsCompatibilityModeEnabled">
            <summary>
            Enables backwards compatibility with Akka.Remote clients running Helios 1.*
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.LogTransport">
            <summary>
            When set to true, it will enable logging of DotNetty user events 
            and message frames.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.DotNettyTransportSettings.ByteOrder">
            <summary>
            Byte order used by DotNetty, either big or little endian.
            By default a little endian is used to achieve compatibility with Helios.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.SslSettings.Certificate">
            <summary>
            X509 certificate used to establish Secure Socket Layer (SSL) between two remote endpoints.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DotNetty.SslSettings.SuppressValidation">
            <summary>
            Flag used to suppress certificate validation - use true only, when on dev machine or for testing.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.DotNetty.DotNettyTransportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.DotNetty.DotNettyTransportException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Remote.Transport.DotNetty.DotNettyTransportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.DotNetty.DotNettyTransportException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Akka.Remote.Transport.DotNetty.DotNettyTransport.AddressToSocketAddress(Akka.Actor.Address)">
            <summary>
            Maps an Akka.NET address to correlated <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <param name="address">Akka.NET fully qualified node address.</param>
            <exception cref="T:System.ArgumentException">Thrown if address port was not provided.</exception>
            <returns><see cref="T:System.Net.IPEndPoint"/> for IP-based addresses, <see cref="T:System.Net.DnsEndPoint"/> for named addresses.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.DotNetty.TcpHandlers.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="context">TBD</param>
            <param name="exception">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorProvider">
            <summary>
            Provider implementation for creating <see cref="T:Akka.Remote.Transport.FailureInjectorTransportAdapter"/> instances.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorProvider.Create(Akka.Remote.Transport.Transport,Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorException">
            <summary>
            This exception is used to indicate a simulated failure in an association.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.FailureInjectorException"/> class.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.FailureInjectorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorException.Msg">
            <summary>
            Retrieves the message of the simulated failure.
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.FailureInjectorTransportAdapter.FailureInjectorSchemeIdentifier">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter.IFailureInjectorCommand">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter.All">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.All.#ctor(Akka.Remote.Transport.FailureInjectorTransportAdapter.IGremlinMode)">
            <summary>
            TBD
            </summary>
            <param name="mode">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.All.Mode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter.One">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.One.#ctor(Akka.Actor.Address,Akka.Remote.Transport.FailureInjectorTransportAdapter.IGremlinMode)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="mode">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.One.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.One.Mode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter.IGremlinMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter.PassThru">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.PassThru.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorTransportAdapter.Drop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.Drop.#ctor(System.Double,System.Double)">
            <summary>
            TBD
            </summary>
            <param name="outboundDropP">TBD</param>
            <param name="inboundDropP">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.Drop.OutboundDropP">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.Drop.InboundDropP">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.FailureInjectorTransportAdapter.ExtendedActorSystem">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.#ctor(Akka.Remote.Transport.Transport,Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="extendedActorSystem">TBD</param>
        </member>
        <member name="F:Akka.Remote.Transport.FailureInjectorTransportAdapter.MaximumOverhead">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.FailureInjectorTransportAdapter.SchemeAugmenter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.ManagementCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.InterceptListen(Akka.Actor.Address,System.Threading.Tasks.Task{Akka.Remote.Transport.IAssociationEventListener})">
            <summary>
            TBD
            </summary>
            <param name="listenAddress">TBD</param>
            <param name="listenerTask">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.InterceptAssociate(Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="statusPromise">TBD</param>
            <exception cref="T:Akka.Remote.Transport.FailureInjectorException">TBD</exception>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.Notify(Akka.Remote.Transport.IAssociationEvent)">
            <summary>
            TBD
            </summary>
            <param name="ev">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.ShouldDropInbound(Akka.Actor.Address,System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="instance">TBD</param>
            <param name="debugMessage">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorTransportAdapter.ShouldDropOutbound(Akka.Actor.Address,System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="instance">TBD</param>
            <param name="debugMessage">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.FailureInjectorHandle">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorHandle.#ctor(Akka.Remote.Transport.AssociationHandle,Akka.Remote.Transport.FailureInjectorTransportAdapter)">
            <summary>
            TBD
            </summary>
            <param name="wrappedHandle">TBD</param>
            <param name="gremlinAdapter">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorHandle.Write(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorHandle.Disassociate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.FailureInjectorHandle.Notify(Akka.Remote.Transport.IHandleEvent)">
            <summary>
            TBD
            </summary>
            <param name="ev">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerProvider">
            <summary>
            Used to provide throttling controls for remote <see cref="T:Akka.Remote.Transport.Transport"/> instances.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerProvider.Create(Akka.Remote.Transport.Transport,Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottleTransportAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottleTransportAdapter.Scheme">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottleTransportAdapter.UniqueId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottleTransportAdapter.Direction">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottleTransportAdapter.Direction.Send">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottleTransportAdapter.Direction.Receive">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottleTransportAdapter.Direction.Both">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottleTransportAdapter.#ctor(Akka.Remote.Transport.Transport,Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="system">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottleTransportAdapter.SchemeAugmenter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottleTransportAdapter.ManagerName">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottleTransportAdapter.ManagerProps">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottleTransportAdapter.ManagementCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.ForceDisassociate">
            <summary>
            Management command to force disassociation of an address
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ForceDisassociate.#ctor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ForceDisassociate.Address">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ForceDisassociateExplicitly">
            <summary>
            Management command to force disassociation of an address with an explicit error.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ForceDisassociateExplicitly.#ctor(Akka.Actor.Address,Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="reason">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ForceDisassociateExplicitly.Address">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ForceDisassociateExplicitly.Reason">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ForceDisassociateAck">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ForceDisassociateAck.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerManager">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerManager.Checkin">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.Checkin.#ctor(Akka.Actor.Address,Akka.Remote.Transport.ThrottlerHandle)">
            <summary>
            TBD
            </summary>
            <param name="origin">TBD</param>
            <param name="handle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.Checkin.Origin">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.Checkin.ThrottlerHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerManager.AssociateResult">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.AssociateResult.#ctor(Akka.Remote.Transport.AssociationHandle,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle})">
            <summary>
            TBD
            </summary>
            <param name="associationHandle">TBD</param>
            <param name="statusPromise">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.AssociateResult.AssociationHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.AssociateResult.StatusPromise">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerManager.ListenerAndMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.ListenerAndMode.#ctor(Akka.Remote.Transport.IHandleEventListener,Akka.Remote.Transport.ThrottleMode)">
            <summary>
            TBD
            </summary>
            <param name="handleEventListener">TBD</param>
            <param name="mode">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.ListenerAndMode.HandleEventListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.ListenerAndMode.Mode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerManager.Handle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.Handle.#ctor(Akka.Remote.Transport.ThrottlerHandle)">
            <summary>
            TBD
            </summary>
            <param name="throttlerHandle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.Handle.ThrottlerHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerManager.Listener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.Listener.#ctor(Akka.Remote.Transport.IHandleEventListener)">
            <summary>
            TBD
            </summary>
            <param name="handleEventListener">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottlerManager.Listener.HandleEventListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottlerManager.WrappedTransport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.#ctor(Akka.Remote.Transport.Transport)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerManager.Ready(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottleMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottleMode.TryConsumeTokens(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="nanoTimeOfSend">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottleMode.TimeToAvailable(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="currentNanoTime">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.Blackhole">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Blackhole.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Blackhole.TryConsumeTokens(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="nanoTimeOfSend">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.Blackhole.TimeToAvailable(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="currentNanoTime">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.Unthrottled">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Unthrottled.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Unthrottled.TryConsumeTokens(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="nanoTimeOfSend">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.Unthrottled.TimeToAvailable(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="currentNanoTime">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.TokenBucket">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.#ctor(System.Int32,System.Double,System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="capacity">TBD</param>
            <param name="tokensPerSecond">TBD</param>
            <param name="nanoTimeOfLastSend">TBD</param>
            <param name="availableTokens">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.TryConsumeTokens(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="nanoTimeOfSend">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.TimeToAvailable(System.Int64,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="currentNanoTime">TBD</param>
            <param name="tokens">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.op_Equality(Akka.Remote.Transport.TokenBucket,Akka.Remote.Transport.TokenBucket)">
            <summary>
            Compares two specified <see cref="T:Akka.Remote.Transport.TokenBucket"/> for equality.
            </summary>
            <param name="left">The first <see cref="T:Akka.Remote.Transport.TokenBucket"/> used for comparison</param>
            <param name="right">The second <see cref="T:Akka.Remote.Transport.TokenBucket"/> used for comparison</param>
            <returns><c>true</c> if both <see cref="T:Akka.Remote.Transport.TokenBucket">TokenBuckets</see> are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.Transport.TokenBucket.op_Inequality(Akka.Remote.Transport.TokenBucket,Akka.Remote.Transport.TokenBucket)">
            <summary>
            Compares two specified <see cref="T:Akka.Remote.Transport.TokenBucket"/> for inequality.
            </summary>
            <param name="left">The first <see cref="T:Akka.Remote.Transport.TokenBucket"/> used for comparison</param>
            <param name="right">The second <see cref="T:Akka.Remote.Transport.TokenBucket"/> used for comparison</param>
            <returns><c>true</c> if both <see cref="T:Akka.Remote.Transport.TokenBucket">TokenBuckets</see> are not equal; otherwise <c>false</c></returns>
        </member>
        <member name="T:Akka.Remote.Transport.SetThrottle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.SetThrottle.Address">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.SetThrottle.Direction">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.SetThrottle.Mode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.SetThrottle.#ctor(Akka.Actor.Address,Akka.Remote.Transport.ThrottleTransportAdapter.Direction,Akka.Remote.Transport.ThrottleMode)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <param name="direction">TBD</param>
            <param name="mode">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.SetThrottle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.SetThrottle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.SetThrottle.op_Equality(Akka.Remote.Transport.SetThrottle,Akka.Remote.Transport.SetThrottle)">
            <summary>
            Compares two specified <see cref="T:Akka.Remote.Transport.SetThrottle"/> for equality.
            </summary>
            <param name="left">The first <see cref="T:Akka.Remote.Transport.SetThrottle"/> used for comparison</param>
            <param name="right">The second <see cref="T:Akka.Remote.Transport.SetThrottle"/> used for comparison</param>
            <returns><c>true</c> if both <see cref="T:Akka.Remote.Transport.SetThrottle">SetThrottles</see> are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Akka.Remote.Transport.SetThrottle.op_Inequality(Akka.Remote.Transport.SetThrottle,Akka.Remote.Transport.SetThrottle)">
            <summary>
            Compares two specified <see cref="T:Akka.Remote.Transport.SetThrottle"/> for inequality.
            </summary>
            <param name="left">The first <see cref="T:Akka.Remote.Transport.SetThrottle"/> used for comparison</param>
            <param name="right">The second <see cref="T:Akka.Remote.Transport.SetThrottle"/> used for comparison</param>
            <returns><c>true</c> if both <see cref="T:Akka.Remote.Transport.SetThrottle">SetThrottles</see> are not equal; otherwise <c>false</c></returns>
        </member>
        <member name="T:Akka.Remote.Transport.SetThrottleAck">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.SetThrottleAck.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottlerHandle">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottlerHandle.ThrottlerActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottlerHandle.OutboundThrottleMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerHandle.#ctor(Akka.Remote.Transport.AssociationHandle,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="wrappedHandle">TBD</param>
            <param name="throttlerActor">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerHandle.Write(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerHandle.Disassociate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottlerHandle.DisassociateWithFailure(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation">
            <summary>
            INTERNAL API
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation.Dequeue">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState.WaitExposedHandle">
            <summary>
            Waiting for the <see cref="T:Akka.Remote.Transport.ThrottlerHandle"/> coupled with the throttler actor.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState.WaitOrigin">
            <summary>
            Waiting for the ASSOCIATE message that contains the origin address of the remote endpoint
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState.WaitMode">
            <summary>
            After origin is known and a Checkin message is sent to the manager, we must wait for the <see cref="T:Akka.Remote.Transport.ThrottleMode"/>
            for the address
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState.WaitUpstreamListener">
            <summary>
            After all information is known, the throttler must wait for the upstream listener to be able to forward messages
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState.WaitModeAndUpstreamListener">
            <summary>
            Waiting for the tuple containing the upstream listener and the <see cref="T:Akka.Remote.Transport.ThrottleMode"/>
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottlerState.Throttling">
            <summary>
            Fully initialized state
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation.IThrottlerData">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation.Uninitialized">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottledAssociation.Uninitialized.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation.ExposedHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottledAssociation.ExposedHandle.#ctor(Akka.Remote.Transport.ThrottlerHandle)">
            <summary>
            TBD
            </summary>
            <param name="handle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottledAssociation.ExposedHandle.Handle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ThrottledAssociation.FailWith">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottledAssociation.FailWith.#ctor(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="failReason">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ThrottledAssociation.FailWith.FailReason">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.Manager">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.AssociationHandler">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.OriginalHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.Inbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.InboundThrottleMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.ThrottledMessages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.UpstreamListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ThrottledAssociation.Codec">
            <summary>
            Used for decoding certain types of throttled messages on-the-fly
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottledAssociation.#ctor(Akka.Actor.IActorRef,Akka.Remote.Transport.IAssociationEventListener,Akka.Remote.Transport.AssociationHandle,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="manager">TBD</param>
            <param name="associationHandler">TBD</param>
            <param name="originalHandle">TBD</param>
            <param name="inbound">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ThrottledAssociation.PeekOrigin(Google.ProtocolBuffers.ByteString)">
            <summary>
            This method captures ASSOCIATE packets and extracts the origin <see cref="T:Akka.Actor.Address"/>.
            </summary>
            <param name="b">Inbound <see cref="T:Google.ProtocolBuffers.ByteString"/> received from network.</param>
            <returns></returns>
        </member>
        <member name="T:Akka.Remote.Transport.ITransportAdapterProvider">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ITransportAdapterProvider.Create(Akka.Remote.Transport.Transport,Akka.Actor.ExtendedActorSystem)">
            <summary>
            Create a transport adapter that wraps the underlying transport
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.TransportAdaptersExtension">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TransportAdaptersExtension.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TransportAdaptersExtension.For(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.TransportAdapters">
            <summary>
            INTERNAL API
            
            Extension that allows us to look up transport adapters based upon the settings provided inside <see cref="T:Akka.Remote.RemoteSettings"/>
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TransportAdapters.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.TransportAdapters.System">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TransportAdapters.Settings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TransportAdapters.GetAdapterProvider(System.String)">
            <summary>
            TBD
            </summary>
            <param name="name">TBD</param>
            <exception cref="T:System.ArgumentException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.SchemeAugmenter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.SchemeAugmenter.#ctor(System.String)">
            <summary>
            TBD
            </summary>
            <param name="addedSchemeIdentifier">TBD</param>
        </member>
        <member name="F:Akka.Remote.Transport.SchemeAugmenter.AddedSchemeIdentifier">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.SchemeAugmenter.AugmentScheme(System.String)">
            <summary>
            TBD
            </summary>
            <param name="originalScheme">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.SchemeAugmenter.AugmentScheme(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.SchemeAugmenter.RemoveScheme(System.String)">
            <summary>
            TBD
            </summary>
            <param name="scheme">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.SchemeAugmenter.RemoveScheme(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.AbstractTransportAdapter">
            <summary>
            An adapter that wraps a transport and provides interception capabilities
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.#ctor(Akka.Remote.Transport.Transport)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
        </member>
        <member name="F:Akka.Remote.Transport.AbstractTransportAdapter.WrappedTransport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapter.SchemeAugmenter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapter.SchemeIdentifier">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapter.MaximumPayloadBytes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.InterceptListen(Akka.Actor.Address,System.Threading.Tasks.Task{Akka.Remote.Transport.IAssociationEventListener})">
            <summary>
            TBD
            </summary>
            <param name="listenAddress">TBD</param>
            <param name="listenerTask">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.InterceptAssociate(Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="statusPromise">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.IsResponsibleFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="remote">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.Listen">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.Associate(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapter.Shutdown">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.AbstractTransportAdapterHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapterHandle.#ctor(Akka.Remote.Transport.AssociationHandle,System.String)">
            <summary>
            TBD
            </summary>
            <param name="wrappedHandle">TBD</param>
            <param name="addedSchemeIdentifier">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapterHandle.#ctor(Akka.Actor.Address,Akka.Actor.Address,Akka.Remote.Transport.AssociationHandle,System.String)">
            <summary>
            TBD
            </summary>
            <param name="originalLocalAddress">TBD</param>
            <param name="originalRemoteAddress">TBD</param>
            <param name="wrappedHandle">TBD</param>
            <param name="addedSchemeIdentifier">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapterHandle.OriginalLocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapterHandle.OriginalRemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapterHandle.WrappedHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AbstractTransportAdapterHandle.SchemeAugmenter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapterHandle.Equals(Akka.Remote.Transport.AbstractTransportAdapterHandle)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapterHandle.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AbstractTransportAdapterHandle.GetHashCode">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.TransportOperation">
            <summary>
            Marker interface for all transport operations
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TransportOperation.AskTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ListenerRegistered">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ListenerRegistered.#ctor(Akka.Remote.Transport.IAssociationEventListener)">
            <summary>
            TBD
            </summary>
            <param name="listener">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ListenerRegistered.Listener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AssociateUnderlying">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociateUnderlying.#ctor(Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="statusPromise">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateUnderlying.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateUnderlying.StatusPromise">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ListenUnderlying">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ListenUnderlying.#ctor(Akka.Actor.Address,System.Threading.Tasks.Task{Akka.Remote.Transport.IAssociationEventListener})">
            <summary>
            TBD
            </summary>
            <param name="listenAddress">TBD</param>
            <param name="upstreamListener">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ListenUnderlying.ListenAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ListenUnderlying.UpstreamListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.DisassociateUnderlying">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.DisassociateUnderlying.#ctor(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="info">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.DisassociateUnderlying.Info">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ActorTransportAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapter.#ctor(Akka.Remote.Transport.Transport,Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="system">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ActorTransportAdapter.ManagerName">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ActorTransportAdapter.ManagerProps">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorTransportAdapter.AskTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorTransportAdapter.manager">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapter.InterceptListen(Akka.Actor.Address,System.Threading.Tasks.Task{Akka.Remote.Transport.IAssociationEventListener})">
            <summary>
            TBD
            </summary>
            <param name="listenAddress">TBD</param>
            <param name="listenerTask">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapter.InterceptAssociate(Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="statusPromise">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapter.Shutdown">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.ActorTransportAdapterManager">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorTransportAdapterManager.DelayedEvents">
            <summary>
            Lightweight Stash implementation
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorTransportAdapterManager.AssociationListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorTransportAdapterManager.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorTransportAdapterManager.UniqueId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapterManager.NextId">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapterManager.OnReceive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ActorTransportAdapterManager.Ready(System.Object)">
            <summary>
            Method to be implemented for child classes - processes messages once the transport is ready to send / receive
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.ProtocolTransportAddressPair">
            <summary>
            <para>
            This class represents a pairing of an <see cref="T:Akka.Remote.Transport.AkkaProtocolTransport"/> with its <see cref="P:Akka.Remote.Transport.ProtocolTransportAddressPair.Address"/> binding.
            </para>
            <para>
            This is the information that's used to allow external <see cref="T:Akka.Actor.ActorSystem"/> messages to address
            this system over the network.
            </para>
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolTransportAddressPair.#ctor(Akka.Remote.Transport.AkkaProtocolTransport,Akka.Actor.Address)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.ProtocolTransportAddressPair"/> class.
            </summary>
            <param name="protocolTransport">The protocol transport to pair with the specified <paramref name="address"/>.</param>
            <param name="address">The address to pair with the specified <paramref name="protocolTransport"/>.</param>
        </member>
        <member name="P:Akka.Remote.Transport.ProtocolTransportAddressPair.ProtocolTransport">
            <summary>
            The protocol transport part of the pairing.
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ProtocolTransportAddressPair.Address">
            <summary>
            The address part of the pairing.
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AkkaProtocolException">
            <summary>
            This exception is thrown when an error occurred during the Akka protocol handshake.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.AkkaProtocolException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.AkkaProtocolException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.Transport.AkkaProtocolTransport">
            <summary>
            Implementation of the Akka protocol as a (logical) <see cref="T:Akka.Remote.Transport.Transport"/> that wraps an underlying (physical) <see cref="T:Akka.Remote.Transport.Transport"/> instance.
            
            Features provided by this transport include:
             - Soft-state associations via the use of heartbeats and failure detectors
             - Transparent origin address handling
            
            This transport is loaded automatically by <see cref="T:Akka.Remote.Remoting"/> and will wrap all dynamically loaded transports.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolTransport.#ctor(Akka.Remote.Transport.Transport,Akka.Actor.ActorSystem,Akka.Remote.AkkaProtocolSettings,Akka.Remote.Transport.AkkaPduCodec)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="system">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AkkaProtocolTransport.Settings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AkkaProtocolTransport.Codec">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AkkaProtocolTransport.SchemeAugmenter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AkkaProtocolTransport.ManagerName">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AkkaProtocolTransport.ManagerProps">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolTransport.ManagementCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolTransport.Associate(Akka.Actor.Address,System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="refuseUid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="F:Akka.Remote.Transport.AkkaProtocolTransport.UniqueId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AkkaProtocolManager">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolManager.#ctor(Akka.Remote.Transport.Transport,Akka.Remote.AkkaProtocolSettings)">
            <summary>
            TBD
            </summary>
            <param name="wrappedTransport">TBD</param>
            <param name="settings">TBD</param>
        </member>
        <member name="F:Akka.Remote.Transport.AkkaProtocolManager._supervisor">
            <summary>
            The <see cref="T:Akka.Remote.Transport.AkkaProtocolTransport"/> does not handle recovery of associations, this task is implemented
            in the remoting itself. Hence the strategy <see cref="F:Akka.Actor.Directive.Stop"/>.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolManager.SupervisorStrategy">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolManager.Ready(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.AssociateUnderlyingRefuseUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociateUnderlyingRefuseUid.#ctor(Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle},System.Nullable{System.Int32})">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="statusCompletionSource">TBD</param>
            <param name="refuseUid">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateUnderlyingRefuseUid.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateUnderlyingRefuseUid.StatusCompletionSource">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateUnderlyingRefuseUid.RefuseUid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.HandshakeInfo">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.HandshakeInfo.#ctor(Akka.Actor.Address,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="origin">TBD</param>
            <param name="uid">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.HandshakeInfo.Origin">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.HandshakeInfo.Uid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.HandshakeInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.HandshakeInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Akka.Remote.Transport.AkkaProtocolHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.#ctor(Akka.Actor.Address,Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.IHandleEventListener},Akka.Remote.Transport.AssociationHandle,Akka.Remote.Transport.HandshakeInfo,Akka.Actor.IActorRef,Akka.Remote.Transport.AkkaPduCodec)">
            <summary>
            TBD
            </summary>
            <param name="originalLocalAddress">TBD</param>
            <param name="originalRemoteAddress">TBD</param>
            <param name="readHandlerCompletionSource">TBD</param>
            <param name="wrappedHandle">TBD</param>
            <param name="handshakeInfo">TBD</param>
            <param name="stateActor">TBD</param>
            <param name="codec">TBD</param>
        </member>
        <member name="F:Akka.Remote.Transport.AkkaProtocolHandle.HandshakeInfo">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.AkkaProtocolHandle.StateActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.AkkaProtocolHandle.Codec">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.Write(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.Disassociate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.Disassociate(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="info">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.Equals(Akka.Remote.Transport.AkkaProtocolHandle)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Remote.Transport.AkkaProtocolHandle" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Remote.Transport.AkkaProtocolHandle" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Remote.Transport.AkkaProtocolHandle" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.AkkaProtocolHandle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Akka.Remote.Transport.AssociationState">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.AssociationState.Closed">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.AssociationState.WaitHandshake">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.AssociationState.Open">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.HeartbeatTimer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.HandleMsg">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.HandleMsg.#ctor(Akka.Remote.Transport.AssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="handle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.HandleMsg.Handle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.HandleListenerRegistered">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.HandleListenerRegistered.#ctor(Akka.Remote.Transport.IHandleEventListener)">
            <summary>
            TBD
            </summary>
            <param name="listener">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.HandleListenerRegistered.Listener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ProtocolStateData">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.InitialProtocolStateData">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.OutboundUnassociated">
            <summary>
            Neither the underlying nor the provided transport is associated
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.OutboundUnassociated.#ctor(Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle},Akka.Remote.Transport.Transport)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <param name="statusCompletionSource">TBD</param>
            <param name="transport">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.OutboundUnassociated.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.OutboundUnassociated.StatusCompletionSource">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.OutboundUnassociated.Transport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.OutboundUnderlyingAssociated">
            <summary>
            The underlying transport is associated, but the handshake of the Akka protocol is not yet finished
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.OutboundUnderlyingAssociated.#ctor(System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle},Akka.Remote.Transport.AssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="statusCompletionSource">TBD</param>
            <param name="wrappedHandle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.OutboundUnderlyingAssociated.StatusCompletionSource">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.OutboundUnderlyingAssociated.WrappedHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.InboundUnassociated">
            <summary>
            The underlying transport is associated, but the handshake of the akka protocol is not yet finished
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.InboundUnassociated.#ctor(Akka.Remote.Transport.IAssociationEventListener,Akka.Remote.Transport.AssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="associationEventListener">TBD</param>
            <param name="wrappedHandle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.InboundUnassociated.AssociationEventListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.InboundUnassociated.WrappedHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AssociatedWaitHandler">
            <summary>
            The underlying transport is associated, but the handler for the handle has not been provided yet
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociatedWaitHandler.#ctor(System.Threading.Tasks.Task{Akka.Remote.Transport.IHandleEventListener},Akka.Remote.Transport.AssociationHandle,System.Collections.Generic.Queue{Google.ProtocolBuffers.ByteString})">
            <summary>
            TBD
            </summary>
            <param name="handlerListener">TBD</param>
            <param name="wrappedHandle">TBD</param>
            <param name="queue">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AssociatedWaitHandler.HandlerListener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociatedWaitHandler.WrappedHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociatedWaitHandler.Queue">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ListenerReady">
            <summary>
            System ready!
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ListenerReady.#ctor(Akka.Remote.Transport.IHandleEventListener,Akka.Remote.Transport.AssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="listener">TBD</param>
            <param name="wrappedHandle">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ListenerReady.Listener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.ListenerReady.WrappedHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.TimeoutReason">
            <summary>
            Message sent when a <see cref="P:Akka.Remote.FailureDetector.IsAvailable"/> returns false, signaling a transport timeout.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TimeoutReason.#ctor(System.String)">
            <summary>
            TBD
            </summary>
            <param name="errorMessage">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.TimeoutReason.ErrorMessage">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TimeoutReason.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Remote.Transport.ForbiddenUidReason">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ProtocolStateActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.#ctor(Akka.Remote.Transport.HandshakeInfo,Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle},Akka.Remote.Transport.Transport,Akka.Remote.AkkaProtocolSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.FailureDetector,System.Nullable{System.Int32})">
            <summary>
            Constructor for outbound ProtocolStateActors
            </summary>
            <param name="handshakeInfo">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="statusCompletionSource">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="failureDetector">TBD</param>
            <param name="refuseUid">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.#ctor(Akka.Remote.Transport.HandshakeInfo,Akka.Remote.Transport.AssociationHandle,Akka.Remote.Transport.IAssociationEventListener,Akka.Remote.AkkaProtocolSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.FailureDetector)">
            <summary>
            Constructor for inbound ProtocolStateActors
            </summary>
            <param name="handshakeInfo">TBD</param>
            <param name="wrappedHandle">TBD</param>
            <param name="associationEventListener">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="failureDetector">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.#ctor(Akka.Remote.Transport.InitialProtocolStateData,Akka.Remote.Transport.HandshakeInfo,Akka.Remote.AkkaProtocolSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.FailureDetector,System.Nullable{System.Int32})">
            <summary>
            Common constructor used by both the outbound and the inbound cases
            </summary>
            <param name="initialData">TBD</param>
            <param name="localHandshakeInfo">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="failureDetector">TBD</param>
            <param name="refuseUid">TBD</param>
            <exception cref="T:Akka.Remote.Transport.AkkaProtocolException">
            This exception is thrown for a number of reasons that include the following:
            <dl>
              <dt><b>when in the <see cref="F:Akka.Remote.Transport.AssociationState.WaitHandshake"/> state</b></dt>
              <dd>
                <dl>
                  <dt><b>the event is of type <see cref="T:Akka.Remote.Transport.HeartbeatTimer"/></b></dt>
                  <dd>This exception is thrown when there is no response from the remote system causing the timeout.</dd>
                </dl>
              </dd>
              <dt><b>when in the <see cref="F:Akka.Remote.Transport.AssociationState.Open"/> state</b></dt>
              <dd>
                <dl>
                  <dt><b>the event is of type <see cref="T:Akka.Remote.Transport.InboundPayload"/></b></dt>
                  <dd>This exception is thrown when the message type could not be handled.</dd>
                  <dt><b>the event is of type <see cref="T:Akka.Remote.Transport.HeartbeatTimer"/></b></dt>
                  <dd>This exception is thrown when there is no response from the remote system causing the timeout.</dd>
                  <dt><b>the event is of type <see cref="T:Akka.Remote.Transport.DisassociateUnderlying"/></b></dt>
                  <dd>This exception is thrown when the message type could not be handled.</dd>
                </dl>
              </dd>
              <dt><b>when the FSM is terminating <see cref="M:Akka.Actor.FSM`2.OnTermination(System.Action{Akka.Actor.FSMBase.StopEvent{`0,`1}})"/></b></dt>
              <dd>
                <dl>
                  <dt><b>the event is of type <see cref="T:Akka.Remote.Transport.OutboundUnassociated"/></b></dt>
                  <dd>This exception is thrown when the transport disassociated before the handshake finished.</dd>
                  <dt><b>the event is of type <see cref="T:Akka.Remote.Transport.OutboundUnderlyingAssociated" /> with <see cref="P:Akka.Actor.FSMBase.StopEvent`2.Reason"/>
                      being <see cref="T:Akka.Actor.FSMBase.Failure"/></b>
                  </dt>
                  <dd>This exception is thrown when either a timeout occurs, the remote system is shutting down,
                      this system has been quarantined, or the transport disassociated before handshake finished.
                  </dd>
                </dl>
              </dd>
            </dl>
            </exception>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.LogTermination(Akka.Actor.FSMBase.Reason)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.PublishError(Akka.Remote.Transport.UnderlyingTransportError)">
            <summary>
            Publishes a transport error to the message stream
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.OutboundProps(Akka.Remote.Transport.HandshakeInfo,Akka.Actor.Address,System.Threading.Tasks.TaskCompletionSource{Akka.Remote.Transport.AssociationHandle},Akka.Remote.Transport.Transport,Akka.Remote.AkkaProtocolSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.FailureDetector,System.Nullable{System.Int32})">
            <summary>
            <see cref="T:Akka.Actor.Props"/> used when creating OUTBOUND associations to remote endpoints.
            
            These <see cref="T:Akka.Actor.Props"/> create outbound <see cref="T:Akka.Remote.Transport.ProtocolStateActor"/> instances,
            which begin a state of 
            </summary>
            <param name="handshakeInfo">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="statusCompletionSource">TBD</param>
            <param name="transport">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="failureDetector">TBD</param>
            <param name="refuseUid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.ProtocolStateActor.InboundProps(Akka.Remote.Transport.HandshakeInfo,Akka.Remote.Transport.AssociationHandle,Akka.Remote.Transport.IAssociationEventListener,Akka.Remote.AkkaProtocolSettings,Akka.Remote.Transport.AkkaPduCodec,Akka.Remote.FailureDetector)">
            <summary>
            TBD
            </summary>
            <param name="handshakeInfo">TBD</param>
            <param name="wrappedHandle">TBD</param>
            <param name="associationEventListener">TBD</param>
            <param name="settings">TBD</param>
            <param name="codec">TBD</param>
            <param name="failureDetector">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.TestTransport">
            <summary>
                Transport implementation used for testing.
                The TestTransport is basically shared memory between actor systems. It can be programmed to emulate
                different failure modes of a <see cref="T:Akka.Remote.Transport.Transport" /> implementation. TestTransport keeps a log of the activities
                it was requested to do. This class is not optimized for performance and MUST not be used in production systems.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestTransport.AssociateBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestTransport.DisassociateBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestTransport.ListenBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestTransport.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestTransport.ShutdownBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestTransport.WriteBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.#ctor(Akka.Actor.ActorSystem,Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="conf">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.#ctor(Akka.Actor.Address,Akka.Remote.Transport.AssociationRegistry,System.Int64,System.String)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="registry">TBD</param>
            <param name="maximumPayloadBytes">TBD</param>
            <param name="schemeIdentifier">TBD</param>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.IsResponsibleFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="remote">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.Listen">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.DefaultListen">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.Associate(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="remoteAddress">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.Disassociate(Akka.Remote.Transport.TestAssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="handle">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.DefaultDisassociate(Akka.Remote.Transport.TestAssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="handle">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.Shutdown">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestTransport.Write(Akka.Remote.Transport.TestAssociationHandle,Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="handle">TBD</param>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.Activity">
            <summary>
                Base trait for remote activities that are logged by <see cref="T:Akka.Remote.Transport.TestTransport" />
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ListenAttempt">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ListenAttempt.#ctor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="boundAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ListenAttempt.BoundAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.AssociateAttempt">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociateAttempt.#ctor(Akka.Actor.Address,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateAttempt.LocalAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociateAttempt.RemoteAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.ShutdownAttempt">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ShutdownAttempt.#ctor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="boundAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.ShutdownAttempt.BoundAddress">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.WriteAttempt">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.WriteAttempt.#ctor(Akka.Actor.Address,Akka.Actor.Address,Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="sender">TBD</param>
            <param name="recipient">TBD</param>
            <param name="payload">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.WriteAttempt.Sender">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.WriteAttempt.Recipient">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.WriteAttempt.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.DisassociateAttempt">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.DisassociateAttempt.#ctor(Akka.Actor.Address,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="requestor">TBD</param>
            <param name="remote">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.DisassociateAttempt.Requestor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.DisassociateAttempt.Remote">
            <summary>
            TBD
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Akka.Remote.Transport.SwitchableLoggedBehavior`2" -->
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Action{`0})">
            <summary>
            TBD
            </summary>
            <param name="defaultBehavior">TBD</param>
            <param name="logCallback">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.SwitchableLoggedBehavior`2.DefaultBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.SwitchableLoggedBehavior`2.LogCallback">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.SwitchableLoggedBehavior`2.CurrentBehavior">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.Push(System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
                Changes the current behavior to the provided one
            </summary>
            <param name="behavior">
                Function that takes a parameter type <typeparamref name="TIn" /> and returns a Task
                <typeparamref name="TOut" />.
            </param>
        </member>
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.PushConstant(`1)">
            <summary>
                Changes the behavior to return a completed Task with the given constant value.
            </summary>
            <param name="result">The constant the Task will be completed with.</param>
        </member>
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.PushError(System.Exception)">
            <summary>
                Changes the behavior to return a faulted Task with the given exception
            </summary>
            <param name="e">The exception responsible for faulting this task</param>
        </member>
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.PushDelayed">
            <summary>
                Enables control of the completion of the previously active behavior. Wraps the previous behavior in
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.Pop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.SwitchableLoggedBehavior`2.Apply(`0)">
            <summary>
            TBD
            </summary>
            <param name="param">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.AssociationRegistry">
            <summary>
                Shared state among <see cref="T:Akka.Remote.Transport.TestTransport" /> instances. Coordinates the transports and the means of
                communication between them.
            </summary>
            <remarks>
                NOTE: This is a global shared state between different actor systems. The purpose of this class is to allow
                dynamically
                loaded TestTransports to set up a shared AssociationRegistry.Extensions could not be used for this purpose, as the
                injection
                of the shared instance must happen during the startup time of the actor system. Association registries are looked
                up via a string key. Until we find a better way to inject an AssociationRegistry to multiple actor systems it is
                strongly recommended to use long, randomly generated strings to key the registry to avoid interference between
                tests.
            </remarks>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.Get(System.String)">
            <summary>
            Retrieves the specified <see cref="T:Akka.Remote.Transport.AssociationRegistry"/> associated with the <paramref name="key"/>.
            </summary>
            <param name="key">The registry key - see the HOCON example for details.</param>
            <returns>An existing or new <see cref="T:Akka.Remote.Transport.AssociationRegistry"/> instance.</returns>
            <code>
                akka{
                    remote{
                        enabled-transports = ["akka.remote.test"]
                        test{
                            registry-key = "SOME KEY"
                        }
                    }
                }
            </code>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.Clear">
            <summary>
            Wipes out all of the <see cref="T:Akka.Remote.Transport.AssociationRegistry"/> instances retained by this process.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.RemoteListenerRelativeTo(Akka.Remote.Transport.TestAssociationHandle,System.Tuple{Akka.Remote.Transport.IHandleEventListener,Akka.Remote.Transport.IHandleEventListener})">
            <summary>
                Returns the remote endpoint for a pair of endpoints relative to the owner of the supplied
                <see cref="T:Akka.Remote.Transport.TestAssociationHandle" />.
            </summary>
            <param name="handle">The reference handle to determine the remote endpoint relative to</param>
            <param name="listenerPair">pair of listeners in initiator, receiver order</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.LogActivity(Akka.Remote.Transport.Activity)">
            <summary>
                Logs a transport activity
            </summary>
            <param name="activity">The activity to be logged</param>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.LogSnapshot">
            <summary>
                Gets a snapshot of the current transport activity log
            </summary>
            <returns>A IList of activities ordered left-to-right in chronological order (element[0] is the oldest)</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.ClearLog">
            <summary>
                Clears the current contents of the log
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.RegisterTransport(Akka.Remote.Transport.TestTransport,System.Threading.Tasks.Task{Akka.Remote.Transport.IAssociationEventListener})">
            <summary>
                Records a mapping between an address and the corresponding (transport, associationEventListener) pair.
            </summary>
            <param name="transport">The transport that is to be registered. The address of this transport will be used as a key.</param>
            <param name="associationEventListenerTask">
                The Task that will be completed with the listener that will handle the
                events for the given transport.
            </param>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.TransportsReady(Akka.Actor.Address[])">
            <summary>
                Indicates if all given transports were successfully registered. No associations can be established between
                transports that are not yet registered.
            </summary>
            <param name="addresses">The listen addresses of transports that participate in the test case.</param>
            <returns>True if all transports are successfully registered.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.RegisterListenerPair(System.Tuple{Akka.Actor.Address,Akka.Actor.Address},System.Tuple{Akka.Remote.Transport.IHandleEventListener,Akka.Remote.Transport.IHandleEventListener})">
            <summary>
                Registers two event listeners corresponding to the two endpoints of an association.
            </summary>
            <param name="key">
                Ordered pair of addresses representing an association. First element must be the address of the
                initiator.
            </param>
            <param name="listeners">
                A pair of listeners that will be responsible for handling the events of the two endpoints
                of the association. Elements in the Tuple must be in the same order as the addresses in <paramref name="key" />.
            </param>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.DeregisterAssociation(System.Tuple{Akka.Actor.Address,Akka.Actor.Address})">
            <summary>
                Removes an association.
            </summary>
            <param name="key">
                Ordered pair of addresses representing an association. First element must be the address of the
                initiator.
            </param>
            <returns>The original entries, or null if the key wasn't found in the table.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.ExistsAssociation(Akka.Actor.Address,Akka.Actor.Address)">
            <summary>
                Tests if an association was registered.
            </summary>
            <param name="initiatorAddress">The initiator of the association.</param>
            <param name="remoteAddress">The other address of the association.</param>
            <returns>True if there is an association for the given address.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.GetRemoteReadHandlerFor(Akka.Remote.Transport.TestAssociationHandle)">
            <summary>
                Returns the event handler corresponding to the remote endpoint of the given local handle. In other words
                it returns the listener that will receive <see cref="T:Akka.Remote.Transport.InboundPayload" /> events when
                <seealso cref="M:Akka.Remote.Transport.AssociationHandle.Write(Google.ProtocolBuffers.ByteString)" /> is called.
            </summary>
            <param name="localHandle">The handle</param>
            <returns>The option that contains the listener if it exists.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.TransportFor(Akka.Actor.Address)">
            <summary>
                Returns the transport bound to the given address.
            </summary>
            <param name="address">The address bound to the transport.</param>
            <returns>The transport, if it exists.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationRegistry.Reset">
            <summary>
                Clears the state of the entire registry.
                <remarks>
                    This method is not atomic and does not use a critical section when clearing transports, listeners, and logs.
                </remarks>
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.TestAssociationHandle">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestAssociationHandle.Inbound">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.TestAssociationHandle.Writeable">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TestAssociationHandle.#ctor(Akka.Actor.Address,Akka.Actor.Address,Akka.Remote.Transport.TestTransport,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
            <param name="transport">TBD</param>
            <param name="inbound">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.TestAssociationHandle.Key">
            <summary>
                Key used in <see cref="T:Akka.Remote.Transport.AssociationRegistry" /> to identify associations. Contains an ordered Tuple of addresses,
                where the first address is always the initiator of the association.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.TestAssociationHandle.Write(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.TestAssociationHandle.Disassociate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.Transport">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Transport.Config">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Transport.System">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Transport.SchemeIdentifier">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.Transport.MaximumPayloadBytes">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Transport.Listen">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.Transport.IsResponsibleFor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="remote">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.Transport.Associate(Akka.Actor.Address)">
            <summary>
            Asynchronously opens a logical duplex link between two <see cref="T:Akka.Remote.Transport.Transport"/> entities over a network. It could be backed
            with a real transport layer connection (TCP), socketless connections provided over datagram protocols (UDP), and more.
            
            This call returns a Task of an <see cref="T:Akka.Remote.Transport.AssociationHandle"/>. A faulted Task indicates that the association attempt was
            unsuccessful. If the exception is <see cref="T:Akka.Remote.Transport.InvalidAssociationException"/> then the association request was invalid and it's
            impossible to recover.
            </summary>
            <param name="remoteAddress">The address of the remote transport entity.</param>
            <returns>A status representing the failure or success containing an <see cref="T:Akka.Remote.Transport.AssociationHandle"/>.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.Transport.Shutdown">
            <summary>
            Shuts down the transport layer and releases all of the corresponding resources. Shutdown is asynchronous and is signaled
            by the result of the returned Task.
            
            The transport SHOULD try flushing pending writes before becoming completely closed.
            </summary>
            <returns>Task signaling the completion of the shutdown.</returns>
        </member>
        <member name="M:Akka.Remote.Transport.Transport.ManagementCommand(System.Object)">
            <summary>
            This method allows upper layers to send management commands to the transport. It is the responsibility of the sender to
            send appropriate commands to different transport implementations. Unknown commands will be ignored.
            </summary>
            <param name="message">Command message to send to the transport.</param>
            <returns>A Task that succeeds when the command was handled or dropped.</returns>
        </member>
        <member name="T:Akka.Remote.Transport.InvalidAssociationException">
            <summary>
            This exception is thrown when an association setup request is invalid and it is impossible to recover (malformed IP address, unknown hostname, etc...).
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.InvalidAssociationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.InvalidAssociationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Remote.Transport.InvalidAssociationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.InvalidAssociationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Remote.Transport.IHandleEvent">
            <summary>
            Marker interface for events that the registered listener for a <see cref="T:Akka.Remote.Transport.AssociationHandle"/> might receive.
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.InboundPayload">
            <summary>
            Message sent to the listener registered to an association (via the TaskCompletionSource returned by <see cref="P:Akka.Remote.Transport.AssociationHandle.ReadHandlerSource"/>)
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.InboundPayload.#ctor(Google.ProtocolBuffers.ByteString)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.InboundPayload.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.InboundPayload.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Remote.Transport.Disassociated">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.Disassociated.Info">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.Disassociated.#ctor(Akka.Remote.Transport.DisassociateInfo)">
            <summary>
            TBD
            </summary>
            <param name="info">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.UnderlyingTransportError">
            <summary>
            The underlying transport reported a non-fatal error
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.UnderlyingTransportError.Cause">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.UnderlyingTransportError.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.UnderlyingTransportError.#ctor(System.Exception,System.String)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Remote.Transport.DisassociateInfo">
            <summary>
            Supertype of possible disassociation reasons
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DisassociateInfo.Unknown">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DisassociateInfo.Shutdown">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.DisassociateInfo.Quarantined">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.IHandleEventListener">
            <summary>
            An interface that needs to be implemented by a user of an <see cref="T:Akka.Remote.Transport.AssociationHandle"/>
            in order to listen to association events
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.IHandleEventListener.Notify(Akka.Remote.Transport.IHandleEvent)">
            <summary>
            Notify the listener about an <see cref="T:Akka.Remote.Transport.IHandleEvent"/>.
            </summary>
            <param name="ev">The <see cref="T:Akka.Remote.Transport.IHandleEvent"/> to notify the listener about</param>
        </member>
        <member name="T:Akka.Remote.Transport.ActorHandleEventListener">
            <summary>
            Converts an <see cref="T:Akka.Actor.IActorRef"/> into an <see cref="T:Akka.Remote.Transport.IHandleEventListener"/>, so <see cref="T:Akka.Remote.Transport.IHandleEvent"/> messages
            can be passed directly to the Actor.
            </summary>
        </member>
        <member name="F:Akka.Remote.Transport.ActorHandleEventListener.Actor">
            <summary>
            The Actor to notify about <see cref="T:Akka.Remote.Transport.IHandleEvent"/> messages.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ActorHandleEventListener.#ctor(Akka.Actor.IActorRef)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.ActorHandleEventListener"/> class.
            </summary>
            <param name="actor">The Actor to notify about <see cref="T:Akka.Remote.Transport.IHandleEvent"/> messages.</param>
        </member>
        <member name="M:Akka.Remote.Transport.ActorHandleEventListener.Notify(Akka.Remote.Transport.IHandleEvent)">
            <summary>
            Notify the Actor about an <see cref="T:Akka.Remote.Transport.IHandleEvent"/> message.
            </summary>
            <param name="ev">The <see cref="T:Akka.Remote.Transport.IHandleEvent"/> message to notify the Actor about</param>
        </member>
        <member name="T:Akka.Remote.Transport.IAssociationEvent">
            <summary>
            Marker type for whenever new actors / endpoints are associated with this <see cref="T:Akka.Actor.ActorSystem"/> via remoting.
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.InboundAssociation">
            <summary>
            Message sent to <see cref="T:Akka.Remote.Transport.IAssociationEventListener"/> registered to a transport (via the TaskCompletionSource returned by <see cref="M:Akka.Remote.Transport.Transport.Listen"/>)
            when the inbound association request arrives.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.InboundAssociation.#ctor(Akka.Remote.Transport.AssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="association">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.InboundAssociation.Association">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Remote.Transport.IAssociationEventListener">
            <summary>
            Listener interface for any object that can handle <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> messages.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.IAssociationEventListener.Notify(Akka.Remote.Transport.IAssociationEvent)">
            <summary>
            Notify the listener about an <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> message.
            </summary>
            <param name="ev">The <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> message to notify the listener about</param>
        </member>
        <member name="T:Akka.Remote.Transport.ActorAssociationEventListener">
            <summary>
            Converts an <see cref="T:Akka.Actor.IActorRef"/> into an <see cref="T:Akka.Remote.Transport.IAssociationEventListener"/>, so <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> messages
            can be passed directly to the Actor.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ActorAssociationEventListener.#ctor(Akka.Actor.IActorRef)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Remote.Transport.ActorAssociationEventListener"/> class.
            </summary>
            <param name="actor">The Actor to notify about <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> messages.</param>
        </member>
        <member name="P:Akka.Remote.Transport.ActorAssociationEventListener.Actor">
            <summary>
            The Actor to notify about <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> messages.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.ActorAssociationEventListener.Notify(Akka.Remote.Transport.IAssociationEvent)">
            <summary>
            Notify the Actor about an <see cref="T:Akka.Remote.Transport.IAssociationEvent"/>.
            </summary>
            <param name="ev">The <see cref="T:Akka.Remote.Transport.IAssociationEvent"/> message to notify the Actor about</param>
        </member>
        <member name="T:Akka.Remote.Transport.AssociationHandle">
            <summary>
            A Service Provider Interface (SPI) layer for abstracting over logical links (associations) created by a <see cref="T:Akka.Remote.Transport.Transport"/>.
            Handles are responsible for providing an API for sending and receiving from the underlying channel.
            
            To register a listener for processing incoming payload data, the listener must be registered by completing the Task returned by
            <see cref="P:Akka.Remote.Transport.AssociationHandle.ReadHandlerSource"/>. Incoming data is not processed until this registration takes place.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationHandle.#ctor(Akka.Actor.Address,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="localAddress">TBD</param>
            <param name="remoteAddress">TBD</param>
        </member>
        <member name="P:Akka.Remote.Transport.AssociationHandle.LocalAddress">
            <summary>
            Address of the local endpoint
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociationHandle.RemoteAddress">
            <summary>
            Address of the remote endpoint
            </summary>
        </member>
        <member name="P:Akka.Remote.Transport.AssociationHandle.ReadHandlerSource">
            <summary>
            The TaskCompletionSource returned by this call must be completed with an <see cref="T:Akka.Remote.Transport.IHandleEventListener"/> to
            register a listener responsible for handling the incoming payload. Until the listener is not registered the
            transport SHOULD buffer incoming messages.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationHandle.Write(Google.ProtocolBuffers.ByteString)">
            <summary>
            Asynchronously sends the specified <paramref name="payload"/> to the remote endpoint. This method's implementation MUST be thread-safe
            as it might be called from different threads. This method MUST NOT block.
            
            Writes guarantee ordering of messages, but not their reception. The call to write returns with a boolean indicating if the
            channel was ready for writes or not. A return value of false indicates that the channel is not yet ready for deliver 
            (e.g.: the write buffer is full)and the sender  needs to wait until the channel becomes ready again.
            
            Returning false also means that the current write was dropped (this MUST be guaranteed to ensure duplication-free delivery).
            </summary>
            <param name="payload">The payload to be delivered to the remote endpoint.</param>
            <returns>
            Bool indicating the availability of the association for subsequent writes.
            </returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationHandle.Disassociate">
            <summary>
            Closes the underlying transport link, if needed. Some transports might not need an explicit teardown (UDP) and some
            transports may not support it. Remote endpoint of the channel or connection MAY be notified, but this is not
            guaranteed.
            
            The transport that provides the handle MUST guarantee that <see cref="M:Akka.Remote.Transport.AssociationHandle.Disassociate"/> could be called arbitrarily many times.
            </summary>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationHandle.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationHandle.Equals(Akka.Remote.Transport.AssociationHandle)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Remote.Transport.AssociationHandle.GetHashCode">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
    </members>
</doc>
