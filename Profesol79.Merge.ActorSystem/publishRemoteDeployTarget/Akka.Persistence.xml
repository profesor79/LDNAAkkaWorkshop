<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.Persistence</name>
    </assembly>
    <members>
        <member name="T:Akka.Persistence.AtLeastOnceDeliveryReceiveActor">
            <summary>
                Receive persistent actor type, that sends messages with at-least-once delivery semantics to it's destinations.
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.#ctor(Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings)">
            <summary>
            TBD
            </summary>
            <param name="settings">TBD</param>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.RedeliverInterval">
            <summary>
            Interval between redelivery attempts.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.redeliver-interval'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.RedeliveryBurstLimit">
            <summary>
            Maximum number of unconfirmed messages that will be sent at each redelivery burst
            (burst frequency is half of the redelivery interval).
            If there's a lot of unconfirmed messages (e.g. if the destination is not available for a long time),
            this helps prevent an overwhelming amount of messages to be sent at once.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.redelivery-burst-limit'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.WarnAfterNumberOfUnconfirmedAttempts">
            <summary>
            After this number of delivery attempts a <see cref="T:Akka.Persistence.UnconfirmedWarning" /> message will be sent to
            <see cref="P:Akka.Actor.ActorBase.Self" />. The count is reset after restart.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.warn-after-number-of-unconfirmed-attempts'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.MaxUnconfirmedMessages">
            <summary>
            Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory.
            if this number is exceeded, <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)" /> will not accept more
            messages and it will throw <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException" />.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.max-unconfirmed-messages'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.UnconfirmedCount">
            <summary>
            Number of messages that have not been confirmed yet.
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.AroundPreRestart(System.Exception,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.AroundPostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.OnReplaySuccess">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.AroundReceive(Akka.Actor.Receive,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object})">
            <summary>
            Send the message created with <paramref name="deliveryMessageMapper" /> function to the
            <paramref name="destination" /> actor. It will retry sending the message until the delivery is
            confirmed with <see cref="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.ConfirmDelivery(System.Int64)" />.
            Correlation between these two methods is performed by deliveryId that is provided as parameter
            to the <paramref name="deliveryMessageMapper"/> function. The deliveryId is typically passed in the message to
            the destination, which replies with a message containing the same 'deliveryId'.
            
            The 'deliveryId' is a strictly monotonically increasing sequence number without gaps.
            The same sequence is used for all destinations of the actor, i.e. when sending
            to multiple destinations the destinations will see gaps in the sequence if no translation is performed.
            
            During recovery this method will not send out the message, but it will be sent later if no matching 
            <see cref="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.ConfirmDelivery(System.Int64)" /> was performed.
            </summary>
            <param name="destination">TBD</param>
            <param name="deliveryMessageMapper">TBD</param>
            <exception cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException">
            Thrown when <see cref="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.UnconfirmedCount" /> is greater than or equal to <see cref="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.MaxUnconfirmedMessages" />.
            </exception>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.Deliver(Akka.Actor.ActorSelection,System.Func{System.Int64,System.Object})">
            <summary>
            Send the message created with <paramref name="deliveryMessageMapper" /> function to the
            <paramref name="destination" /> actor. It will retry sending the message until the delivery is
            confirmed with <see cref="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.ConfirmDelivery(System.Int64)" />.
            Correlation between these two methods is performed by deliveryId that is provided as parameter
            to the <paramref name="deliveryMessageMapper"/> function. The deliveryId is typically passed in the message to
            the destination, which replies with a message containing the same 'deliveryId'.
            
            The 'deliveryId' is a strictly monotonically increasing sequence number without gaps.
            The same sequence is used for all destinations of the actor, i.e. when sending
            to multiple destinations the destinations will see gaps in the sequence if no translation is performed.
            
            During recovery this method will not send out the message, but it will be sent later if no matching 
            <see cref="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.ConfirmDelivery(System.Int64)" /> was performed.
            </summary>
            <param name="destination">TBD</param>
            <param name="deliveryMessageMapper">TBD</param>
            <exception cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException">
            Thrown when <see cref="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.UnconfirmedCount" /> is greater than or equal to <see cref="P:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.MaxUnconfirmedMessages" />.
            </exception>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.ConfirmDelivery(System.Int64)">
            <summary>
            Call this method when a message has been confirmed by the destination,
            or to abort re-sending.
            </summary>
            <param name="deliveryId">TBD</param>
            <returns>True the first time the <paramref name="deliveryId"/> is confirmed, false for duplicate confirmations.</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.GetDeliverySnapshot">
            <summary>
            Full state of the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySemantic"/>. It can be saved with
            <see cref="M:Akka.Persistence.Eventsourced.SaveSnapshot(System.Object)" />. During recovery the snapshot received in
            <see cref="T:Akka.Persistence.SnapshotOffer"/> should be set with <see cref="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)"/>.
            
            The <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/> contains the full delivery state,
            including unconfirmed messages. If you need a custom snapshot for other parts of the
            actor state you must also include the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>.
            It is serialized using protobuf with the ordinary Akka serialization mechanism.
            It is easiest to include the bytes of the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>
            as a blob in your custom snapshot.
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)">
            <summary>
            If snapshot from <see cref="M:Akka.Persistence.AtLeastOnceDeliveryReceiveActor.GetDeliverySnapshot" /> was saved it will be received during recovery
            phase in a <see cref="T:Akka.Persistence.SnapshotOffer" /> message and should be set with this method.
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="T:Akka.Persistence.AtLeastOnceDeliverySnapshot">
            <summary>
            Snapshot of current <see cref="T:Akka.Persistence.AtLeastOnceDeliveryActor" /> state. Can be retrieved with
            <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.GetDeliverySnapshot" /> and saved with
            <see cref="M:Akka.Persistence.Eventsourced.SaveSnapshot(System.Object)" />.
            During recovery the snapshot received in <see cref="T:Akka.Persistence.SnapshotOffer" /> should be sent with
            <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)" />.
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySnapshot.CurrentDeliveryId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySnapshot.UnconfirmedDeliveries">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySnapshot.#ctor(System.Int64,Akka.Persistence.UnconfirmedDelivery[])">
            <summary>
            TBD
            </summary>
            <param name="currentDeliveryId">TBD</param>
            <param name="unconfirmedDeliveries">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="unconfirmedDeliveries"/> array is undefined.
            </exception>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySnapshot.Equals(Akka.Persistence.AtLeastOnceDeliverySnapshot)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySnapshot.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySnapshot.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySnapshot.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.UnconfirmedWarning">
            <summary>
            Message should be sent after <see cref="P:Akka.Persistence.AtLeastOnceDeliverySemantic.WarnAfterNumberOfUnconfirmedAttempts" />
            limit will is reached.
            </summary>
        </member>
        <member name="F:Akka.Persistence.UnconfirmedWarning.UnconfirmedDeliveries">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedWarning.#ctor(Akka.Persistence.UnconfirmedDelivery[])">
            <summary>
            TBD
            </summary>
            <param name="unconfirmedDeliveries">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="unconfirmedDeliveries"/> array is undefined.
            </exception>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedWarning.Equals(Akka.Persistence.UnconfirmedWarning)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedWarning.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedWarning.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedWarning.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.UnconfirmedDelivery">
            <summary>
            Contains details about unconfirmed messages.
            It's included inside <see cref="T:Akka.Persistence.UnconfirmedWarning" /> and <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot" />.
            <see cref="!:AtLeastOnceDeliverySemantic.AfterNumberOfUnconfirmedAttempts" />
            </summary>
        </member>
        <member name="F:Akka.Persistence.UnconfirmedDelivery.DeliveryId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.UnconfirmedDelivery.Destination">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.UnconfirmedDelivery.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedDelivery.#ctor(System.Int64,Akka.Actor.ActorPath,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="deliveryId">TBD</param>
            <param name="destination">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedDelivery.Equals(Akka.Persistence.UnconfirmedDelivery)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedDelivery.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedDelivery.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.UnconfirmedDelivery.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException">
            <summary>
            This exception is thrown when the <see cref="P:Akka.Persistence.AtLeastOnceDeliverySemantic.MaxUnconfirmedMessages" /> threshold has been exceeded.
            </summary>
        </member>
        <member name="M:Akka.Persistence.MaxUnconfirmedMessagesExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException"/> class.
            </summary>
        </member>
        <member name="M:Akka.Persistence.MaxUnconfirmedMessagesExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Akka.Persistence.MaxUnconfirmedMessagesExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Persistence.MaxUnconfirmedMessagesExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Persistence.AtLeastOnceDeliverySemantic">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.Attempt">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.Destination">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.Timestamp">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.#ctor(Akka.Actor.ActorPath,System.Object,System.DateTime,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="destination">TBD</param>
            <param name="message">TBD</param>
            <param name="timestamp">TBD</param>
            <param name="attempt">TBD</param>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.IncrementedCopy">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.Equals(Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Delivery.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.AtLeastOnceDeliverySemantic.RedeliveryTick">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.AtLeastOnceDeliverySemantic.RedeliveryTick.Instance">
            <summary>
            The singleton instance of the redelivery tick
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.RedeliveryTick.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.#ctor(Akka.Actor.IActorContext,Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings)">
            <summary>
            TBD
            </summary>
            <param name="context">TBD</param>
            <param name="settings">TBD</param>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliverySemantic.RedeliverInterval">
            <summary>
            Interval between redelivery attempts.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.redeliver-interval'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliverySemantic.RedeliveryBurstLimit">
            <summary>
            Maximum number of unconfirmed messages that will be sent at each redelivery burst
            (burst frequency is half of the redelivery interval).
            If there's a lot of unconfirmed messages (e.g. if the destination is not available for a long time),
            this helps prevent an overwhelming amount of messages to be sent at once.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.redelivery-burst-limit'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliverySemantic.WarnAfterNumberOfUnconfirmedAttempts">
            <summary>
            After this number of delivery attempts a <see cref="T:Akka.Persistence.UnconfirmedWarning" /> message will be sent to
            <see cref="P:Akka.Actor.ActorBase.Self" />. The count is reset after restart.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.warn-after-number-of-unconfirmed-attempts'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliverySemantic.MaxUnconfirmedMessages">
            <summary>
            Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory.
            if this number is exceeded, <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)" /> will not accept more
            messages and it will throw <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException" />.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.max-unconfirmed-messages'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliverySemantic.UnconfirmedCount">
            <summary>
                Number of messages, that have not been confirmed yet.
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="destination">TBD</param>
            <param name="deliveryMessageMapper">TBD</param>
            <param name="isRecovering">TBD</param>
            <exception cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException">
            This exception is thrown when the actor exceeds the <see cref="P:Akka.Persistence.AtLeastOnceDeliverySemantic.MaxUnconfirmedMessages"/> count.
            </exception>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.ConfirmDelivery(System.Int64)">
            <summary>
            Call this method when a message has been confirmed by the destination,
            or to abort re-sending.
            </summary>
            <param name="deliveryId">TBD</param>
            <returns>True the first time the <paramref name="deliveryId"/> is confirmed, false for duplicate confirmations.</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.GetDeliverySnapshot">
            <summary>
            Full state of the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySemantic"/>. It can be saved with
            <see cref="M:Akka.Persistence.Eventsourced.SaveSnapshot(System.Object)" />. During recovery the snapshot received in
            <see cref="T:Akka.Persistence.SnapshotOffer"/> should be set with <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)"/>.
            
            The <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/> contains the full delivery state,
            including unconfirmed messages. If you need a custom snapshot for other parts of the
            actor state you must also include the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>.
            It is serialized using protobuf with the ordinary Akka serialization mechanism.
            It is easiest to include the bytes of the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>
            as a blob in your custom snapshot.
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)">
            <summary>
            If snapshot from <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.GetDeliverySnapshot" /> was saved it will be received during recovery
            phase in a <see cref="T:Akka.Persistence.SnapshotOffer" /> message and should be set with this method.
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Cancel">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.OnReplaySuccess">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliverySemantic.AroundReceive(Akka.Actor.Receive,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Eventsourced">
            <summary>
            TBD
            </summary>
            <summary>
            TBD
            </summary>
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Eventsourced.UnstashFilterPredicate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.AroundReceive(Akka.Actor.Receive,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.AroundPreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.AroundPreRestart(System.Exception,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.AroundPostRestart(System.Exception,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.AroundPostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.Unhandled(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="F:Akka.Persistence.Eventsourced._pendingStashingPersistInvocations">
            Used instead of iterating `pendingInvocations` in order to check if safe to revert to processing commands
        </member>
        <member name="F:Akka.Persistence.Eventsourced._pendingInvocations">
            Holds user-supplied callbacks for persist/persistAsync calls
        </member>
        <member name="F:Akka.Persistence.Eventsourced.Extension">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.Log">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.PersistenceId">
            <summary>
            Id of the persistent entity for which messages should be replayed.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.Recovery">
            <summary>
            Called when the persistent actor is started for the first time.
            The returned <see cref="T:Akka.Persistence.Recovery"/> object defines how the actor
            will recover its persistent state behore handling the first incoming message.
            
            To skip recovery completely return <see cref="F:Akka.Persistence.Recovery.None"/>.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.InternalStashOverflowStrategy">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.Stash">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.JournalPluginId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.SnapshotPluginId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.Journal">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.SnapshotStore">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.SnapshotterId">
            <summary>
            Returns <see cref="P:Akka.Persistence.Eventsourced.PersistenceId"/>.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.IsRecovering">
            <summary>
            Returns true if this persistent entity is currently recovering.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.IsRecoveryFinished">
            <summary>
            Returns true if this persistent entity has successfully finished recovery.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.LastSequenceNr">
            <summary>
            Highest received sequence number so far or `0L` if this actor 
            hasn't replayed  or stored any persistent events yet.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Eventsourced.SnapshotSequenceNr">
            <summary>
            Returns <see cref="P:Akka.Persistence.Eventsourced.LastSequenceNr"/>
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.LoadSnapshot(System.String,Akka.Persistence.SnapshotSelectionCriteria,System.Int64)">
            <summary>
            Instructs the snapshot store to load the specified snapshot and send it via an
            <see cref="T:Akka.Persistence.SnapshotOffer"/> to the running <see cref="T:Akka.Persistence.PersistentActor"/>.
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.SaveSnapshot(System.Object)">
            <summary>
            Saves <paramref name="snapshot"/> of current <see cref="T:Akka.Persistence.ISnapshotter"/> state.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the success or failure of this
            via an <see cref="T:Akka.Persistence.SaveSnapshotSuccess"/> or <see cref="T:Akka.Persistence.SaveSnapshotFailure"/> message.
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.DeleteSnapshot(System.Int64)">
            <summary>
            Deletes the snapshot identified by <paramref name="sequenceNr"/>.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the status of the deletion
            via an <see cref="T:Akka.Persistence.DeleteSnapshotSuccess"/> or <see cref="T:Akka.Persistence.DeleteSnapshotFailure"/> message.
            </summary>
            <param name="sequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.DeleteSnapshots(Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            Deletes all snapshots matching <paramref name="criteria"/>.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the status of the deletion
            via an <see cref="T:Akka.Persistence.DeleteSnapshotsSuccess"/> or <see cref="T:Akka.Persistence.DeleteSnapshotsFailure"/> message.
            </summary>
            <param name="criteria">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.ReceiveRecover(System.Object)">
            <summary> 
            Recovery handler that receives persistent events during recovery. If a state snapshot has been captured and saved, 
            this handler will receive a <see cref="T:Akka.Persistence.SnapshotOffer"/> message followed by events that are younger than offer itself.
            
            This handler must not have side-effects other than changing persistent actor state i.e. it
            should not perform actions that may fail, such as interacting with external services,
            for example.
            
            If there is a problem with recovering the state of the actor from the journal, the error
            will be logged and the actor will be stopped.
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.ReceiveCommand(System.Object)">
            <summary>
            Command handler. Typically validates commands against current state - possibly by communicating with other actors.
            On successful validation, one or more events are derived from command and persisted.
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})">
             <summary> 
             Asynchronously persists an <paramref name="event"/>. On successful persistence, the <paramref name="handler"/>
             is called with the persisted event. This method guarantees that no new commands will be received by a persistent actor
             between a call to <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> and execution of it's handler. It also
             holds multiple persist calls per received command. Internally this is done by stashing. The stash used
             for that is an internal stash which doesn't interfere with the inherited user stash.
             
             
             An event <paramref name="handler"/> may close over eventsourced actor state and modify it. Sender of the persistent event
             is considered a sender of the corresponding command. That means one can respond to sender from within an event handler.
             
             
             Within an event handler, applications usually update persistent actor state using 
             persisted event data, notify listeners and reply to command senders.
             
            
             If persistence of an event fails, <see cref="M:Akka.Persistence.Eventsourced.OnPersistFailure(System.Exception,System.Object,System.Int64)" /> will be invoked and the actor will
             unconditionally be stopped. The reason that it cannot resume when persist fails is that it
             is unknown if the event was actually persisted or not, and therefore it is in an inconsistent
             state. Restarting on persistent failures will most likely fail anyway, since the journal
             is probably unavailable. It is better to stop the actor and after a back-off timeout start
             it again.
             </summary>
             <typeparam name="TEvent">TBD</typeparam>
             <param name="event">TBD</param>
             <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.PersistAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Asynchronously persists series of <paramref name="events"/> in specified order.
            This is equivalent of multiple calls of <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> calls
            with the same handler, except that events are persisted atomically with this method.
            </summary>
            <typeparam name="TEvent">TBD</typeparam>
            <param name="events">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.PersistAsync``1(``0,System.Action{``0})">
            <summary> 
            Asynchronously persists an <paramref name="event"/>. On successful persistence, the <paramref name="handler"/>
            is called with the persisted event. Unlike <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> method,
            this one will continue to receive incoming commands between calls and executing it's event <paramref name="handler"/>.
            
            
            This version should be used in favor of <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> 
            method when throughput is more important that commands execution precedence.
            
            
            An event <paramref name="handler"/> may close over eventsourced actor state and modify it. Sender of the persistent event
            is considered a sender of the corresponding command. That means, one can respond to sender from within an event handler.
            
            
            Within an event handler, applications usually update persistent actor state using 
            persisted event data, notify listeners and reply to command senders.
            
            
            If persistence of an event fails, <see cref="M:Akka.Persistence.Eventsourced.OnPersistFailure(System.Exception,System.Object,System.Int64)" /> will be invoked and the actor will
            unconditionally be stopped. The reason that it cannot resume when persist fails is that it
            is unknown if the event was actually persisted or not, and therefore it is in an inconsistent
            state. Restarting on persistent failures will most likely fail anyway, since the journal
            is probably unavailable. It is better to stop the actor and after a back-off timeout start
            it again.
            </summary>
            <typeparam name="TEvent">TBD</typeparam>
            <param name="event">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.PersistAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Asynchronously persists series of <paramref name="events"/> in specified order.
            This is equivalent of multiple calls of <see cref="M:Akka.Persistence.Eventsourced.PersistAsync``1(``0,System.Action{``0})"/> calls
            with the same handler, except that events are persisted atomically with this method.
            </summary>
            <typeparam name="TEvent">TBD</typeparam>
            <param name="events">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.DeferAsync``1(``0,System.Action{``0})">
            <summary>
            Defer the <paramref name="handler"/> execution until all pending handlers have been executed. 
            Allows to define logic within the actor, which will respect the invocation-order-guarantee
            in respect to <see cref="M:Akka.Persistence.Eventsourced.PersistAsync``1(``0,System.Action{``0})"/> calls.
            That is, if <see cref="M:Akka.Persistence.Eventsourced.PersistAsync``1(``0,System.Action{``0})"/> was invoked before
            <see cref="M:Akka.Persistence.Eventsourced.DeferAsync``1(``0,System.Action{``0})"/>, the corresponding handlers will be
            invoked in the same order as they were registered in.
            
            This call will NOT result in <paramref name="evt"/> being persisted, use
            <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> or
            <see cref="M:Akka.Persistence.Eventsourced.PersistAsync``1(``0,System.Action{``0})"/> instead if the given
            <paramref name="evt"/> should be possible to replay.
            
            If there are no pending persist handler calls, the <paramref name="handler"/> will be called immediately.
            
            If persistence of an earlier event fails, the persistent actor will stop, and the
            <paramref name="handler"/> will not be run.
            </summary>
            <typeparam name="TEvent">TBD</typeparam>
            <param name="evt">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.DeleteMessages(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.OnReplaySuccess">
            <summary>
            Called whenever a message replay succeeds.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.OnRecoveryFailure(System.Exception,System.Object)">
            <summary>
            Called whenever a message replay fails. By default it log the errors.
            </summary>
            <param name="reason">Reason of failure</param>
            <param name="message">Message that caused a failure</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.OnPersistFailure(System.Exception,System.Object,System.Int64)">
             <summary>
             Called when persist fails. By default it logs the error.
             Subclass may override to customize logging and for example send negative
             acknowledgment to sender.
            
             The actor is always stopped after this method has been invoked.
            
             Note that the event may or may not have been saved, depending on the type of
             failure.
             </summary>
             <param name="cause">TBD</param>
             <param name="event">TBD</param>
             <param name="sequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.OnPersistRejected(System.Exception,System.Object,System.Int64)">
            <summary>
            Called when the journal rejected <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> of an event.
            The event was not stored. By default this method logs the problem as a warning, and the actor continues.
            The callback handler that was passed to the <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/>
            method will not be invoked.
            </summary>
            <param name="cause">TBD</param>
            <param name="event">TBD</param>
            <param name="sequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.RecoveryStarted(System.Int64)">
            <summary>
            Processes a loaded snapshot, if any. A loaded snapshot is offered with a <see cref="T:Akka.Persistence.SnapshotOffer"/> 
            message to the actor's <see cref="M:Akka.Persistence.Eventsourced.ReceiveRecover(System.Object)"/>. Then initiates a message replay, either starting 
            from the loaded snapshot or from scratch, and switches to <see cref="!:ReplayStarted"/> state. 
            All incoming messages are stashed.
            </summary>
            <param name="maxReplays">Maximum number of messages to replay</param>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.Recovering(Akka.Actor.Receive,System.TimeSpan)">
            <summary>
            Processes replayed messages, if any. The actor's <see cref="M:Akka.Persistence.Eventsourced.ReceiveRecover(System.Object)"/> is invoked with the replayed events.
            
            If replay succeeds it got highest stored sequence number response from the journal and then switches
            to <see cref="M:Akka.Persistence.Eventsourced.ProcessingCommands"/> state.
            If replay succeeds the <see cref="M:Akka.Persistence.Eventsourced.OnReplaySuccess"/> callback method is called, otherwise
            <see cref="M:Akka.Persistence.Eventsourced.OnRecoveryFailure(System.Exception,System.Object)"/>.
            
            All incoming messages are stashed.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.ProcessingCommands">
            <summary>
            If event persistence is pending after processing a command, event persistence 
            is triggered and the state changes to <see cref="M:Akka.Persistence.Eventsourced.PersistingEvents"/>.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Eventsourced.PersistingEvents">
            <summary>
            Remains until pending events are persisted and then changes state to <see cref="M:Akka.Persistence.Eventsourced.ProcessingCommands"/>.
            Only events to be persisted are processed. All other messages are stashed internally.
            </summary>
        </member>
        <member name="T:Akka.Persistence.AtLeastOnceDeliveryActor">
            <summary>
            Persistent actor type that sends messages with at-least-once delivery semantics to destinations.
            It takes care of re-sending messages when they haven't been confirmed withing expected timeout.
            Use the <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)" /> method to send a message to a destination. Call the
            <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.ConfirmDelivery(System.Int64)" />
            method when destination has replied with a confirmation message.
            
            At-least-once delivery implies that the original message send order is not always retained
            and the destination may receive duplicate messages due to possible resends.
            
            The interval between redelivery attempts can be defined with <see cref="P:Akka.Persistence.AtLeastOnceDeliverySemantic.RedeliverInterval" />.
            After a number of delivery attempts a <see cref="T:Akka.Persistence.UnconfirmedWarning" /> message will be sent to <see cref="P:Akka.Actor.ActorBase.Self" />.
            The re-sending will continue, but you may choose <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.ConfirmDelivery(System.Int64)" /> to cancel re-sending.
            
            This actor type has a state consisting of unconfirmed messages and a sequence number. It does not store this state
            itself. You must persist events corresponding to the <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)"/> and
            <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.ConfirmDelivery(System.Int64)"/> invocations from your <see cref="T:Akka.Persistence.PersistentActor"/> so that
            the state can be restored by calling the same methods during the recovery phase of the <see cref="T:Akka.Persistence.PersistentActor"/>.
            Sometimes these events can be derived from other business level events, and sometimes you must create separate events.
            During recovery calls to <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)"/> will not send out the message, but it will be sent
            later if no matching <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.ConfirmDelivery(System.Int64)"/> was performed.
            
            Support for snapshot is provided by <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.GetDeliverySnapshot"/> and
            <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)"/>. The <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/> contains
            the full delivery state, including unconfirmed messages. If you need a custom snapshot for other parts of the
            actor state you must also include the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>. It is serialized using protobuf
            with the ordinary Akka serialization mechanism. It is easiest to include the bytes of the
            <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/> as a blob in your custom snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.#ctor(Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings)">
            <summary>
            TBD
            </summary>
            <param name="settings">TBD</param>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryActor.RedeliverInterval">
            <summary>
            Interval between redelivery attempts.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.redeliver-interval'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryActor.RedeliveryBurstLimit">
            <summary>
            Maximum number of unconfirmed messages that will be sent at each redelivery burst
            (burst frequency is half of the redelivery interval).
            If there's a lot of unconfirmed messages (e.g. if the destination is not available for a long time),
            this helps prevent an overwhelming amount of messages to be sent at once.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.redelivery-burst-limit'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryActor.WarnAfterNumberOfUnconfirmedAttempts">
            <summary>
            After this number of delivery attempts a <see cref="T:Akka.Persistence.UnconfirmedWarning" /> message will be sent to
            <see cref="P:Akka.Actor.ActorBase.Self" />. The count is reset after restart.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.warn-after-number-of-unconfirmed-attempts'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryActor.MaxUnconfirmedMessages">
            <summary>
            Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory.
            if this number is exceeded, <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)" /> will not accept more
            messages and it will throw <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException" />.
            
            The default value can be configure with the 'akka.persistence.at-least-once-delivery.max-unconfirmed-messages'
            configuration key. This method can be overridden by implementation classes to return
            non-default values.
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtLeastOnceDeliveryActor.UnconfirmedCount">
            <summary>
            Number of messages that have not been confirmed yet.
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.AroundPreRestart(System.Exception,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.AroundPostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.OnReplaySuccess">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.AroundReceive(Akka.Actor.Receive,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object})">
            <summary>
            Send the message created with <paramref name="deliveryMessageMapper" /> function to the
            <paramref name="destination" /> actor. It will retry sending the message until the delivery is
            confirmed with <see cref="M:Akka.Persistence.AtLeastOnceDeliveryActor.ConfirmDelivery(System.Int64)" />.
            Correlation between these two methods is performed by deliveryId that is provided as parameter
            to the <paramref name="deliveryMessageMapper"/> function. The deliveryId is typically passed in the message to
            the destination, which replies with a message containing the same 'deliveryId'.
            
            The 'deliveryId' is a strictly monotonically increasing sequence number without gaps.
            The same sequence is used for all destinations of the actor, i.e. when sending
            to multiple destinations the destinations will see gaps in the sequence if no translation is performed.
            
            During recovery this method will not send out the message, but it will be sent later if no matching 
            <see cref="M:Akka.Persistence.AtLeastOnceDeliveryActor.ConfirmDelivery(System.Int64)" /> was performed.
            </summary>
            <param name="destination">TBD</param>
            <param name="deliveryMessageMapper">TBD</param>
            <exception cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException">
            Thrown when <see cref="P:Akka.Persistence.AtLeastOnceDeliveryActor.UnconfirmedCount" /> is greater than or equal to <see cref="P:Akka.Persistence.AtLeastOnceDeliveryActor.MaxUnconfirmedMessages" />.
            </exception>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.Deliver(Akka.Actor.ActorSelection,System.Func{System.Int64,System.Object})">
            <summary>
            Send the message created with <paramref name="deliveryMessageMapper" /> function to the
            <paramref name="destination" /> actor. It will retry sending the message until the delivery is
            confirmed with <see cref="M:Akka.Persistence.AtLeastOnceDeliveryActor.ConfirmDelivery(System.Int64)" />.
            Correlation between these two methods is performed by deliveryId that is provided as parameter
            to the <paramref name="deliveryMessageMapper"/> function. The deliveryId is typically passed in the message to
            the destination, which replies with a message containing the same 'deliveryId'.
            
            The 'deliveryId' is a strictly monotonically increasing sequence number without gaps.
            The same sequence is used for all destinations of the actor, i.e. when sending
            to multiple destinations the destinations will see gaps in the sequence if no translation is performed.
            
            During recovery this method will not send out the message, but it will be sent later if no matching 
            <see cref="M:Akka.Persistence.AtLeastOnceDeliveryActor.ConfirmDelivery(System.Int64)" /> was performed.
            </summary>
            <param name="destination">TBD</param>
            <param name="deliveryMessageMapper">TBD</param>
            <exception cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException">
            Thrown when <see cref="P:Akka.Persistence.AtLeastOnceDeliveryActor.UnconfirmedCount" /> is greater than or equal to <see cref="P:Akka.Persistence.AtLeastOnceDeliveryActor.MaxUnconfirmedMessages" />.
            </exception>
            <exception cref="T:System.NotSupportedException">TBD</exception>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.ConfirmDelivery(System.Int64)">
            <summary>
            Call this method when a message has been confirmed by the destination,
            or to abort re-sending.
            </summary>
            <param name="deliveryId">TBD</param>
            <returns>True the first time the <paramref name="deliveryId"/> is confirmed, false for duplicate confirmations.</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.GetDeliverySnapshot">
            <summary>
            Full state of the <see cref="T:Akka.Persistence.AtLeastOnceDeliveryActor"/>. It can be saved with
            <see cref="M:Akka.Persistence.Eventsourced.SaveSnapshot(System.Object)" />. During recovery the snapshot received in
            <see cref="T:Akka.Persistence.SnapshotOffer"/> should be set with <see cref="M:Akka.Persistence.AtLeastOnceDeliveryActor.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)"/>.
            
            The <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/> contains the full delivery state,
            including unconfirmed messages. If you need a custom snapshot for other parts of the
            actor state you must also include the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>.
            It is serialized using protobuf with the ordinary Akka serialization mechanism.
            It is easiest to include the bytes of the <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>
            as a blob in your custom snapshot.
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.AtLeastOnceDeliveryActor.SetDeliverySnapshot(Akka.Persistence.AtLeastOnceDeliverySnapshot)">
            <summary>
            If snapshot from <see cref="M:Akka.Persistence.AtLeastOnceDeliveryActor.GetDeliverySnapshot" /> was saved it will be received during recovery
            phase in a <see cref="T:Akka.Persistence.SnapshotOffer" /> message and should be set with this method.
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="T:Akka.Persistence.IPendingHandlerInvocation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPendingHandlerInvocation.Event">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPendingHandlerInvocation.Handler">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.StashingHandlerInvocation">
            <summary>
            Forces actor to stash incoming commands until all invocations are handled.
            </summary>
        </member>
        <member name="M:Akka.Persistence.StashingHandlerInvocation.#ctor(System.Object,System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="P:Akka.Persistence.StashingHandlerInvocation.Event">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.StashingHandlerInvocation.Handler">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.AsyncHandlerInvocation">
            <summary>
            Unlike <see cref="T:Akka.Persistence.StashingHandlerInvocation"/> this one does not force actor to stash commands.
            Originates from <see cref="M:Akka.Persistence.Eventsourced.PersistAsync``1(``0,System.Action{``0})"/> 
            or <see cref="M:Akka.Persistence.Eventsourced.DeferAsync``1(``0,System.Action{``0})"/> method calls.
            </summary>
        </member>
        <member name="M:Akka.Persistence.AsyncHandlerInvocation.#ctor(System.Object,System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="P:Akka.Persistence.AsyncHandlerInvocation.Event">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.AsyncHandlerInvocation.Handler">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.RecoveryTick">
            <summary>
            message used to detect that recovery timed out
            </summary>
        </member>
        <member name="M:Akka.Persistence.RecoveryTick.#ctor(System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="P:Akka.Persistence.RecoveryTick.Snapshot">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.StateReceive">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Persistence.EventsourcedState">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.EventsourcedState.#ctor(System.String,System.Boolean,Akka.Persistence.StateReceive)">
            <summary>
            TBD
            </summary>
            <param name="name">TBD</param>
            <param name="isRecoveryRunning">TBD</param>
            <param name="stateReceive">TBD</param>
        </member>
        <member name="P:Akka.Persistence.EventsourcedState.Name">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.EventsourcedState.IsRecoveryRunning">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.EventsourcedState.StateReceive">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.EventsourcedState.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.LinkedListExtensions">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.LinkedListExtensions.Pop``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Removes first element from the list and returns it or returns default value if list was empty.
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="self">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSM`3">
            <summary>
                Finite state machine (FSM) persistent actor.
            </summary>
            <typeparam name="TState">The state name type</typeparam>
            <typeparam name="TData">The state data type</typeparam>
            <typeparam name="TEvent">The event data type</typeparam>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSM`3.OnRecoveryCompleted">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSM`3.ReceiveRecover(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSM`3.ApplyEvent(`2,`1)">
            <summary>
            TBD
            </summary>
            <param name="e">TBD</param>
            <param name="data">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSM`3.ApplyState(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State)">
            <summary>
            TBD
            </summary>
            <param name="upcomingState">TBD</param>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3">
            <summary>
            TBD
            </summary>
            <typeparam name="TState">TBD</typeparam>
            <typeparam name="TData">TBD</typeparam>
            <typeparam name="TEvent">TBD</typeparam>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateFunction">
            <summary>
            TBD
            </summary>
            <param name="fsmEvent">TBD</param>
            <param name="state">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.TransitionHandler">
            <summary>
            TBD
            </summary>
            <param name="initialState">TBD</param>
            <param name="nextState">TBD</param>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._listener">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._stateFunctions">
            <summary>
                State definitions
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._timers">
            <summary>
                Timer handling
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._transitionEvent">
            <summary>
                Transition handling
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._currentState">
            <summary>
                FSM state data and current timeout handling
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._generation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._terminateEvent">
            <summary>
                Termination handling
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3._timeoutFuture">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Fsm.PersistentFSMBase`3.DebugEvent">
            <summary>
                Can be set to enable debugging on certain actions taken by the FSM
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.StateName">
            <summary>
                Current state name
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.StateData">
            <summary>
                Current state data
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.NextStateData">
            <summary>
                Return next state data (available in <see cref="M:Akka.Persistence.Fsm.PersistentFSMBase`3.OnTransition(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.TransitionHandler)" /> handlers)
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.HandleEventDefault">
            <summary>
                Unhandled event handler
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.IsStateTimerActive">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.Listeners">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.When(`0,Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.StateFunction,System.Nullable{System.TimeSpan})">
            <summary>
                Insert a new <see cref="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateFunction" /> at the end of the processing chain for the
                given state. If the stateTimeout parameter is set, entering this state without a
                differing explicit timeout setting will trigger a <see cref="T:Akka.Actor.FSMBase.StateTimeout" />.
            </summary>
            <param name="stateName">designator for the state</param>
            <param name="func">delegate describing this state's response to input</param>
            <param name="timeout">default timeout for this state</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.StartWith(`0,`1,System.Nullable{System.TimeSpan})">
            <summary>
                Sets the initial state for this FSM. Call this method from the constructor before the <see cref="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Initialize" />
                method.
                If different state is needed after a restart this method, followed by <see cref="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Initialize" />, can be used in the
                actor
                life cycle hooks <see cref="M:Akka.Actor.ActorBase.PreStart" /> and <see cref="M:Akka.Actor.ActorBase.PostRestart(System.Exception)" />.
            </summary>
            <param name="stateName">Initial state designator.</param>
            <param name="stateData">Initial state data.</param>
            <param name="timeout">State timeout for the initial state, overriding the default timeout for that state.</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.GoTo(`0)">
            <summary>
                Produce transition to other state. Return this from a state function
                in order to effect the transition.
            </summary>
            <param name="nextStateName">State designator for the next state</param>
            <returns>State transition descriptor</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.GoTo(`0,`1)">
            <summary>
                Produce transition to other state. Return this from a state function
                in order to effect the transition.
            </summary>
            <param name="nextStateName">State designator for the next state</param>
            <param name="stateData">Data for next state</param>
            <returns>State transition descriptor</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Stay">
            <summary>
                Produce "empty" transition descriptor. Return this from a state function
                when no state change is to be effected.
            </summary>
            <returns>Descriptor for staying in the current state.</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Stop">
            <summary>
                Produce change descriptor to stop this FSM actor with <see cref="T:Akka.Actor.FSMBase.Reason" /> <see cref="T:Akka.Actor.FSMBase.Normal" />
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Stop(Akka.Actor.FSMBase.Reason)">
            <summary>
                Produce change descriptor to stop this FSM actor with the specified <see cref="T:Akka.Actor.FSMBase.Reason" />.
            </summary>
            <param name="reason">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Stop(Akka.Actor.FSMBase.Reason,`1)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
            <param name="stateData">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.SetTimer(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
                Schedule named timer to deliver message after given delay, possibly repeating.
                Any existing timer with the same name will automatically be canceled before adding
                the new timer.
            </summary>
            <param name="name">identifier to be used with <see cref="M:Akka.Persistence.Fsm.PersistentFSMBase`3.CancelTimer(System.String)" />.</param>
            <param name="msg">message to be delivered</param>
            <param name="timeout">delay of first message delivery and between subsequent messages.</param>
            <param name="repeat">send once if false, scheduleAtFixedRate if true</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.CancelTimer(System.String)">
            <summary>
                Cancel a named <see cref="T:System.Threading.Timer" />, ensuring that the message is not subsequently delivered (no
                race.)
            </summary>
            <param name="name">The name of the timer to cancel.</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.IsTimerActive(System.String)">
            <summary>
                Determines whether the named timer is still active. Returns true
                unless the timer does not exist, has previously been cancelled, or
                if it was a single-shot timer whose message was already received.
            </summary>
            <param name="name">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.SetStateTimeout(`0,System.Nullable{System.TimeSpan})">
            <summary>
                Set the state timeout explicitly. This method can be safely used from
                within a state handler.
            </summary>
            <param name="state">TBD</param>
            <param name="timeout">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.OnTransition(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.TransitionHandler)">
            <summary>
                Set handler which is called upon each state transition, i.e. not when
                staying in the same state.
            </summary>
            <param name="transitionHandler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.OnTermination(System.Action{Akka.Actor.FSMBase.StopEvent{`0,`1}})">
            <summary>
                Set the handler which is called upon termination of this FSM actor. Calling this
                method again will overwrite the previous contents.
            </summary>
            <param name="terminationHandler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.WhenUnhandled(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.StateFunction)">
            <summary>
                Set handler which is called upon reception of unhandled FSM messages. Calling
                this method again will overwrite the previous contents.
            </summary>
            <param name="stateFunction">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Initialize">
            <summary>
                <para>
                Verify the existence of initial state and setup timers. Used in
                <see cref="T:Akka.Persistence.Fsm.PersistentFSM`3"/> on recovery.
                </para>
                <para>
                An initial _currentState -> _currentState notification will be triggered
                by calling this method.
                </para>
                <para>
                <see cref="M:Akka.Persistence.Fsm.PersistentFSM`3.ReceiveRecover(System.Object)"/>
                </para>
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Transform(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.StateFunction)">
            <summary>
            TBD
            </summary>
            <param name="func">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.OrElse(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.StateFunction,Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.StateFunction)">
            <summary>
                C# port of Scala's orElse method for partial function chaining.
                See http://scalachina.com/api/scala/PartialFunction.html
            </summary>
            <param name="original">The original <see cref="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateFunction" /> to be called</param>
            <param name="fallback">The <see cref="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateFunction" /> to be called if <paramref name="original" /> returns null</param>
            <returns>
                A <see cref="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateFunction" /> which combines both the results of <paramref name="original" /> and
                <paramref name="fallback" />
            </returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.ProcessMsg(System.Object,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="any">TBD</param>
            <param name="source">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.ApplyState(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State)">
            <summary>
            TBD
            </summary>
            <param name="upcomingState">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.ReceiveCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Terminate(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State)">
            <summary>
            TBD
            </summary>
            <param name="upcomingState">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.PostStop">
            <summary>
                Call the <see cref="M:Akka.Persistence.Fsm.PersistentFSMBase`3.OnTermination(System.Action{Akka.Actor.FSMBase.StopEvent{`0,`1}})" /> hook if you want to retain this behavior.
                When overriding make sure to call base.PostStop();
                Please note that this method is called by default from <see cref="M:Akka.Actor.ActorBase.PreRestart(System.Exception,System.Object)" /> so
                override that one if <see cref="M:Akka.Persistence.Fsm.PersistentFSMBase`3.OnTermination(System.Action{Akka.Actor.FSMBase.StopEvent{`0,`1}})" /> shall not be called during restart.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.LogTermination(Akka.Actor.FSMBase.Reason)">
            <summary>
                By default, <see cref="T:Akka.Actor.Failure" /> is logged at error level and other
                reason types are not logged. It is possible to override this behavior.
            </summary>
            <param name="reason">TBD</param>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.TransformHelper">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.TransformHelper.#ctor(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.StateFunction)">
            <summary>
            TBD
            </summary>
            <param name="func">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.TransformHelper.Func">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.TransformHelper.Using(System.Func{Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State,Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State})">
            <summary>
            TBD
            </summary>
            <param name="andThen">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateChangeEvent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.StateChangeEvent.#ctor(`0,System.Nullable{System.TimeSpan})">
            <summary>
            TBD
            </summary>
            <param name="state">TBD</param>
            <param name="timeOut">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.StateChangeEvent.State">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.StateChangeEvent.TimeOut">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.StateTimeout">
            <summary>
                Used in the event of a timeout between transitions
            </summary>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.TimeoutMarker">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.TimeoutMarker.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="generation">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.TimeoutMarker.Generation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.#ctor(System.String,System.Object,System.Boolean,System.Int32,Akka.Actor.IActorContext,Akka.Event.ILoggingAdapter)">
            <summary>
            TBD
            </summary>
            <param name="name">TBD</param>
            <param name="message">TBD</param>
            <param name="repeat">TBD</param>
            <param name="generation">TBD</param>
            <param name="context">TBD</param>
            <param name="debugLog">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Name">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Repeat">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Generation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Context">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Schedule(Akka.Actor.IActorRef,System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="actor">TBD</param>
            <param name="timeout">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.Timer.Cancel">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3">
            <summary>
                This captures all of the managed state of the <see cref="T:Akka.Persistence.Fsm.PersistentFSM`3" />: the state name,
                the state data, possibly custom timeout, stop reason, and replies accumulated while
                processing the last message.
            </summary>
            <typeparam name="TS">TBD</typeparam>
            <typeparam name="TD">TBD</typeparam>
            <typeparam name="TE">TBD</typeparam>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.#ctor(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State)">
            <summary>
            TBD
            </summary>
            <param name="state">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.#ctor(`0,`1,System.Nullable{System.TimeSpan},Akka.Actor.FSMBase.Reason,System.Collections.Generic.List{System.Object},Akka.Util.ILinearSeq{`2},System.Action{`1})">
            <summary>
            TBD
            </summary>
            <param name="stateName">TBD</param>
            <param name="stateData">TBD</param>
            <param name="timeout">TBD</param>
            <param name="stopReason">TBD</param>
            <param name="replies">TBD</param>
            <param name="domainEvents">TBD</param>
            <param name="afterTransitionDo">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.op_Implicit(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State{`3,`4,`5})~Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State">
            <summary>
            Converts original object to wrapper
            </summary>
            <param name="state">The original object</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.op_Implicit(Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State)~Akka.Persistence.Fsm.PersistentFSMBase{`0,`1,`2}.State{`3,`4,`5}">
            <summary>
            Converts original object to wrapper
            </summary>
            <param name="state">The original object</param>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.AfterTransitionHandler">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.DomainEvents">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Notifies">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Applying(Akka.Util.ILinearSeq{`2})">
            <summary>
            TBD
            </summary>
            <param name="events">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Applying(`2)">
            <summary>
                Specify domain event to be applied when transitioning to the new state.
            </summary>
            <param name="e">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.AndThen(System.Action{`1})">
            <summary>
                Register a handler to be triggered after the state has been persisted successfully
            </summary>
            <param name="handler">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Copy(System.Nullable{System.TimeSpan},Akka.Actor.FSMBase.Reason,System.Collections.Generic.List{System.Object},Akka.Util.ILinearSeq{`2},System.Action{`1})">
            <summary>
            TBD
            </summary>
            <param name="timeout">TBD</param>
            <param name="stopReason">TBD</param>
            <param name="replies">TBD</param>
            <param name="domainEvents">TBD</param>
            <param name="afterTransitionDo">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Using(`1)">
            <summary>
                Modify state transition descriptor with new state data. The data will be set
                when transitioning to the new state.
            </summary>
            <param name="nextStateData">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Replying(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="replyValue">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.ForMax(System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="timeout">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Replies">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.StateName">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.StateData">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.Timeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State`3.StopReason">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Fsm.PersistentFSMBase`3.State">
            <summary>
                This captures all of the managed state of the <see cref="T:Akka.Persistence.Fsm.PersistentFSM`3" />: the state name,
                the state data, possibly custom timeout, stop reason, and replies accumulated while
                processing the last message.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State.AfterTransitionHandler">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.#ctor(`0,`1,System.Nullable{System.TimeSpan},Akka.Actor.FSMBase.Reason,System.Collections.Generic.IReadOnlyList{System.Object},Akka.Util.ILinearSeq{`2},System.Action{`1})">
            <summary>
            TBD
            </summary>
            <param name="stateName">TBD</param>
            <param name="stateData">TBD</param>
            <param name="timeout">TBD</param>
            <param name="stopReason">TBD</param>
            <param name="replies">TBD</param>
            <param name="domainEvents">TBD</param>
            <param name="afterTransitionDo">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State.DomainEvents">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Fsm.PersistentFSMBase`3.State.Notifies">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.Applying(Akka.Util.ILinearSeq{`2})">
            <summary>
                Specify domain events to be applied when transitioning to the new state.
            </summary>
            <param name="events">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.Applying(`2)">
            <summary>
                Specify domain event to be applied when transitioning to the new state.
            </summary>
            <param name="e">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.AndThen(System.Action{`1})">
            <summary>
                Register a handler to be triggered after the state has been persisted successfully
            </summary>
            <param name="handler">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.Copy(System.Nullable{System.TimeSpan},Akka.Actor.FSMBase.Reason,System.Collections.Generic.IReadOnlyList{System.Object},Akka.Util.ILinearSeq{`2},System.Action{`1})">
            <summary>
            TBD
            </summary>
            <param name="timeout">TBD</param>
            <param name="stopReason">TBD</param>
            <param name="replies">TBD</param>
            <param name="domainEvents">TBD</param>
            <param name="afterTransitionDo">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.Using(`1)">
            <summary>
                Modify state transition descriptor with new state data. The data will be set
                when transitioning to the new state.
            </summary>
            <param name="nextStateData">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.Replying(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="replyValue">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.ForMax(System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="timeout">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Fsm.PersistentFSMBase`3.State.WithStopReason(Akka.Actor.FSMBase.Reason)">
            <summary>
                INTERNAL API
            </summary>
            <param name="reason">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.InternalExtensions">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.InternalExtensions.EnqueueMessageFirst(Akka.Actor.IActorContext,System.Object)">
            <summary>
            Enqueues provided <paramref name="message"/> at the beginning of the internal actor cell mailbox message queue.
            Requires current actor to use unbounded deque-based message queue. It will fail otherwise.
            </summary>
            <param name="context">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="T:Akka.Persistence.Journal.IEventAdapter">
             <summary>
             <para>An <see cref="T:Akka.Persistence.Journal.IEventAdapter"/> is both a <see cref="T:Akka.Persistence.Journal.IWriteEventAdapter"/> and a <see cref="T:Akka.Persistence.Journal.IReadEventAdapter"/>.
             Facility to convert from and to specialised data models, as may be required by specialized persistence Journals.</para>
            
             <para>Typical use cases include (but are not limited to):</para>
             <para>- adding metadata, a.k.a. "tagging" - by wrapping objects into tagged counterparts</para>
             <para>- manually converting to the Journals storage format, such as JSON, BSON or any specialised binary format</para>
             <para>- adapting incoming events in any way before persisting them by the journal</para>
             </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.IWriteEventAdapter">
             <summary>
             <para>Facility to convert to specialised data models, as may be required by specialized persistence Journals.</para>
            
             <para>Typical use cases include (but are not limited to):</para>
             <para>- adding metadata, a.k.a. "tagging" - by wrapping objects into tagged counterparts</para>
             <para>- manually converting to the Journals storage format, such as JSON, BSON or any specialised binary format</para>
             <para>- splitting up large events into sequences of smaller ones</para>
             </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.IWriteEventAdapter.Manifest(System.Object)">
            <summary>
            Return the manifest (type hint) that will be provided in the <see cref="!:FromJournal"/> method.
            Use empty string if not needed.
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IWriteEventAdapter.ToJournal(System.Object)">
             <summary>
             <para>Convert domain event to journal event type.</para>
            
             <para>Some journal may require a specific type to be returned to them,
             for example if a primary key has to be associated with each event then a journal
             may require adapters to return "EventWithPrimaryKey(event, key)".</para>
            
             <para>The <see cref="M:Akka.Persistence.Journal.IWriteEventAdapter.ToJournal(System.Object)"/> adaptation must be an 1-to-1 transformation.
             It is not allowed to drop incoming events during the `toJournal` adaptation.</para>
             </summary>
             <param name="evt">the application-side domain event to be adapted to the journal model</param>
             <returns>the adapted event object, possibly the same object if no adaptation was performed</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.IReadEventAdapter">
             <summary>
             <para>Facility to convert from specialised data models, as may be required by specialized persistence Journals.</para>
            
             <para>Typical use cases include (but are not limited to):</para>
             <para>- extracting events from "envelopes"</para>
             <para>- manually converting to the Journals storage format, such as JSON, BSON or any specialised binary format</para>
             <para>- adapting incoming events from a "data model" to the "domain model"</para>
             </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.IReadEventAdapter.FromJournal(System.Object,System.String)">
             <summary>
             <para>Convert an event from its journal model to the application's domain model.</para>
            
             <para>One event may be adapter into multiple(or none) events which should be delivered to the <see cref="T:Akka.Persistence.PersistentActor"/>.
             Use the specialised <see cref="M:Akka.Persistence.Journal.EventSequence.Single(System.Object)"/> method to emit exactly one event,
             or <see cref="F:Akka.Persistence.Journal.EventSequence.Empty"/> in case the adapter is not handling this event. Multiple <see cref="T:Akka.Persistence.Journal.IEventAdapter"/> instances are
             applied in order as defined in configuration and their emitted event seqs are concatenated and delivered in order
             to the PersistentActor.</para>
             </summary>
             <param name="evt">event to be adapted before delivering to the PersistentActor</param>
             <param name="manifest">optionally provided manifest(type hint) in case the Adapter has stored one for this event. Use empty string if none.</param>
             <returns>sequence containing the adapted events (possibly zero) which will be delivered to the PersistentActor</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.IdentityEventAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.IdentityEventAdapter.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.IdentityEventAdapter.Manifest(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IdentityEventAdapter.ToJournal(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IdentityEventAdapter.FromJournal(System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <param name="manifest">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.NoopWriteEventAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopWriteEventAdapter.#ctor(Akka.Persistence.Journal.IReadEventAdapter)">
            <summary>
            TBD
            </summary>
            <param name="readEventAdapter">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopWriteEventAdapter.Manifest(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopWriteEventAdapter.ToJournal(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopWriteEventAdapter.FromJournal(System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <param name="manifest">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.NoopReadEventAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopReadEventAdapter.#ctor(Akka.Persistence.Journal.IWriteEventAdapter)">
            <summary>
            TBD
            </summary>
            <param name="writeEventAdapter">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopReadEventAdapter.Manifest(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopReadEventAdapter.ToJournal(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.NoopReadEventAdapter.FromJournal(System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <param name="manifest">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.CombinedReadEventAdapter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.CombinedReadEventAdapter.Adapters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.CombinedReadEventAdapter.#ctor(System.Collections.Generic.IEnumerable{Akka.Persistence.Journal.IEventAdapter})">
            <summary>
            TBD
            </summary>
            <param name="adapters">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.CombinedReadEventAdapter.Manifest(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <exception cref="T:Akka.Pattern.IllegalStateException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.CombinedReadEventAdapter.ToJournal(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <exception cref="T:Akka.Pattern.IllegalStateException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.CombinedReadEventAdapter.FromJournal(System.Object,System.String)">
            <summary>
            TBD
            </summary>
            <param name="evt">TBD</param>
            <param name="manifest">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.IdentityEventAdapters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.IdentityEventAdapters.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.IdentityEventAdapters.Get(System.Type)">
            <summary>
            TBD
            </summary>
            <param name="type">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.EventAdapters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.EventAdapters.Create(Akka.Actor.ExtendedActorSystem,Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="config">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.EventAdapters.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Akka.Persistence.Journal.IEventAdapter},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,Akka.Persistence.Journal.IEventAdapter}},Akka.Event.ILoggingAdapter)">
            <summary>
            TBD
            </summary>
            <param name="map">TBD</param>
            <param name="bindings">TBD</param>
            <param name="log">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.EventAdapters.Get``1">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.EventAdapters.Get(System.Type)">
            <summary>
            TBD
            </summary>
            <param name="type">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.IEventSequence">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.IEventSequence.Events">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.IEmptyEventSequence">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.EmptyEventSequence">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.EmptyEventSequence.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.EmptyEventSequence.Events">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.EmptyEventSequence.Equals(Akka.Persistence.Journal.IEventSequence)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.EmptyEventSequence.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.EventSequence`1">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
        </member>
        <member name="M:Akka.Persistence.Journal.EventSequence`1.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="events">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.EventSequence`1.Events">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.EventSequence`1.Equals(Akka.Persistence.Journal.IEventSequence)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.EventSequence`1.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.SingleEventSequence">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.SingleEventSequence.#ctor(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="e">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.SingleEventSequence.Events">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.SingleEventSequence.Equals(Akka.Persistence.Journal.IEventSequence)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.SingleEventSequence.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.EventSequence">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.EventSequence.Empty">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.EventSequence.Single(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="e">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.EventSequence.Create(System.Object[])">
            <summary>
            TBD
            </summary>
            <param name="events">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.EventSequence.Create(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="events">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.PersistencePluginProxy">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.PersistencePluginProxy.TargetLocation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxy.TargetLocation.#ctor(Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="address">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.PersistencePluginProxy.TargetLocation.Address">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxy.SetTargetLocation(Akka.Actor.ActorSystem,Akka.Actor.Address)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="address">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxy.Start(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxy.#ctor(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
            <exception cref="T:System.ArgumentException">TBD</exception>
        </member>
        <member name="P:Akka.Persistence.Journal.PersistencePluginProxy.Stash">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxy.PreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxy.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.PersistencePluginProxyExtension">
            <summary>
            <see cref="T:Akka.Persistence.Journal.PersistencePluginProxyExtension"/> is an <see cref="T:Akka.Actor.IExtension"/> that enables initialization
            of the <see cref="T:Akka.Persistence.Journal.PersistencePluginProxy"/> via configuration, without requiring any code changes or the
            creation of any actors.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxyExtension.#ctor(Akka.Actor.ActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.PersistencePluginProxyExtension.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.ReplayFilterMode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.ReplayFilterMode.Fail">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.ReplayFilterMode.Warn">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.ReplayFilterMode.RepairByDiscardOld">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.ReplayFilterMode.Disabled">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.ReplayFilter">
            <summary>
            Detect corrupt event stream during replay. It uses the <see cref="P:Akka.Persistence.IPersistentRepresentation.WriterGuid"/> and the
            <see cref="P:Akka.Persistence.IPersistentRepresentation.SequenceNr"/> in the replayed events to find events emitted by overlapping writers.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.ReplayFilter.#ctor(Akka.Actor.IActorRef,Akka.Persistence.Journal.ReplayFilterMode,System.Int32,System.Int32,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="persistentActor">TBD</param>
            <param name="mode">TBD</param>
            <param name="windowSize">TBD</param>
            <param name="maxOldWriters">TBD</param>
            <param name="debugEnabled">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.ReplayFilter.Props(Akka.Actor.IActorRef,Akka.Persistence.Journal.ReplayFilterMode,System.Int32,System.Int32,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="persistentActor">TBD</param>
            <param name="mode">TBD</param>
            <param name="windowSize">TBD</param>
            <param name="maxOldWriters">TBD</param>
            <param name="debugEnabled">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown for a number of reasons. These include:
            <ul>
            <li>The specified <paramref name="windowSize"/> is less than or equal to zero.</li>
            <li>The specified <paramref name="maxOldWriters"/> is less than or equal to zero.</li>
            <li>The specified <paramref name="mode"/> is <see cref="F:Akka.Persistence.Journal.ReplayFilterMode.Disabled"/>.</li>
            </ul>
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Persistence.Journal.ReplayFilter.PersistentActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.ReplayFilter.Mode">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.ReplayFilter.WindowSize">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.ReplayFilter.MaxOldWriters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.ReplayFilter.DebugEnabled">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.ReplayFilter.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the <see cref="P:Akka.Persistence.Journal.ReplayFilter.Mode"/> is set to <see cref="F:Akka.Persistence.Journal.ReplayFilterMode.Disabled"/>.
            </exception>
            <exception cref="T:Akka.Pattern.IllegalStateException">
            This exception is thrown when either the replayed event is in the wrong order or from an old writer.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.Tagged">
            <summary>
            The journal may support tagging of events that are used by the
            `EventsByTag` query and it may support specifying the tags via an
            <see cref="T:Akka.Persistence.Journal.IEventAdapter"/> that wraps the events
            in a <see cref="T:Akka.Persistence.Journal.Tagged"/> with the given <see cref="F:Akka.Persistence.Journal.Tagged.Tags"/>. The journal may support other
            ways of doing tagging. Please consult the documentation of the specific
            journal implementation for more information.
            The journal will unwrap the event and store the <see cref="F:Akka.Persistence.Journal.Tagged.Payload"/>.
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.Tagged.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.Tagged.Tags">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.Tagged.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <param name="tags">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.Tagged.#ctor(System.Object,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <param name="tags">TBD</param>
        </member>
        <member name="T:Akka.Persistence.Journal.IAsyncRecovery">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.IAsyncRecovery.ReplayMessagesAsync(Akka.Actor.IActorContext,System.String,System.Int64,System.Int64,System.Int64,System.Action{Akka.Persistence.IPersistentRepresentation})">
            <summary>
            Asynchronously replays persistent messages. Implementations replay
            a message by calling <paramref name="recoveryCallback"/>. The returned task must be completed
            when all messages (matching the sequence number bounds) have been replayed.
            The task must be completed with a failure if any of the persistent messages
            could not be replayed.
            
            The <paramref name="toSequenceNr"/> is the lowest of what was returned by
            <see cref="M:Akka.Persistence.Journal.IAsyncRecovery.ReadHighestSequenceNrAsync(System.String,System.Int64)"/> and what the user specified as recovery
            <see cref="T:Akka.Persistence.Recovery"/> parameter.
            This does imply that this call is always preceded by reading the highest sequence number
            for the given <paramref name="persistenceId"/>.
            
            This call is NOT protected with a circuit-breaker because it may take a long time
            to replay all events. The plugin implementation itself must protect against an
            unresponsive backend store and make sure that the returned <see cref="T:System.Threading.Tasks.Task"/>
            is completed with success or failure within reasonable time. It is not allowed to
            ignore completing the <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="context">The contextual information about the actor processing replayed messages.</param>
            <param name="persistenceId">Persistent actor identifier</param>
            <param name="fromSequenceNr">Inclusive sequence number where replay should start</param>
            <param name="toSequenceNr">Inclusive sequence number where replay should end</param>
            <param name="max">Maximum number of messages to be replayed</param>
            <param name="recoveryCallback">Called to replay a message, may be called from any thread.</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IAsyncRecovery.ReadHighestSequenceNrAsync(System.String,System.Int64)">
            <summary>
            Asynchronously reads the highest stored sequence number for provided <paramref name="persistenceId"/>.
            The persistent actor will use the highest sequence number after recovery as the starting point when
            persisting new events.
            This sequence number is also used as `toSequenceNr` in subsequent calls to
            <see cref="M:Akka.Persistence.Journal.IAsyncRecovery.ReplayMessagesAsync(Akka.Actor.IActorContext,System.String,System.Int64,System.Int64,System.Int64,System.Action{Akka.Persistence.IPersistentRepresentation})"/> unless the user has specified a lower `toSequenceNr`.
            Journal must maintain the highest sequence number and never decrease it.
            
            This call is protected with a circuit-breaker.
            
            Please also not that requests for the highest sequence number may be made concurrently
            to writes executing for the same <paramref name="persistenceId"/>, in particular it is
            possible that a restarting actor tries to recover before its outstanding writes have completed.
            </summary>
            <param name="persistenceId">Persistent actor identifier</param>
            <param name="fromSequenceNr">Hint where to start searching for the highest sequence number.
            When a persistent actor is recovering this <paramref name="fromSequenceNr"/> will the sequence
            number of the used snapshot, or `0L` if no snapshot is used.</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteJournal">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.AsyncWriteJournal.CanPublish">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Journal.AsyncWriteJournal"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the Persistence extension related to this journal has not been used in the current <see cref="T:Akka.Actor.ActorSystem"/> contexxt.
            </exception>
            <exception cref="T:Akka.Configuration.ConfigurationException">
            This exception is thrown when an invalid <c>replay-filter.mode</c> is read from the configuration.
            Acceptable <c>replay-filter.mode</c> values include: off | repair-by-discard-old | fail | warn
            </exception>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.ReplayMessagesAsync(Akka.Actor.IActorContext,System.String,System.Int64,System.Int64,System.Int64,System.Action{Akka.Persistence.IPersistentRepresentation})">
            <summary>
            TBD
            </summary>
            <param name="context">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <param name="max">TBD</param>
            <param name="recoveryCallback">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.ReadHighestSequenceNrAsync(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.WriteMessagesAsync(System.Collections.Generic.IEnumerable{Akka.Persistence.AtomicWrite})">
            <summary>
            Plugin API: asynchronously writes a batch of persistent messages to the
            journal.
            
            The batch is only for performance reasons, i.e. all messages don't have to be written
            atomically. Higher throughput can typically be achieved by using batch inserts of many
            records compared to inserting records one-by-one, but this aspect depends on the
            underlying data store and a journal implementation can implement it as efficient as
            possible. Journals should aim to persist events in-order for a given `persistenceId`
            as otherwise in case of a failure, the persistent state may be end up being inconsistent.
            
            Each <see cref="T:Akka.Persistence.AtomicWrite"/> message contains the single <see cref="T:Akka.Persistence.Persistent"/>
            that corresponds to the event that was passed to the 
            <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/> method of the
            <see cref="T:Akka.Persistence.PersistentActor" />, or it contains several <see cref="T:Akka.Persistence.Persistent"/>
            that correspond to the events that were passed to the
            <see cref="M:Akka.Persistence.Eventsourced.PersistAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>
            method of the <see cref="T:Akka.Persistence.PersistentActor"/>. All <see cref="T:Akka.Persistence.Persistent"/> of the
            <see cref="T:Akka.Persistence.AtomicWrite"/> must be written to the data store atomically, i.e. all or none must
            be stored. If the journal (data store) cannot support atomic writes of multiple
            events it should reject such writes with a <see cref="T:System.NotSupportedException"/>
            describing the issue. This limitation should also be documented by the journal plugin.
            
            If there are failures when storing any of the messages in the batch the returned
            <see cref="T:System.Threading.Tasks.Task"/> must be completed with failure. The <see cref="T:System.Threading.Tasks.Task"/> must only be completed with
            success when all messages in the batch have been confirmed to be stored successfully,
            i.e. they will be readable, and visible, in a subsequent replay. If there is
            uncertainty about if the messages were stored or not the <see cref="T:System.Threading.Tasks.Task"/> must be completed
            with failure.
            
            Data store connection problems must be signaled by completing the <see cref="T:System.Threading.Tasks.Task"/> with
            failure.
            
            The journal can also signal that it rejects individual messages (<see cref="T:Akka.Persistence.AtomicWrite"/>) by
            the returned <see cref="T:System.Threading.Tasks.Task"/>. It is possible but not mandatory to reduce
            number of allocations by returning null for the happy path,
            i.e. when no messages are rejected. Otherwise the returned list must have as many elements
            as the input <paramref name="messages"/>. Each result element signals if the corresponding
            <see cref="T:Akka.Persistence.AtomicWrite"/> is rejected or not, with an exception describing the problem. Rejecting
            a message means it was not stored, i.e. it must not be included in a later replay.
            Rejecting a message is typically done before attempting to store it, e.g. because of
            serialization error.
            
            Data store connection problems must not be signaled as rejections.
            
            It is possible but not mandatory to reduce number of allocations by returning
            null for the happy path, i.e. when no messages are rejected.
            
            Calls to this method are serialized by the enclosing journal actor. If you spawn
            work in asyncronous tasks it is alright that they complete the futures in any order,
            but the actual writes for a specific persistenceId should be serialized to avoid
            issues such as events of a later write are visible to consumers (query side, or replay)
            before the events of an earlier write are visible.
            A <see cref="T:Akka.Persistence.PersistentActor"/> will not send a new <see cref="T:Akka.Persistence.WriteMessages"/> request before
            the previous one has been completed.
            
            Please not that the <see cref="P:Akka.Persistence.IPersistentRepresentation.Sender"/> of the contained
            <see cref="T:Akka.Persistence.Persistent"/> objects has been nulled out (i.e. set to <see cref="F:Akka.Actor.ActorRefs.NoSender"/>
            in order to not use space in the journal for a sender reference that will likely be obsolete
            during replay.
            
            Please also note that requests for the highest sequence number may be made concurrently
            to this call executing for the same `persistenceId`, in particular it is possible that
            a restarting actor tries to recover before its outstanding writes have completed.
            In the latter case it is highly desirable to defer reading the highest sequence number
            until all outstanding writes have completed, otherwise the <see cref="T:Akka.Persistence.PersistentActor"/>
            may reuse sequence numbers.
            
            This call is protected with a circuit-breaker.
            </summary>
            <param name="messages">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.DeleteMessagesToAsync(System.String,System.Int64)">
            <summary>
            Asynchronously deletes all persistent messages up to inclusive <paramref name="toSequenceNr"/>
            bound.
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.ReceivePluginInternal(System.Object)">
            <summary>
            Allows plugin implementers to use <see cref="M:Akka.Actor.PipeToSupport.PipeTo``1(System.Threading.Tasks.Task{``0},Akka.Actor.ICanTell,Akka.Actor.IActorRef,System.Func{``0,System.Object},System.Func{System.Exception,System.Object})"/> <see cref="P:Akka.Actor.ActorBase.Self"/>
            and handle additional messages for implementing advanced features
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.ReceiveWriteJournal(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.TryUnwrapException(System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="e">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteJournal.Desequenced">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.Desequenced.#ctor(System.Object,System.Int64,Akka.Actor.IActorRef,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <param name="sequenceNr">TBD</param>
            <param name="target">TBD</param>
            <param name="sender">TBD</param>
        </member>
        <member name="F:Akka.Persistence.Journal.AsyncWriteJournal.Desequenced.Message">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.AsyncWriteJournal.Desequenced.SequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.AsyncWriteJournal.Desequenced.Target">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Journal.AsyncWriteJournal.Desequenced.Sender">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteJournal.Resequencer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteJournal.Resequencer.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncReplayTimeoutException">
            <summary>
            This exception is thrown when the replay inactivity exceeds a specified timeout.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncReplayTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Journal.AsyncReplayTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncReplayTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Journal.AsyncReplayTimeoutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncReplayTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Journal.AsyncReplayTimeoutException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Persistence.Journal.SetStore">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.SetStore.#ctor(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="store">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="store"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.Journal.SetStore.Store">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteTarget">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteTarget.ReplayFailure">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.ReplayFailure.#ctor(System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <exception cref="T:System.ArgumentNullException">TBD</exception>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.ReplayFailure.Cause">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteTarget.ReplaySuccess">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.ReplaySuccess.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="highestSequenceNr">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.ReplaySuccess.HighestSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.ReplaySuccess.Equals(Akka.Persistence.Journal.AsyncWriteTarget.ReplaySuccess)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteTarget.WriteMessages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.WriteMessages.#ctor(System.Collections.Generic.IEnumerable{Akka.Persistence.AtomicWrite})">
            <summary>
            TBD
            </summary>
            <param name="messages">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.WriteMessages.Messages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages.#ctor(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <param name="max">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages.FromSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages.ToSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages.Max">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages.Equals(Akka.Persistence.Journal.AsyncWriteTarget.ReplayMessages)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteTarget.DeleteMessagesTo">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.DeleteMessagesTo.#ctor(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.DeleteMessagesTo.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteTarget.DeleteMessagesTo.ToSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteTarget.DeleteMessagesTo.Equals(Akka.Persistence.Journal.AsyncWriteTarget.DeleteMessagesTo)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteProxy">
            <summary>
            A journal that delegates actual storage to a target actor. For testing only.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteProxy.Timeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.AroundPreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.AroundReceive(Akka.Actor.Receive,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.WriteMessagesAsync(System.Collections.Generic.IEnumerable{Akka.Persistence.AtomicWrite})">
            <summary>
            TBD
            </summary>
            <param name="messages">TBD</param>
            <exception cref="T:System.TimeoutException">
            This exception is thrown when the store has not been initialized.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.DeleteMessagesToAsync(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <exception cref="T:System.TimeoutException">
            This exception is thrown when the store has not been initialized.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.ReplayMessagesAsync(Akka.Actor.IActorContext,System.String,System.Int64,System.Int64,System.Int64,System.Action{Akka.Persistence.IPersistentRepresentation})">
            <summary>
            TBD
            </summary>
            <param name="context">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <param name="max">TBD</param>
            <param name="recoveryCallback">TBD</param>
            <exception cref="T:System.TimeoutException">
            This exception is thrown when the store has not been initialized.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.AsyncWriteProxy.ReadHighestSequenceNrAsync(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <exception cref="T:System.TimeoutException">
            This exception is thrown when the store has not been initialized.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteProxy.Stash">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.AsyncWriteProxy.InitTimeout">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.AsyncWriteProxy.InitTimeout.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.ReplayMediator">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.ReplayMediator.#ctor(System.Action{Akka.Persistence.IPersistentRepresentation},System.Threading.Tasks.TaskCompletionSource{System.Object},System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="replayCallback">TBD</param>
            <param name="replayCompletionPromise">TBD</param>
            <param name="replayTimeout">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Journal.ReplayMediator.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <exception cref="T:Akka.Persistence.Journal.AsyncReplayTimeoutException">
            This exception is thrown when the replay timed out due to inactivity.
            </exception>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.IMemoryMessages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.IMemoryMessages.Add(Akka.Persistence.IPersistentRepresentation)">
            <summary>
            TBD
            </summary>
            <param name="persistent">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IMemoryMessages.Update(System.String,System.Int64,System.Func{Akka.Persistence.IPersistentRepresentation,Akka.Persistence.IPersistentRepresentation})">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <param name="seqNr">TBD</param>
            <param name="updater">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IMemoryMessages.Delete(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <param name="seqNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IMemoryMessages.Read(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <param name="fromSeqNr">TBD</param>
            <param name="toSeqNr">TBD</param>
            <param name="max">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.IMemoryMessages.HighestSequenceNr(System.String)">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.MemoryJournal">
            <summary>
            In-memory journal for testing purposes.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.MemoryJournal.Messages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.WriteMessagesAsync(System.Collections.Generic.IEnumerable{Akka.Persistence.AtomicWrite})">
            <summary>
            TBD
            </summary>
            <param name="messages">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.ReadHighestSequenceNrAsync(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.ReplayMessagesAsync(Akka.Actor.IActorContext,System.String,System.Int64,System.Int64,System.Int64,System.Action{Akka.Persistence.IPersistentRepresentation})">
            <summary>
            TBD
            </summary>
            <param name="context">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="fromSequenceNr">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <param name="max">TBD</param>
            <param name="recoveryCallback">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.DeleteMessagesToAsync(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.Add(Akka.Persistence.IPersistentRepresentation)">
            <summary>
            TBD
            </summary>
            <param name="persistent">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.Update(System.String,System.Int64,System.Func{Akka.Persistence.IPersistentRepresentation,Akka.Persistence.IPersistentRepresentation})">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <param name="seqNr">TBD</param>
            <param name="updater">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.Delete(System.String,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <param name="seqNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.Read(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <param name="fromSeqNr">TBD</param>
            <param name="toSeqNr">TBD</param>
            <param name="max">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.MemoryJournal.HighestSequenceNr(System.String)">
            <summary>
            TBD
            </summary>
            <param name="pid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Journal.SharedMemoryJournal">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Journal.SharedMemoryJournal.Messages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Journal.WriteJournalBase">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.WriteJournalBase.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Journal.WriteJournalBase.PreparePersistentBatch(System.Collections.Generic.IEnumerable{Akka.Persistence.IPersistentEnvelope})">
            <summary>
            TBD
            </summary>
            <param name="resequencables">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.WriteJournalBase.AdaptFromJournal(Akka.Persistence.IPersistentRepresentation)">
            <summary>
            TBD
            </summary>
            <param name="representation">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Journal.WriteJournalBase.AdaptToJournal(Akka.Persistence.IPersistentRepresentation)">
            <summary>
            TBD
            </summary>
            <param name="representation">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.RecoveryCompleted">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.RecoveryCompleted.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.RecoveryCompleted.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Recovery">
            <summary>
            Recovery mode configuration object to be return in <see cref="!:PersistentActor.get_Recovery()"/>
            
            By default recovers from latest snashot replays through to the last available event (last sequenceNr).
            
            Recovery will start from a snapshot if the persistent actor has previously saved one or more snapshots
            and at least one of these snapshots matches the specified <see cref="P:Akka.Persistence.Recovery.FromSnapshot"/> criteria.
            Otherwise, recovery will start from scratch by replaying all stored events.
            
            If recovery starts from a snapshot, the <see cref="T:Akka.Persistence.PersistentActor"/> is offered that snapshot with a
            <see cref="T:Akka.Persistence.SnapshotOffer"/> message, followed by replayed messages, if any, that are younger than the snapshot, up to the
            specified upper sequence number bound (<see cref="P:Akka.Persistence.Recovery.ToSequenceNr"/>).
            </summary>
        </member>
        <member name="F:Akka.Persistence.Recovery.Default">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Recovery.None">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Recovery.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Recovery.#ctor(Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="fromSnapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Recovery.#ctor(Akka.Persistence.SnapshotSelectionCriteria,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="fromSnapshot">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Recovery.#ctor(Akka.Persistence.SnapshotSelectionCriteria,System.Int64,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="fromSnapshot">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <param name="replayMax">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Recovery.FromSnapshot">
            <summary>
            Criteria for selecting a saved snapshot from which recovery should start. Default is latest (= youngest) snapshot.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Recovery.ToSequenceNr">
            <summary>
            Upper, inclusive sequence number bound for recovery. Default is no upper bound.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Recovery.ReplayMax">
            <summary>
            Maximum number of messages to replay. Default is no limit.
            </summary>
        </member>
        <member name="T:Akka.Persistence.RecoveryTimedOutException">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.RecoveryTimedOutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.RecoveryTimedOutException"/> class.
            </summary>
        </member>
        <member name="M:Akka.Persistence.RecoveryTimedOutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.RecoveryTimedOutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="cause">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Persistence.RecoveryTimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.RecoveryTimedOutException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Akka.Persistence.IStashOverflowStrategy">
            <summary>
            This defines how to handle the current received message which failed to stash, when the size
            of the Stash exceeding the capacity of the Stash.
            </summary>
        </member>
        <member name="T:Akka.Persistence.DiscardToDeadLetterStrategy">
            <summary>
            Discard the message to <see cref="T:Akka.Actor.DeadLetterActorRef"/>
            </summary>
        </member>
        <member name="F:Akka.Persistence.DiscardToDeadLetterStrategy.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.ThrowOverflowExceptionStrategy">
            <summary>
            Throw <see cref="T:Akka.Actor.StashOverflowException"/>, hence the persistent actor will start recovery
            if guarded by default supervisor strategy.
            Be careful if used together with <see cref="M:Akka.Persistence.Eventsourced.Persist``1(``0,System.Action{``0})"/>
            or <see cref="M:Akka.Persistence.Eventsourced.PersistAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>
            or has many messages needed to replay.
            </summary>
        </member>
        <member name="F:Akka.Persistence.ThrowOverflowExceptionStrategy.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.ReplyToStrategy">
            <summary>
            Reply to sender with predefined response, and discard the received message silently.
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplyToStrategy.#ctor(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="response">TBD</param>
        </member>
        <member name="P:Akka.Persistence.ReplyToStrategy.Response">
            <summary>
            The message replying to sender with
            </summary>
        </member>
        <member name="T:Akka.Persistence.IStashOverflowStrategyConfigurator">
            <summary>
            Implement this interface in order to configure the <see cref="T:Akka.Persistence.IStashOverflowStrategy"/>
            for the internal stash of the persistent actor.
            An instance of this class must be instantiable using a no-args constructor.
            </summary>
        </member>
        <member name="M:Akka.Persistence.IStashOverflowStrategyConfigurator.Create(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.ThrowExceptionConfigurator">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ThrowExceptionConfigurator.Create(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.DiscardConfigurator">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DiscardConfigurator.Create(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.PersistentActor">
            <summary>
            Persistent actor - can be used to implement command or eventsourcing.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentActor.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.UntypedPersistentActor">
            <summary>
            Persistent actor - can be used to implement command or eventsourcing.
            </summary>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.ReceiveCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.ReceiveRecover(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.OnCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.OnRecover(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.Become(Akka.Actor.UntypedReceive)">
            <summary>
            Changes the actor's behavior and replaces the current receive handler with the specified handler.
            </summary>
            <param name="receive">The new message handler.</param>
        </member>
        <member name="M:Akka.Persistence.UntypedPersistentActor.BecomeStacked(Akka.Actor.UntypedReceive)">
            <summary>
            Changes the actor's behavior and replaces the current receive handler with the specified handler.
            The current handler is stored on a stack, and you can revert to it by calling <see cref="M:Akka.Actor.IActorContext.UnbecomeStacked"/>
            <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="M:Akka.Persistence.UntypedPersistentActor.BecomeStacked(Akka.Actor.UntypedReceive)"/>
            is matched with a call to <see cref="M:Akka.Actor.IActorContext.UnbecomeStacked"/>.</remarks>
            </summary>
            <param name="receive">The new message handler.</param>
        </member>
        <member name="P:Akka.Persistence.UntypedPersistentActor.Context">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.ReceivePersistentActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.PrepareConfigureMessageHandlers">
            <summary>
            Creates and pushes a new MatchBuilder
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Become(System.Action)">
            <summary>
            Changes the actor's command behavior and replaces the current receive command handler with the specified handler.
            </summary>
            <param name="configure">Configures the new handler by calling the different Receive overloads.</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.BecomeStacked(System.Action)">
            <summary>
            Changes the actor's command behavior and replaces the current receive command handler with the specified handler.
            The current handler is stored on a stack, and you can revert to it by calling <see cref="M:Akka.Actor.ActorBase.UnbecomeStacked"/>
            <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="M:Akka.Persistence.ReceivePersistentActor.BecomeStacked(System.Action)"/>
            is matched with a call to <see cref="M:Akka.Actor.ActorBase.UnbecomeStacked"/>.</remarks>
            </summary>
            <param name="configure">Configures the new handler by calling the different Command overloads.</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.OnCommand(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.OnRecover(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Recover``1(System.Action{``0},System.Predicate{``0})">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="handler">TBD</param>
            <param name="shouldHandle">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Recover``1(System.Predicate{``0},System.Action{``0})">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="shouldHandle">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Recover(System.Type,System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="messageType">TBD</param>
            <param name="handler">TBD</param>
            <param name="shouldHandle">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Recover(System.Type,System.Predicate{System.Object},System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="messageType">TBD</param>
            <param name="shouldHandle">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Recover``1(System.Func{``0,System.Boolean})">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Recover(System.Type,System.Func{System.Object,System.Boolean})">
            <summary>
            TBD
            </summary>
            <param name="messageType">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.RecoverAny(System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command``1(System.Action{``0},System.Predicate{``0})">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="handler">TBD</param>
            <param name="shouldHandle">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command``1(System.Predicate{``0},System.Action{``0})">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="shouldHandle">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command(System.Type,System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="messageType">TBD</param>
            <param name="handler">TBD</param>
            <param name="shouldHandle">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command(System.Type,System.Predicate{System.Object},System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="messageType">TBD</param>
            <param name="shouldHandle">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command``1(System.Func{``0,System.Boolean})">
            <summary>
            TBD
            </summary>
            <typeparam name="T">TBD</typeparam>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command(System.Type,System.Func{System.Object,System.Boolean})">
            <summary>
            TBD
            </summary>
            <param name="messageType">TBD</param>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.Command(System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="handler">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ReceivePersistentActor.CommandAny(System.Action{System.Object})">
            <summary>
            TBD
            </summary>
            <param name="handler">TBD</param>
        </member>
        <member name="T:Akka.Persistence.ViewState">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ViewState.#ctor(System.String,System.Boolean,Akka.Persistence.StateReceive)">
            <summary>
            TBD
            </summary>
            <param name="name">TBD</param>
            <param name="isRecoveryRunning">TBD</param>
            <param name="stateReceive">TBD</param>
        </member>
        <member name="P:Akka.Persistence.ViewState.Name">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.ViewState.IsRecoveryRunning">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.ViewState.StateReceive">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ViewState.ToString">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.PersistentView">
            <summary>
            TBD
            </summary>
            <summary>
            TBD
            </summary>
            <summary>
            A view replicates the persistent message stream of a <see cref="T:Akka.Persistence.PersistentActor"/>. Implementation classes receive
            the message stream directly from the Journal. These messages can be processed to update internal state
            in order to maintain an (eventual consistent) view of the state of the corresponding persistent actor. A
            persistent view can also run on a different node, provided that a replicated journal is used.
            
            Implementation classes refer to a persistent actors' message stream by implementing `persistenceId`
            with the corresponding (shared) identifier value.
            
            Views can also store snapshots of internal state by calling [[autoUpdate]]. The snapshots of a view
            are independent of those of the referenced persistent actor. During recovery, a saved snapshot is offered
            to the view with a <see cref="T:Akka.Persistence.SnapshotOffer"/> message, followed by replayed messages, if any, that are younger
            than the snapshot. Default is to offer the latest saved snapshot.
            
            By default, a view automatically updates itself with an interval returned by `autoUpdateInterval`.
            This method can be overridden by implementation classes to define a view instance-specific update
            interval. The default update interval for all views of an actor system can be configured with the
            `akka.persistence.view.auto-update-interval` configuration key. Applications may trigger additional
            view updates by sending the view <see cref="T:Akka.Persistence.Update"/> requests. See also methods
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.RecoveryStarted(System.Int64)">
            <summary>
            Processes a loaded snapshot, if any. A loaded snapshot is offered with a <see cref="T:Akka.Persistence.SnapshotOffer"/>
            message to the actor's <see cref="M:Akka.Actor.ActorBase.Receive(System.Object)"/> method. Then initiates a message replay, either 
            starting from the loaded snapshot or from scratch, and switches to <see cref="M:Akka.Persistence.PersistentView.ReplayStarted(System.Boolean)"/> state.
            All incoming messages are stashed.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.ReplayStarted(System.Boolean)">
            <summary>
            Processes replayed message, if any. The actor's <see cref="M:Akka.Actor.ActorBase.Receive(System.Object)"/> is invoked 
            with the replayed events.
            
            If replay succeeds it got highest stored sequence number response from the journal and
            then switche it switches to <see cref="M:Akka.Persistence.PersistentView.Idle"/> state.
            
            
            If replay succeeds the <see cref="!:OnReplaySuccess"/> callback method is called, otherwise
            <see cref="M:Akka.Persistence.PersistentView.OnReplayError(System.Exception)"/> is called and remaining replay events are consumed (ignored).
            
            All incoming messages are stashed when <paramref name="shouldAwait"/> is true.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.OnReplayComplete">
            <summary>
            Switches to <see cref="M:Akka.Persistence.PersistentView.Idle"/>.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.IgnoreRemainingReplay(System.Exception)">
            <summary>
            Consumes remaining replayed messages and then throws the exception.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.Idle">
            <summary>
            When receiving an <see cref="T:Akka.Persistence.Update"/> event, switches to <see cref="M:Akka.Persistence.PersistentView.ReplayStarted(System.Boolean)"/> state
            and triggers an incremental message replay. For any other message invokes actor default behavior.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.PreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.AroundReceive(Akka.Actor.Receive,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="receive">TBD</param>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistentView.AroundPreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.PreRestart(System.Exception,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="reason">TBD</param>
            <param name="message">TBD</param>
        </member>
        <member name="M:Akka.Persistence.PersistentView.PostStop">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.Unhandled(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
        </member>
        <member name="F:Akka.Persistence.PersistentView.Extension">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.JournalPluginId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.SnapshotPluginId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.Journal">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.SnapshotStore">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.ViewId">
            <summary>
            Used as identifier for snapshots performed by this <see cref="T:Akka.Persistence.PersistentView"/>. This allows the View to keep 
            separate snapshots of data than the <see cref="T:Akka.Persistence.PersistentActor"/> originating the message stream.
            
            The usual case is to have a different identifiers for <see cref="P:Akka.Persistence.PersistentView.ViewId"/> and <see cref="P:Akka.Persistence.PersistentView.PersistenceId"/>.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.PersistenceId">
            <summary>
            Id of the persistent entity for which messages should be replayed.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.SnapshotterId">
            <summary>
            Gets the <see cref="P:Akka.Persistence.PersistentView.ViewId"/>.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.IsRecovering">
            <summary>
            Returns true if this persistent view is currently recovering.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.IsRecoveryFinished">
            <summary>
            Returns true if this persistent view has successfully finished recovery.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.IsPersistent">
            <summary>
            If true, the currently processed message was persisted - it sent from the <see cref="P:Akka.Persistence.PersistentView.Journal"/>.
            If false, the currently processed message comes from another actor ('/user/*' path).
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.IsAutoUpdate">
            <summary>
            If true, this view will update itself automatically within an interval specified by <see cref="P:Akka.Persistence.PersistentView.AutoUpdateInterval"/>.
            If false, application must update this view explicitly with <see cref="T:Akka.Persistence.Update"/> requests.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.AutoUpdateInterval">
            <summary>
            Time interval to automatic updates. Used only when <see cref="P:Akka.Persistence.PersistentView.IsAutoUpdate"/> value is true.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.AutoUpdateReplayMax">
            <summary>
            The maximum number of messages to replay per update.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.LastSequenceNr">
            <summary>
            Highest received sequence number so far or 0 it none persistent event has been replayed yet.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.Stash">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.SnapshotSequenceNr">
            <summary>
            Gets last sequence number.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistentView.Recovery">
            <summary>
            Called when the persistent view is started for the first time.
            The returned <see cref="T:Akka.Persistence.Recovery"/> object defines how the actor
            will recover its persistent state behore handling the first incoming message.
            
            To skip recovery completely return <see cref="F:Akka.Persistence.Recovery.None"/>.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistentView.OnReplayError(System.Exception)">
            <summary>
            Called whenever a message replay fails. By default it logs the error.
            Subclass may override to customize logging.
            The <see cref="T:Akka.Persistence.PersistentView"/> will not stop or throw exception due to this.
            It will try again on next update.
            </summary>
            <param name="cause">TBD</param>
        </member>
        <member name="M:Akka.Persistence.PersistentView.LoadSnapshot(System.String,Akka.Persistence.SnapshotSelectionCriteria,System.Int64)">
            <summary>
            Instructs the snapshot store to load the specified snapshot and send it via an
            <see cref="T:Akka.Persistence.SnapshotOffer"/> to the running <see cref="T:Akka.Persistence.PersistentActor"/>.
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.PersistentView.SaveSnapshot(System.Object)">
            <summary>
            Saves <paramref name="snapshot"/> of current <see cref="T:Akka.Persistence.ISnapshotter"/> state.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the success or failure of this
            via an <see cref="T:Akka.Persistence.SaveSnapshotSuccess"/> or <see cref="T:Akka.Persistence.SaveSnapshotFailure"/> message.
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.PersistentView.DeleteSnapshot(System.Int64)">
            <summary>
            Deletes the snapshot identified by <paramref name="sequenceNr"/>.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the status of the deletion
            via an <see cref="T:Akka.Persistence.DeleteSnapshotSuccess"/> or <see cref="T:Akka.Persistence.DeleteSnapshotFailure"/> message.
            </summary>
            <param name="sequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.PersistentView.DeleteSnapshots(Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            Deletes all snapshots matching <paramref name="criteria"/>.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the status of the deletion
            via an <see cref="T:Akka.Persistence.DeleteSnapshotsSuccess"/> or <see cref="T:Akka.Persistence.DeleteSnapshotsFailure"/> message.
            </summary>
            <param name="criteria">TBD</param>
        </member>
        <member name="T:Akka.Persistence.IPersistenceMessage">
            <summary>
            Marker interface for internal persistence extension messages.
            
            Helps persistence plugin developers to differentiate
            internal persistence extension messages from their custom plugin messages.
            
            Journal messages need not be serialization verified as the Journal Actor
            should always be a local Actor (and serialization is performed by plugins).
            One notable exception to this is the shared journal used for testing.
            </summary>
        </member>
        <member name="T:Akka.Persistence.ISnapshotter">
            <summary>
            Snapshot API on top of the internal snapshot protocol.
            </summary>
        </member>
        <member name="P:Akka.Persistence.ISnapshotter.SnapshotterId">
            <summary>
            Snapshotter id.
            </summary>
        </member>
        <member name="P:Akka.Persistence.ISnapshotter.SnapshotSequenceNr">
            <summary>
            Incrementable sequence number to use when taking a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.ISnapshotter.LoadSnapshot(System.String,Akka.Persistence.SnapshotSelectionCriteria,System.Int64)">
            <summary>
            Instructs the snapshot store to load the specified snapshot and send it via an
            <see cref="T:Akka.Persistence.SnapshotOffer"/> to the running <see cref="T:Akka.Persistence.PersistentActor"/>.
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ISnapshotter.SaveSnapshot(System.Object)">
            <summary>
            Saves <paramref name="snapshot"/> of current <see cref="T:Akka.Persistence.ISnapshotter"/> state.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the success or failure of this
            via an <see cref="T:Akka.Persistence.SaveSnapshotSuccess"/> or <see cref="T:Akka.Persistence.SaveSnapshotFailure"/> message.
            </summary>
            <param name="snapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ISnapshotter.DeleteSnapshot(System.Int64)">
            <summary>
            Deletes the snapshot identified by <paramref name="sequenceNr"/>.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the status of the deletion
            via an <see cref="T:Akka.Persistence.DeleteSnapshotSuccess"/> or <see cref="T:Akka.Persistence.DeleteSnapshotFailure"/> message.
            </summary>
            <param name="sequenceNr">TBD</param>
        </member>
        <member name="M:Akka.Persistence.ISnapshotter.DeleteSnapshots(Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            Deletes all snapshots matching <paramref name="criteria"/>.
            
            The <see cref="T:Akka.Persistence.PersistentActor"/> will be notified about the status of the deletion
            via an <see cref="T:Akka.Persistence.DeleteSnapshotsSuccess"/> or <see cref="T:Akka.Persistence.DeleteSnapshotsFailure"/> message.
            </summary>
            <param name="criteria">TBD</param>
        </member>
        <member name="T:Akka.Persistence.IJournalMessage">
            <summary>
            Marker interface for internal journal messages
            </summary>
        </member>
        <member name="T:Akka.Persistence.IJournalRequest">
            <summary>
            Internal journal command
            </summary>
        </member>
        <member name="T:Akka.Persistence.IJournalResponse">
            <summary>
            Internal journal acknowledgement
            </summary>
        </member>
        <member name="T:Akka.Persistence.DeleteMessagesSuccess">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesSuccess.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="F:Akka.Persistence.DeleteMessagesSuccess.ToSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesSuccess.Equals(Akka.Persistence.DeleteMessagesSuccess)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesSuccess.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesSuccess.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesSuccess.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.DeleteMessagesFailure">
            <summary>
            Reply message to failed <see cref="!:DeleteMessages"/> request.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesFailure.#ctor(System.Exception,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="cause">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="cause"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.DeleteMessagesFailure.Cause">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.DeleteMessagesFailure.ToSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesFailure.Equals(Akka.Persistence.DeleteMessagesFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesFailure.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesFailure.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.DeleteMessagesTo">
            <summary>
            Request to delete all persistent messages with sequence numbers up to `toSequenceNr` (inclusive).  
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesTo.#ctor(System.String,System.Int64,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="toSequenceNr">TBD</param>
            <param name="persistentActor">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="persistenceId"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.DeleteMessagesTo.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.DeleteMessagesTo.ToSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.DeleteMessagesTo.PersistentActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesTo.Equals(Akka.Persistence.DeleteMessagesTo)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesTo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesTo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.DeleteMessagesTo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.WriteMessages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessages.#ctor(System.Collections.Generic.IEnumerable{Akka.Persistence.IPersistentEnvelope},Akka.Actor.IActorRef,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="messages">TBD</param>
            <param name="persistentActor">TBD</param>
            <param name="actorInstanceId">TBD</param>
        </member>
        <member name="F:Akka.Persistence.WriteMessages.Messages">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessages.PersistentActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessages.ActorInstanceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessages.Equals(Akka.Persistence.WriteMessages)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessages.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessages.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessages.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.WriteMessagesSuccessful">
            <summary>
            Reply message to a successful <see cref="T:Akka.Persistence.WriteMessages"/> request. This reply is sent 
            to the requestor before all subsequent <see cref="T:Akka.Persistence.WriteMessageSuccess"/> replies.
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessagesSuccessful.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesSuccessful.Equals(Akka.Persistence.WriteMessagesSuccessful)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesSuccessful.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesSuccessful.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.WriteMessagesFailed">
            <summary>
            Reply message to a failed <see cref="T:Akka.Persistence.WriteMessages"/> request. This reply is sent 
            to the requestor before all subsequent <see cref="T:Akka.Persistence.WriteMessageFailure"/> replies.
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesFailed.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.WriteMessagesFailed"/> class.
            </summary>
            <param name="cause">The cause of the failed <see cref="T:Akka.Persistence.WriteMessages"/> request.</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="cause"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.WriteMessagesFailed.Cause">
            <summary>
            The cause of the failed <see cref="T:Akka.Persistence.WriteMessages"/> request.
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesFailed.Equals(Akka.Persistence.WriteMessagesFailed)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesFailed.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesFailed.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessagesFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.WriteMessageSuccess">
            <summary>
            Reply message to a successful <see cref="T:Akka.Persistence.WriteMessages"/> request. For each contained 
            <see cref="T:Akka.Persistence.IPersistentRepresentation"/> message in the request, a separate reply is sent to the requestor.
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessageSuccess.#ctor(Akka.Persistence.IPersistentRepresentation,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="persistent">TBD</param>
            <param name="actorInstanceId">TBD</param>
        </member>
        <member name="F:Akka.Persistence.WriteMessageSuccess.Persistent">
            <summary>
            Successfully written message.
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessageSuccess.ActorInstanceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessageSuccess.Equals(Akka.Persistence.WriteMessageSuccess)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageSuccess.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageSuccess.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageSuccess.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.WriteMessageRejected">
            <summary>
            Reply message to a rejected <see cref="T:Akka.Persistence.WriteMessages"/> request. The write of this message was rejected
            before it was stored, e.g. because it could not be serialized. For each contained 
            <see cref="T:Akka.Persistence.IPersistentRepresentation"/> message in the request, a separate reply is sent to the requestor.
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessageRejected.#ctor(Akka.Persistence.IPersistentRepresentation,System.Exception,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="persistent">TBD</param>
            <param name="cause">TBD</param>
            <param name="actorInstanceId">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="cause"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.WriteMessageRejected.Persistent">
            <summary>
            Message failed to be written.
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessageRejected.Cause">
            <summary>
            The cause of the failure
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessageRejected.ActorInstanceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessageRejected.Equals(Akka.Persistence.WriteMessageRejected)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageRejected.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageRejected.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageRejected.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.WriteMessageFailure">
            <summary>
            Reply message to a failed <see cref="T:Akka.Persistence.WriteMessages"/> request. For each contained 
            <see cref="T:Akka.Persistence.IPersistentRepresentation"/> message in the request, a separate reply is sent to the requestor.
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessageFailure.#ctor(Akka.Persistence.IPersistentRepresentation,System.Exception,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="persistent">TBD</param>
            <param name="cause">TBD</param>
            <param name="actorInstanceId">TBD</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="cause"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.WriteMessageFailure.Persistent">
            <summary>
            Message failed to be written.
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessageFailure.Cause">
            <summary>
            The cause of the failure
            </summary>
        </member>
        <member name="F:Akka.Persistence.WriteMessageFailure.ActorInstanceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.WriteMessageFailure.Equals(Akka.Persistence.WriteMessageFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageFailure.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageFailure.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.WriteMessageFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.LoopMessageSuccess">
            <summary>
            Reply message to a <see cref="T:Akka.Persistence.WriteMessages"/> with a non-persistent message.
            </summary>
        </member>
        <member name="M:Akka.Persistence.LoopMessageSuccess.#ctor(System.Object,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <param name="actorInstanceId">TBD</param>
        </member>
        <member name="F:Akka.Persistence.LoopMessageSuccess.Message">
            <summary>
            A looped message.
            </summary>
        </member>
        <member name="F:Akka.Persistence.LoopMessageSuccess.ActorInstanceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.LoopMessageSuccess.Equals(Akka.Persistence.LoopMessageSuccess)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.LoopMessageSuccess.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.LoopMessageSuccess.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.LoopMessageSuccess.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.ReplayMessages">
            <summary>
            Request to replay messages to the <see cref="F:Akka.Persistence.ReplayMessages.PersistentActor"/>.
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplayMessages.#ctor(System.Int64,System.Int64,System.Int64,System.String,Akka.Actor.IActorRef)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.ReplayMessages"/> class.
            </summary>
            <param name="fromSequenceNr">The sequence number where the replay should start.</param>
            <param name="toSequenceNr">The sequence number where the replay should end.</param>
            <param name="max">The maximum number of messages to be replayed.</param>
            <param name="persistenceId">TBD</param>
            <param name="persistentActor">TBD</param>
        </member>
        <member name="F:Akka.Persistence.ReplayMessages.FromSequenceNr">
            <summary>
            Inclusive lower sequence number bound where a replay should start.
            </summary>
        </member>
        <member name="F:Akka.Persistence.ReplayMessages.ToSequenceNr">
            <summary>
            Inclusive upper sequence number bound where a replay should end.
            </summary>
        </member>
        <member name="F:Akka.Persistence.ReplayMessages.Max">
            <summary>
            Maximum number of messages to be replayed.
            </summary>
        </member>
        <member name="F:Akka.Persistence.ReplayMessages.PersistenceId">
            <summary>
            Requesting persistent actor identifier.
            </summary>
        </member>
        <member name="F:Akka.Persistence.ReplayMessages.PersistentActor">
            <summary>
            Requesting persistent actor.
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplayMessages.Equals(Akka.Persistence.ReplayMessages)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayMessages.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayMessages.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.ReplayedMessage">
            <summary>
            Reply message to a <see cref="T:Akka.Persistence.ReplayMessages"/> request. A separate reply is sent to the requestor for each replayed message.
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplayedMessage.#ctor(Akka.Persistence.IPersistentRepresentation)">
            <summary>
            TBD
            </summary>
            <param name="persistent">TBD</param>
        </member>
        <member name="F:Akka.Persistence.ReplayedMessage.Persistent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplayedMessage.Equals(Akka.Persistence.ReplayedMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayedMessage.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayedMessage.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayedMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.RecoverySuccess">
            <summary>
            Reply message to a successful <see cref="T:Akka.Persistence.ReplayMessages"/> request. This reply is sent 
            to the requestor after all <see cref="T:Akka.Persistence.ReplayedMessage"/> have been sent (if any).
            
            It includes the highest stored sequence number of a given persistent actor.
            Note that the replay might have been limited to a lower sequence number.
            </summary>
        </member>
        <member name="M:Akka.Persistence.RecoverySuccess.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="highestSequenceNr">TBD</param>
        </member>
        <member name="F:Akka.Persistence.RecoverySuccess.HighestSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.RecoverySuccess.Equals(Akka.Persistence.RecoverySuccess)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.RecoverySuccess.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.RecoverySuccess.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.RecoverySuccess.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.ReplayMessagesFailure">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplayMessagesFailure.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.ReplayMessagesFailure"/> class.
            </summary>
            <param name="cause">The cause of the failure.</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="cause"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.ReplayMessagesFailure.Cause">
            <summary>
            The cause of the failure
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReplayMessagesFailure.Equals(Akka.Persistence.ReplayMessagesFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayMessagesFailure.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayMessagesFailure.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReplayMessagesFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.ReadHighestSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNr.#ctor(System.Int64,System.String,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="fromSequenceNr">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="persistentActor">TBD</param>
        </member>
        <member name="F:Akka.Persistence.ReadHighestSequenceNr.FromSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.ReadHighestSequenceNr.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.ReadHighestSequenceNr.PersistentActor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNr.Equals(Akka.Persistence.ReadHighestSequenceNr)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNr.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNr.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNr.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.ReadHighestSequenceNrSuccess">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrSuccess.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="highestSequenceNr">TBD</param>
        </member>
        <member name="F:Akka.Persistence.ReadHighestSequenceNrSuccess.HighestSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrSuccess.Equals(Akka.Persistence.ReadHighestSequenceNrSuccess)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrSuccess.CompareTo(Akka.Persistence.ReadHighestSequenceNrSuccess)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings:
            <dl>
              <dt>Less than zero</dt>
              <dd>This instance precedes <paramref name="other" /> in the sort order.</dd>
              <dt>Zero</dt>
              <dd>This instance occurs in the same position in the sort order as <paramref name="other" />.</dd>
              <dt>Greater than zero</dt>
              <dd>This instance follows <paramref name="other" /> in the sort order.</dd>
            </dl>
            </returns>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrSuccess.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrSuccess.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrSuccess.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.ReadHighestSequenceNrFailure">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrFailure.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.ReadHighestSequenceNrFailure"/> class.
            </summary>
            <param name="cause">The cause of the failure.</param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="cause"/> is undefined.
            </exception>
        </member>
        <member name="F:Akka.Persistence.ReadHighestSequenceNrFailure.Cause">
            <summary>
            The cause of the failure
            </summary>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrFailure.Equals(Akka.Persistence.ReadHighestSequenceNrFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrFailure.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrFailure.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.ReadHighestSequenceNrFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.PluginHolder">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.PluginHolder.Ref">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.PluginHolder.Adapters">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.PluginHolder.Config">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PluginHolder.#ctor(Akka.Actor.IActorRef,Akka.Persistence.Journal.EventAdapters,Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="ref">TBD</param>
            <param name="adapters">TBD</param>
            <param name="config">TBD</param>
        </member>
        <member name="T:Akka.Persistence.PersistenceExtension">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <exception cref="T:System.NullReferenceException">TBD</exception>
        </member>
        <member name="P:Akka.Persistence.PersistenceExtension.DefaultInternalStashOverflowStrategy">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceExtension.Settings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.PersistenceId(Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="actor">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.AdaptersFor(System.String)">
            <summary>
            Returns an <see cref="T:Akka.Persistence.Journal.EventAdapters"/> object which serves as a per-journal collection of bound event adapters. 
            If no adapters are registered for a given journal the EventAdapters object will simply return the identity adapter for each 
            class, otherwise the most specific adapter matching a given class will be returned.
            </summary>
            <param name="journalPluginId">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.AdaptersFor(Akka.Actor.IActorRef)">
            <summary>
            Looks up <see cref="T:Akka.Persistence.Journal.EventAdapters"/> by journal plugin's ActorRef.
            </summary>
            <param name="journalPluginActor">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.JournalConfigFor(System.String)">
            <summary>
            Returns the plugin config identified by <paramref name="journalPluginId"/>.
            When empty, looks in `akka.persistence.journal.plugin` to find the configuration entry path.
            When configured, uses <paramref name="journalPluginId"/> as absolute path to the journal configuration entry.
            </summary>
            <param name="journalPluginId">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.ConfigFor(Akka.Actor.IActorRef)">
            <summary>
            Looks up the plugin config by plugin's ActorRef.
            </summary>
            <param name="journalPluginActor">TBD</param>
            <exception cref="T:System.ArgumentException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.JournalFor(System.String)">
            <summary>
            Returns a journal plugin actor identified by <paramref name="journalPluginId"/>.
            When empty, looks in `akka.persistence.journal.plugin` to find configuration entry path.
            When configured, uses <paramref name="journalPluginId"/> as absolute path to the journal configuration entry.
            Configuration entry must contain few required fields, such as `class`. See `persistence.conf`.
            </summary>
            <param name="journalPluginId">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceExtension.SnapshotStoreFor(System.String)">
            <summary>
            Returns a snapshot store plugin actor identified by <paramref name="snapshotPluginId"/>. 
            When empty, looks in `akka.persistence.snapshot-store.plugin` to find configuration entry path.
            When configured, uses <paramref name="snapshotPluginId"/> as absolute path to the snapshot store configuration entry.
            Configuration entry must contain few required fields, such as `class`. See `persistence.conf`.
            </summary>
            <param name="snapshotPluginId">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Persistence">
            <summary>
            Persistence extension.
            </summary>
        </member>
        <member name="F:Akka.Persistence.Persistence.Instance">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Persistence.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Persistence.DefaultConfig">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.PersistenceSettings">
            <summary>
            Persistence configuration.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.View">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.PersistenceSettings.ViewSettings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.ViewSettings.#ctor(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.ViewSettings.AutoUpdate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.ViewSettings.AutoUpdateInterval">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.ViewSettings.AutoUpdateReplayMax">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.AtLeastOnceDelivery">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.#ctor(System.TimeSpan,System.Int32,System.Int32,System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="redeliverInterval">TBD</param>
            <param name="redeliveryBurstLimit">TBD</param>
            <param name="warnAfterNumberOfUnconfirmedAttempts">TBD</param>
            <param name="maxUnconfirmedMessages">TBD</param>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.#ctor(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.RedeliverInterval">
            <summary>
                Interval between redelivery attempts.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.MaxUnconfirmedMessages">
            <summary>
                Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory. When this
                number is exceed, <see cref="M:Akka.Persistence.AtLeastOnceDeliverySemantic.Deliver(Akka.Actor.ActorPath,System.Func{System.Int64,System.Object},System.Boolean)" /> will throw
                <see cref="T:Akka.Persistence.MaxUnconfirmedMessagesExceededException" />
                instead of accepting messages.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.WarnAfterNumberOfUnconfirmedAttempts">
            <summary>
                After this number of delivery attempts a <see cref="T:Akka.Persistence.UnconfirmedWarning" /> message will be sent to
                <see cref="P:Akka.Actor.ActorBase.Self" />.
                The count is reset after restart.
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.RedeliveryBurstLimit">
            <summary>
                Maximum number of unconfirmed messages that will be sent at each redelivery burst. This is to help to
                prevent overflowing amount of messages to be sent at once, for eg. when destination cannot be reached for a long
                time.
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.WithRedeliverInterval(System.TimeSpan)">
            <summary>
            TBD
            </summary>
            <param name="redeliverInterval">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.WithMaxUnconfirmedMessages(System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="maxUnconfirmedMessages">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.WithRedeliveryBurstLimit(System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="redeliveryBurstLimit">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.AtLeastOnceDeliverySettings.WithUnconfirmedAttemptsToWarn(System.Int32)">
            <summary>
            TBD
            </summary>
            <param name="unconfirmedAttemptsToWarn">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.Internal">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.PersistenceSettings.InternalSettings">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.InternalSettings.#ctor(Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="config">TBD</param>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.InternalSettings.PublishPluginCommands">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.PersistenceSettings.InternalSettings.PublishConfirmations">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.PersistenceSettings.#ctor(Akka.Actor.ActorSystem,Akka.Configuration.Config)">
            <summary>
            TBD
            </summary>
            <param name="system">TBD</param>
            <param name="config">TBD</param>
        </member>
        <member name="T:Akka.Persistence.IPersistenceRecovery">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistenceRecovery.Recovery">
            <summary>
            Called when the persistent actor is started for the first time.
            The returned <see cref="T:Akka.Persistence.Recovery"/> object defines how the actor
            will recover its persistent state behore handling the first incoming message.
            
            To skip recovery completely return <see cref="F:Akka.Persistence.Recovery.None"/>.
            </summary>
        </member>
        <member name="T:Akka.Persistence.IPersistenceStash">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistenceStash.InternalStashOverflowStrategy">
            <summary>
            The returned <see cref="T:Akka.Persistence.IStashOverflowStrategy"/> object determines how to handle the message
            failed to stash when the internal Stash capacity exceeded.
            </summary>
        </member>
        <member name="T:Akka.Persistence.IJournalPlugin">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IJournalPlugin.JournalPath">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IJournalPlugin.DefaultConfig">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.IPersistentIdentity">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentIdentity.PersistenceId">
            <summary>
            Identifier of the persistent identity for which messages should be replayed.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentIdentity.JournalPluginId">
            <summary>
            Configuration identifier of the journal plugin servicing current persistent actor or view.
            When empty, looks in [akka.persistence.journal.plugin] to find configuration entry path.
            Otherwise uses string value as an absolute path to the journal configuration entry.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentIdentity.SnapshotPluginId">
            <summary>
            Configuration identifier of the snapshot store plugin servicing current persistent actor or view.
            When empty, looks in [akka.persistence.snapshot-store.plugin] to find configuration entry path.
            Otherwise uses string value as an absolute path to the snapshot store configuration entry.
            </summary>
        </member>
        <member name="T:Akka.Persistence.IPersistentEnvelope">
            <summary>
            Internal API
            
            Marks messages which can then be resequenced by <see cref="T:Akka.Persistence.Journal.AsyncWriteJournal"/>.
            
            In essence it is either an <see cref="T:Akka.Persistence.NonPersistentMessage"/> or <see cref="T:Akka.Persistence.AtomicWrite"/>
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentEnvelope.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentEnvelope.Sender">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentEnvelope.Size">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.NonPersistentMessage">
            <summary>
            Message which can be resequenced by <see cref="T:Akka.Persistence.Journal.AsyncWriteJournal"/>, but will not be persisted.
            </summary>
        </member>
        <member name="M:Akka.Persistence.NonPersistentMessage.#ctor(System.Object,Akka.Actor.IActorRef)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <param name="sender">TBD</param>
        </member>
        <member name="P:Akka.Persistence.NonPersistentMessage.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.NonPersistentMessage.Sender">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.NonPersistentMessage.Size">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.AtomicWrite">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.#ctor(Akka.Persistence.IPersistentRepresentation)">
            <summary>
            TBD
            </summary>
            <param name="event">TBD</param>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.#ctor(System.Collections.Immutable.IImmutableList{Akka.Persistence.IPersistentRepresentation})">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when either the specified <paramref name="payload"/> is empty
            or the specified <paramref name="payload"/> contains messages from different <see cref="P:Akka.Persistence.IPersistentRepresentation.PersistenceId"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown when the specified <paramref name="payload"/> is undefined.
            </exception>
        </member>
        <member name="P:Akka.Persistence.AtomicWrite.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtomicWrite.Sender">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtomicWrite.Size">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtomicWrite.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtomicWrite.LowestSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.AtomicWrite.HighestSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.Equals(Akka.Persistence.AtomicWrite)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.AtomicWrite.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.IPersistentRepresentation">
            <summary>
            Representation of a persistent message in the journal plugin API.
            
            <see cref="T:Akka.Persistence.Journal.AsyncWriteJournal"/>
            <see cref="T:Akka.Persistence.Journal.IAsyncRecovery"/>
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.Payload">
            <summary>
            This persistent message's payload.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.Manifest">
            <summary>
            Returns the persistent payload's manifest if available.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.PersistenceId">
            <summary>
            Persistent id that journals a persistent message.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.SequenceNr">
            <summary>
            Sequence number of this persistent message.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.WriterGuid">
            <summary>
            Unique identifier of the writing persistent actor.
            Used to detect anomalies with overlapping writes from multiple
            persistent actors, which can result in inconsistent replays.
            </summary>
        </member>
        <member name="M:Akka.Persistence.IPersistentRepresentation.WithPayload(System.Object)">
            <summary>
            Creates a new persistent message with the specified <paramref name="payload"/>.
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.IPersistentRepresentation.WithManifest(System.String)">
            <summary>
            Creates a new persistent message with the specified <paramref name="manifest"/>.
            </summary>
            <param name="manifest">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.IsDeleted">
            <summary>
            Not used in new records stored with Akka.net v1.5 and above, but
            old records may have this as `true` if
            it was a non-permanent delete.
            </summary>
        </member>
        <member name="P:Akka.Persistence.IPersistentRepresentation.Sender">
            <summary>
            Sender of this message
            </summary>
        </member>
        <member name="M:Akka.Persistence.IPersistentRepresentation.Update(System.Int64,System.String,System.Boolean,Akka.Actor.IActorRef,System.String)">
            <summary>
            Creates a new deep copy of this message.
            </summary>
            <param name="sequenceNr">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="isDeleted">TBD</param>
            <param name="sender">TBD</param>
            <param name="writerGuid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Persistent">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.Persistent.Undefined">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Persistent.#ctor(System.Object,System.Int64,System.String,System.String,System.Boolean,Akka.Actor.IActorRef,System.String)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <param name="sequenceNr">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="manifest">TBD</param>
            <param name="isDeleted">TBD</param>
            <param name="sender">TBD</param>
            <param name="writerGuid">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Persistent.Payload">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Persistent.Manifest">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Persistent.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Persistent.SequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Persistent.IsDeleted">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Persistent.Sender">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Persistent.WriterGuid">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Persistent.WithPayload(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="payload">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Persistent.WithManifest(System.String)">
            <summary>
            TBD
            </summary>
            <param name="manifest">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Persistent.Update(System.Int64,System.String,System.Boolean,Akka.Actor.IActorRef,System.String)">
            <summary>
            TBD
            </summary>
            <param name="sequenceNr">TBD</param>
            <param name="persistenceId">TBD</param>
            <param name="isDeleted">TBD</param>
            <param name="sender">TBD</param>
            <param name="writerGuid">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Persistent.Equals(Akka.Persistence.IPersistentRepresentation)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.Persistent.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.Persistent.Equals(Akka.Persistence.Persistent)">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.Persistent.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Akka.Persistence.Persistent.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Persistence.Serialization.IMessage">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Serialization.MessageSerializer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.MessageSerializer.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Serialization.MessageSerializer"/> class.
            </summary>
            <param name="system">The actor system to associate with this serializer.</param>
        </member>
        <member name="P:Akka.Persistence.Serialization.MessageSerializer.TransportInformation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Serialization.MessageSerializer.IncludeManifest">
            <summary>
            Returns whether this serializer needs a manifest in the fromBinary method
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.MessageSerializer.ToBinary(System.Object)">
            <summary>
            Serializes the given object into a byte array
            </summary>
            <param name="obj">The object to serialize</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the <see cref="T:Akka.Persistence.Serialization.MessageSerializer"/> cannot serialize the specified <paramref name="obj"/>.
            The specified <paramref name="obj" /> must be of one of the following types:
            <see cref="T:Akka.Persistence.IPersistentRepresentation"/> | <see cref="T:Akka.Persistence.AtomicWrite"/> | <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>.
            </exception>
            <returns>
            A byte array containing the serialized object
            </returns>
        </member>
        <member name="M:Akka.Persistence.Serialization.MessageSerializer.FromBinary(System.Byte[],System.Type)">
            <summary>
            Deserializes a byte array into an object of type <paramref name="type" />.
            </summary>
            <param name="bytes">The array containing the serialized object</param>
            <param name="type">The type of object contained in the array</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the <see cref="T:Akka.Persistence.Serialization.MessageSerializer"/> cannot deserialize the specified <paramref name="type"/>.
            The specified <paramref name="type" /> must be of one of the following types:
            <see cref="T:Akka.Persistence.IPersistentRepresentation"/> | <see cref="T:Akka.Persistence.AtomicWrite"/> | <see cref="T:Akka.Persistence.AtLeastOnceDeliverySnapshot"/>.
            </exception>
            <returns>
            The object contained in the array
            </returns>
        </member>
        <member name="T:Akka.Persistence.Serialization.Snapshot">
            <summary>
            Wrapper for snapshot data.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.Snapshot.#ctor(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="data">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Serialization.Snapshot.Data">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.Snapshot.Equals(Akka.Persistence.Serialization.Snapshot)">
            <summary>
            TBD
            </summary>
            <param name="other">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Serialization.Snapshot.Equals(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="obj">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Serialization.Snapshot.GetHashCode">
            <summary>
            TBD
            </summary>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Serialization.SnapshotHeader">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.SnapshotHeader.#ctor(System.Int32,System.String)">
            <summary>
            TBD
            </summary>
            <param name="serializerId">TBD</param>
            <param name="manifest">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Serialization.SnapshotHeader.SerializerId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Serialization.SnapshotHeader.Manifest">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Serialization.SnapshotSerializer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.SnapshotSerializer.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Serialization.SnapshotSerializer"/> class.
            </summary>
            <param name="system">The actor system to associate with this serializer.</param>
        </member>
        <member name="P:Akka.Persistence.Serialization.SnapshotSerializer.TransportInformation">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:Akka.Persistence.Serialization.SnapshotSerializer.IncludeManifest">
            <summary>
            Returns whether this serializer needs a manifest in the fromBinary method
            </summary>
        </member>
        <member name="M:Akka.Persistence.Serialization.SnapshotSerializer.ToBinary(System.Object)">
            <summary>
            Serializes the given object into a byte array
            </summary>
            <param name="obj">The object to serialize</param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown when the <see cref="T:Akka.Persistence.Serialization.SnapshotSerializer"/> cannot serialize the specified <paramref name="obj"/>.
            The specified <paramref name="obj" /> must be of type <see cref="T:Akka.Persistence.Serialization.Snapshot"/>.
            </exception>
            <returns>
            A byte array containing the serialized object
            </returns>
        </member>
        <member name="M:Akka.Persistence.Serialization.SnapshotSerializer.FromBinary(System.Byte[],System.Type)">
            <summary>
            Deserializes a byte array into an object of type <paramref name="type" />.
            </summary>
            <param name="bytes">The array containing the serialized object</param>
            <param name="type">The type of object contained in the array</param>
            <returns>
            The object contained in the array
            </returns>
        </member>
        <member name="T:Akka.Persistence.ISnapshotMessage">
            <summary>
            Marker interface for internal snapshot messages
            </summary>
        </member>
        <member name="T:Akka.Persistence.ISnapshotRequest">
            <summary>
            Internal snapshot command
            </summary>
        </member>
        <member name="T:Akka.Persistence.ISnapshotResponse">
            <summary>
            Internal snapshot acknowledgement
            </summary>
        </member>
        <member name="T:Akka.Persistence.SnapshotMetadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.SnapshotMetadata.SnapshotMetadataComparer">
            <summary>
            This class represents an <see cref="T:System.Collections.Generic.IComparer`1"/> used when comparing two <see cref="T:Akka.Persistence.SnapshotMetadata"/> objects.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.SnapshotMetadataComparer.Compare(Akka.Persistence.SnapshotMetadata,Akka.Persistence.SnapshotMetadata)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="F:Akka.Persistence.SnapshotMetadata.Comparer">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotMetadata.TimestampNotSpecified">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.SnapshotMetadata"/> class.
            </summary>
            <param name="persistenceId">The id of the persistent actor fro mwhich the snapshot was taken.</param>
            <param name="sequenceNr">The sequence number at which the snapshot was taken.</param>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.#ctor(System.String,System.Int64,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.SnapshotMetadata"/> class.
            </summary>
            <param name="persistenceId">The id of the persistent actor fro mwhich the snapshot was taken.</param>
            <param name="sequenceNr">The sequence number at which the snapshot was taken.</param>
            <param name="timestamp">The time at which the snapshot was saved.</param>
        </member>
        <member name="F:Akka.Persistence.SnapshotMetadata.PersistenceId">
            <summary>
            Id of the persistent actor from which the snapshot was taken.
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotMetadata.SequenceNr">
            <summary>
            Sequence number at which a snapshot was taken.
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotMetadata.Timestamp">
            <summary>
            Time at which the snapshot was saved.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.Equals(Akka.Persistence.SnapshotMetadata)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SnapshotMetadata" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SnapshotMetadata" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SnapshotMetadata" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.SaveSnapshotSuccess">
            <summary>
            Sent to <see cref="T:Akka.Persistence.PersistentActor"/> after successful saving of a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotSuccess.#ctor(Akka.Persistence.SnapshotMetadata)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
        </member>
        <member name="F:Akka.Persistence.SaveSnapshotSuccess.Metadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotSuccess.Equals(Akka.Persistence.SaveSnapshotSuccess)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SaveSnapshotSuccess" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SaveSnapshotSuccess" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SaveSnapshotSuccess" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotSuccess.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotSuccess.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotSuccess.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.DeleteSnapshotSuccess">
            <summary>
            Sent to <see cref="T:Akka.Persistence.PersistentActor"/> after successful deletion of a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotSuccess.#ctor(Akka.Persistence.SnapshotMetadata)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshotSuccess.Metadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotSuccess.Equals(Akka.Persistence.DeleteSnapshotSuccess)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.DeleteSnapshotSuccess" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.DeleteSnapshotSuccess" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.DeleteSnapshotSuccess" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotSuccess.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotSuccess.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotSuccess.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.DeleteSnapshotsSuccess">
            <summary>
            Sent to <see cref="T:Akka.Persistence.PersistentActor"/> after successful deletion of a specified range of snapshots.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsSuccess.#ctor(Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="criteria">TBD</param>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshotsSuccess.Criteria">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsSuccess.Equals(Akka.Persistence.DeleteSnapshotsSuccess)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.DeleteSnapshotsSuccess" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.DeleteSnapshotsSuccess" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.DeleteSnapshotsSuccess" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsSuccess.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsSuccess.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsSuccess.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.SaveSnapshotFailure">
            <summary>
            Sent to <see cref="T:Akka.Persistence.PersistentActor"/> after failed saving a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotFailure.#ctor(Akka.Persistence.SnapshotMetadata,System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="cause">TBD</param>
        </member>
        <member name="F:Akka.Persistence.SaveSnapshotFailure.Metadata">
            <summary>
            Snapshot metadata.
            </summary>
        </member>
        <member name="F:Akka.Persistence.SaveSnapshotFailure.Cause">
            <summary>
            A failure cause.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotFailure.Equals(Akka.Persistence.SaveSnapshotFailure)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SaveSnapshotFailure" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SaveSnapshotFailure" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SaveSnapshotFailure" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotFailure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotFailure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshotFailure.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.DeleteSnapshotFailure">
            <summary>
            Sent to <see cref="T:Akka.Persistence.PersistentActor"/> after failed deletion of a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotFailure.#ctor(Akka.Persistence.SnapshotMetadata,System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="cause">TBD</param>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshotFailure.Metadata">
            <summary>
            Snapshot metadata.
            </summary>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshotFailure.Cause">
            <summary>
            A failure cause.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotFailure.Equals(Akka.Persistence.DeleteSnapshotFailure)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.DeleteSnapshotFailure" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.DeleteSnapshotFailure" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.DeleteSnapshotFailure" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotFailure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotFailure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotFailure.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.DeleteSnapshotsFailure">
            <summary>
            Sent to <see cref="T:Akka.Persistence.PersistentActor"/> after failed deletion of a range of snapshots.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsFailure.#ctor(Akka.Persistence.SnapshotSelectionCriteria,System.Exception)">
            <summary>
            TBD
            </summary>
            <param name="criteria">TBD</param>
            <param name="cause">TBD</param>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshotsFailure.Criteria">
            <summary>
            Snapshot metadata.
            </summary>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshotsFailure.Cause">
            <summary>
            A failure cause.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsFailure.Equals(Akka.Persistence.DeleteSnapshotsFailure)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.DeleteSnapshotsFailure" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.DeleteSnapshotsFailure" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.DeleteSnapshotsFailure" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsFailure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsFailure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshotsFailure.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.SnapshotOffer">
            <summary>
            Offers a <see cref="T:Akka.Persistence.PersistentActor"/> a previously saved snapshot during recovery.
            This offer is received before any further replayed messages.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotOffer.#ctor(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
        </member>
        <member name="F:Akka.Persistence.SnapshotOffer.Metadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotOffer.Snapshot">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotOffer.Equals(Akka.Persistence.SnapshotOffer)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SnapshotOffer" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SnapshotOffer" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SnapshotOffer" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotOffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotOffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotOffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.SnapshotSelectionCriteria">
            <summary>
            Selection criteria for loading and deleting a snapshots.
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotSelectionCriteria.Latest">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotSelectionCriteria.None">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.#ctor(System.Int64,System.DateTime,System.Int64,System.Nullable{System.DateTime})">
            <summary>
            TBD
            </summary>
            <param name="maxSequenceNr">TBD</param>
            <param name="maxTimeStamp">TBD</param>
            <param name="minSequenceNr">TBD</param>
            <param name="minTimestamp">TBD</param>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="maxSequenceNr">TBD</param>
        </member>
        <member name="F:Akka.Persistence.SnapshotSelectionCriteria.MaxSequenceNr">
            <summary>
            Upper bound for a selected snapshot's sequence number.
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotSelectionCriteria.MaxTimeStamp">
            <summary>
            Upper bound for a selected snapshot's timestamp.
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotSelectionCriteria.MinSequenceNr">
            <summary>
            Lower bound for a selected snapshot's sequence number
            </summary>
        </member>
        <member name="F:Akka.Persistence.SnapshotSelectionCriteria.MinTimestamp">
            <summary>
            Lower bound for a selected snapshot's timestamp
            </summary>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.Limit(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="toSequenceNr">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.IsMatch(Akka.Persistence.SnapshotMetadata)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.Equals(Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SnapshotSelectionCriteria" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SnapshotSelectionCriteria" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SnapshotSelectionCriteria" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SnapshotSelectionCriteria.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.SelectedSnapshot">
            <summary>
            A selected snapshot matching <see cref="T:Akka.Persistence.SnapshotSelectionCriteria"/>.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SelectedSnapshot.#ctor(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
        </member>
        <member name="F:Akka.Persistence.SelectedSnapshot.Metadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.SelectedSnapshot.Snapshot">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.SelectedSnapshot.Equals(Akka.Persistence.SelectedSnapshot)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SelectedSnapshot" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SelectedSnapshot" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SelectedSnapshot" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SelectedSnapshot.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SelectedSnapshot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SelectedSnapshot.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.LoadSnapshot">
            <summary>
            Instructs a snapshot store to load the snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshot.#ctor(System.String,Akka.Persistence.SnapshotSelectionCriteria,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="F:Akka.Persistence.LoadSnapshot.PersistenceId">
            <summary>
            Persistent actor identifier.
            </summary>
        </member>
        <member name="F:Akka.Persistence.LoadSnapshot.Criteria">
            <summary>
            Criteria for selecting snapshot, from which the recovery should start.
            </summary>
        </member>
        <member name="F:Akka.Persistence.LoadSnapshot.ToSequenceNr">
            <summary>
            Upper, inclusive sequence number bound for recovery.
            </summary>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshot.Equals(Akka.Persistence.LoadSnapshot)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.LoadSnapshot" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.LoadSnapshot" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.LoadSnapshot" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshot.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshot.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.LoadSnapshotResult">
            <summary>
            Response to a <see cref="T:Akka.Persistence.LoadSnapshot"/> message.
            </summary>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshotResult.#ctor(Akka.Persistence.SelectedSnapshot,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="snapshot">TBD</param>
            <param name="toSequenceNr">TBD</param>
        </member>
        <member name="F:Akka.Persistence.LoadSnapshotResult.Snapshot">
            <summary>
            Loaded snapshot or null if none provided.
            </summary>
        </member>
        <member name="F:Akka.Persistence.LoadSnapshotResult.ToSequenceNr">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshotResult.Equals(Akka.Persistence.LoadSnapshotResult)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.LoadSnapshotResult" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.LoadSnapshotResult" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.LoadSnapshotResult" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshotResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshotResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.LoadSnapshotResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.SaveSnapshot">
            <summary>
            Instructs a snapshot store to save a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshot.#ctor(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
            <exception cref="T:System.ArgumentNullException">TBD</exception>
        </member>
        <member name="F:Akka.Persistence.SaveSnapshot.Metadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.SaveSnapshot.Snapshot">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshot.Equals(Akka.Persistence.SaveSnapshot)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.SaveSnapshot" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.SaveSnapshot" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.SaveSnapshot" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshot.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.SaveSnapshot.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.DeleteSnapshot">
            <summary>
            Instructs a snapshot store to delete a snapshot.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshot.#ctor(Akka.Persistence.SnapshotMetadata)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <exception cref="T:System.ArgumentNullException">TBD</exception>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshot.Metadata">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshot.Equals(Akka.Persistence.DeleteSnapshot)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.DeleteSnapshot" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.DeleteSnapshot" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.DeleteSnapshot" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshot.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshot.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.DeleteSnapshots">
            <summary>
            Instructs a snapshot store to delete all snapshots that match provided criteria.
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshots.#ctor(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshots.PersistenceId">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:Akka.Persistence.DeleteSnapshots.Criteria">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshots.Equals(Akka.Persistence.DeleteSnapshots)">
            <summary>
            Determines whether the specified <see cref="T:Akka.Persistence.DeleteSnapshots" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Akka.Persistence.DeleteSnapshots" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Akka.Persistence.DeleteSnapshots" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshots.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshots.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Akka.Persistence.DeleteSnapshots.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Akka.Persistence.Snapshot.LocalSnapshotStore">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.LoadAsync(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.SaveAsync(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.DeleteAsync(Akka.Persistence.SnapshotMetadata)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.DeleteAsync(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.ReceivePluginInternal(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.Save(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.Serialize(System.IO.Stream,Akka.Persistence.Serialization.Snapshot)">
            <summary>
            TBD
            </summary>
            <param name="stream">TBD</param>
            <param name="snapshot">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.WithOutputStream(Akka.Persistence.SnapshotMetadata,System.Action{System.IO.Stream})">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="p">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.LocalSnapshotStore.PreStart">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Akka.Persistence.Snapshot.NoSnapshotStore">
            <summary>
            Used as a default snapshot-store in case no other store was configured.
            
            If a <see cref="T:Akka.Persistence.PersistentActor"/> calls the <see cref="M:Akka.Persistence.Eventsourced.SaveSnapshot(System.Object)"/> method,
            and at the same time does not configure a specific snapshot-store to be used *and* no default snapshot-store
            is available, then the <see cref="T:Akka.Persistence.Snapshot.NoSnapshotStore"/> will be used to signal a snapshot store failure.
            </summary>
        </member>
        <member name="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException"/> class.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.LoadAsync(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.SaveAsync(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
            <exception cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.DeleteAsync(Akka.Persistence.SnapshotMetadata)">
            <summary>
            TBD
            </summary>
            <param name="metadata">TBD</param>
            <exception cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.NoSnapshotStore.DeleteAsync(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            TBD
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <exception cref="T:Akka.Persistence.Snapshot.NoSnapshotStore.NoSnapshotStoreException">TBD</exception>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Snapshot.SnapshotStore">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.#ctor">
            <summary>
            TBD
            </summary>
            <exception cref="T:System.ArgumentException">TBD</exception>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.Receive(System.Object)">
            <summary>
            TBD
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.LoadAsync(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            Asynchronously loads a snapshot.
            
            This call is protected with a circuit-breaker
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.SaveAsync(Akka.Persistence.SnapshotMetadata,System.Object)">
            <summary>
            Asynchronously saves a snapshot.
            
            This call is protected with a circuit-breaker
            </summary>
            <param name="metadata">TBD</param>
            <param name="snapshot">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.DeleteAsync(Akka.Persistence.SnapshotMetadata)">
            <summary>
            Deletes the snapshot identified by <paramref name="metadata"/>.
            
            This call is protected with a circuit-breaker
            </summary>
            <param name="metadata">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.DeleteAsync(System.String,Akka.Persistence.SnapshotSelectionCriteria)">
            <summary>
            Deletes all snapshots matching provided <paramref name="criteria"/>.
            
            This call is protected with a circuit-breaker
            </summary>
            <param name="persistenceId">TBD</param>
            <param name="criteria">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="M:Akka.Persistence.Snapshot.SnapshotStore.ReceivePluginInternal(System.Object)">
            <summary>
            Allows plugin implementers to use <see cref="M:Akka.Actor.PipeToSupport.PipeTo``1(System.Threading.Tasks.Task{``0},Akka.Actor.ICanTell,Akka.Actor.IActorRef,System.Func{``0,System.Object},System.Func{System.Exception,System.Object})"/> <see cref="P:Akka.Actor.ActorBase.Self"/>
            and handle additional messages for implementing advanced features
            </summary>
            <param name="message">TBD</param>
            <returns>TBD</returns>
        </member>
        <member name="T:Akka.Persistence.Update">
            <summary>
            Instructs a <see cref="T:Akka.Persistence.PersistentView"/> to update itself. This will run a single incremental message replay 
            with all messages from the corresponding persistent id's journal that have not yet been consumed by the view.  
            To update a view with messages that have been written after handling this request, another <see cref="T:Akka.Persistence.Update"/> 
            request must be sent to the view.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Update.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.Update.#ctor(System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="isAwait">TBD</param>
        </member>
        <member name="M:Akka.Persistence.Update.#ctor(System.Boolean,System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="isAwait">TBD</param>
            <param name="replayMax">TBD</param>
        </member>
        <member name="P:Akka.Persistence.Update.IsAwait">
            <summary>
            If `true`, processing of further messages sent to the view will be delayed 
            until the incremental message replay, triggered by this update request, completes. 
            If `false`, any message sent to the view may interleave with replayed <see cref="T:Akka.Persistence.Persistent"/> message stream.
            </summary>
        </member>
        <member name="P:Akka.Persistence.Update.ReplayMax">
            <summary>
            Maximum number of messages to replay when handling this update request. Defaults to <see cref="F:System.Int64.MaxValue"/> (i.e. no limit).
            </summary>
        </member>
        <member name="T:Akka.Persistence.ScheduledUpdate">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:Akka.Persistence.ScheduledUpdate.#ctor(System.Int64)">
            <summary>
            TBD
            </summary>
            <param name="replayMax">TBD</param>
        </member>
        <member name="P:Akka.Persistence.ScheduledUpdate.ReplayMax">
            <summary>
            TBD
            </summary>
        </member>
    </members>
</doc>
